Makefile:304:$(CRY_SUBDIR)/%.bin: $(CRY_SUBDIR)/%.aif ; $(AIF) $< $@ --compress
.git/hooks/fsmonitor-watchman.sample:51:	# In the query expression below we're asking for names of files that
Binary file .git/objects/pack/pack-858e84e40cb1b7751b6f05759038d36e28a52a83.pack matches
Binary file .git/index matches
build/emerald/sym_common.ld:114:gSuppressLinkErrorMessage = .;
build/emerald/sym_ewram.ld:2:src/decompress.o(ewram_data);
Binary file build/emerald/src/battle_tower.o matches
Binary file build/emerald/src/battle_anim_effects_1.o matches
Binary file build/emerald/src/wireless_communication_status_screen.o matches
Binary file build/emerald/src/evolution_graphics.o matches
Binary file build/emerald/src/mystery_event_script.o matches
Binary file build/emerald/src/item_menu.o matches
Binary file build/emerald/src/strings.o matches
Binary file build/emerald/src/slot_machine.o matches
Binary file build/emerald/src/contest_ai.o matches
Binary file build/emerald/src/ereader_screen.o matches
Binary file build/emerald/src/money.o matches
Binary file build/emerald/src/contest_painting.o matches
Binary file build/emerald/src/battle_ai_util.o matches
Binary file build/emerald/src/overworld.o matches
Binary file build/emerald/src/hof_pc.o matches
Binary file build/emerald/src/mystery_gift_menu.o matches
Binary file build/emerald/src/palette_util.o matches
Binary file build/emerald/src/battle_setup.o matches
Binary file build/emerald/src/coord_event_weather.o matches
Binary file build/emerald/src/battle_debug.o matches
Binary file build/emerald/src/pokedex_area_screen.o matches
Binary file build/emerald/src/tileset_anims.o matches
Binary file build/emerald/src/pokeblock_feed.o matches
Binary file build/emerald/src/field_player_avatar.o matches
Binary file build/emerald/src/region_map.o matches
Binary file build/emerald/src/pokedex.o matches
Binary file build/emerald/src/title_screen.o matches
Binary file build/emerald/src/field_specials.o matches
Binary file build/emerald/src/mon_markings.o matches
Binary file build/emerald/src/trainer_see.o matches
Binary file build/emerald/src/pokemon.o matches
Binary file build/emerald/src/battle_arena.o matches
Binary file build/emerald/src/pokemon_size_record.o matches
Binary file build/emerald/src/berry_crush.o matches
Binary file build/emerald/src/record_mixing.o matches
Binary file build/emerald/src/intro.o matches
Binary file build/emerald/src/ereader_helpers.o matches
Binary file build/emerald/src/battle_controller_safari.o matches
Binary file build/emerald/src/tilesets.o matches
Binary file build/emerald/src/graphics.o matches
Binary file build/emerald/src/wallclock.o matches
Binary file build/emerald/src/battle_interface.o matches
Binary file build/emerald/src/text_window.o matches
Binary file build/emerald/src/field_poison.o matches
Binary file build/emerald/src/expansion_intro.o matches
Binary file build/emerald/src/pokenav_menu_handler.o matches
Binary file build/emerald/src/battle_pike.o matches
Binary file build/emerald/src/item_use.o matches
Binary file build/emerald/src/trainer_pokemon_sprites.o matches
Binary file build/emerald/src/move_relearner.o matches
Binary file build/emerald/src/pokemon_storage_system.o matches
Binary file build/emerald/src/fldeff_escalator.o matches
Binary file build/emerald/src/battle_script_commands.o matches
Binary file build/emerald/src/field_special_scene.o matches
Binary file build/emerald/src/battle_anim_water.o matches
Binary file build/emerald/src/battle_anim_fire.o matches
Binary file build/emerald/src/image_processing_effects.o matches
Binary file build/emerald/src/battle_util.o matches
Binary file build/emerald/src/field_weather.o matches
Binary file build/emerald/src/decoration_inventory.o matches
Binary file build/emerald/src/script_movement.o matches
Binary file build/emerald/src/battle_anim_effects_2.o matches
Binary file build/emerald/src/link.o matches
Binary file build/emerald/src/dodrio_berry_picking.o matches
Binary file build/emerald/src/party_menu.o matches
Binary file build/emerald/src/mystery_event_msg.o matches
Binary file build/emerald/src/menu.o matches
Binary file build/emerald/src/battle_anim_rock.o matches
Binary file build/emerald/src/bard_music.o matches
Binary file build/emerald/src/reset_rtc_screen.o matches
Binary file build/emerald/src/mail_data.o matches
Binary file build/emerald/src/battle_records.o matches
Binary file build/emerald/src/battle_ai_switch_items.o matches
Binary file build/emerald/src/pokenav_conditions_search_results.o matches
Binary file build/emerald/src/battle_anim_flying.o matches
Binary file build/emerald/src/battle_dome.o matches
Binary file build/emerald/src/battle_controller_player.o matches
Binary file build/emerald/src/sound.o matches
Binary file build/emerald/src/battle_tv.o matches
Binary file build/emerald/src/field_screen_effect.o matches
Binary file build/emerald/src/intro_credits_graphics.o matches
Binary file build/emerald/src/braille_puzzles.o matches
Binary file build/emerald/src/digit_obj_util.o matches
Binary file build/emerald/src/braille.o matches
Binary file build/emerald/src/battle_anim_mon_movement.o matches
Binary file build/emerald/src/egg_hatch.o matches
Binary file build/emerald/src/battle_controller_recorded_player.o matches
Binary file build/emerald/src/safari_zone.o matches
Binary file build/emerald/src/trade.o matches
Binary file build/emerald/src/pokenav_list.o matches
Binary file build/emerald/src/credits.o matches
Binary file build/emerald/src/lottery_corner.o matches
Binary file build/emerald/src/match_call.o matches
Binary file build/emerald/src/fldeff_softboiled.o matches
Binary file build/emerald/src/rom_header_gf.o matches
Binary file build/emerald/src/main.o matches
Binary file build/emerald/src/field_camera.o matches
Binary file build/emerald/src/landmark.o matches
Binary file build/emerald/src/field_effect.o matches
Binary file build/emerald/src/pokenav_match_call_gfx.o matches
Binary file build/emerald/src/daycare.o matches
Binary file build/emerald/src/battle_controller_link_opponent.o matches
Binary file build/emerald/src/diploma.o matches
Binary file build/emerald/src/battle_anim_ground.o matches
Binary file build/emerald/src/frontier_util.o matches
Binary file build/emerald/src/contest_util.o matches
Binary file build/emerald/src/easy_chat.o matches
Binary file build/emerald/src/field_region_map.o matches
Binary file build/emerald/src/berry_fix_program.o matches
Binary file build/emerald/src/event_object_lock.o matches
Binary file build/emerald/src/battle_bg.o matches
Binary file build/emerald/src/birch_pc.o matches
Binary file build/emerald/src/roulette.o matches
Binary file build/emerald/src/tv.o matches
Binary file build/emerald/src/battle_anim_bug.o matches
Binary file build/emerald/src/battle_anim_ghost.o matches
Binary file build/emerald/src/rotating_gate.o matches
Binary file build/emerald/src/link_rfu_2.o matches
Binary file build/emerald/src/mail.o matches
Binary file build/emerald/src/union_room_chat.o matches
Binary file build/emerald/src/mystery_event_menu.o matches
Binary file build/emerald/src/save_failed_screen.o matches
Binary file build/emerald/src/battle_anim_poison.o matches
Binary file build/emerald/src/test_runner_stub.o matches
Binary file build/emerald/src/data.o matches
Binary file build/emerald/src/pokeball.o matches
Binary file build/emerald/src/link_rfu_3.o matches
Binary file build/emerald/src/trainer_hill.o matches
Binary file build/emerald/src/pokemon_debug.o matches
Binary file build/emerald/src/battle_controller_opponent.o matches
Binary file build/emerald/src/scanline_effect.o matches
Binary file build/emerald/src/battle_anim_normal.o matches
Binary file build/emerald/src/text_input_strings.o matches
Binary file build/emerald/src/mauville_old_man.o matches
Binary file build/emerald/src/union_room_battle.o matches
Binary file build/emerald/src/map_name_popup.o matches
Binary file build/emerald/src/pokenav_main_menu.o matches
Binary file build/emerald/src/field_tasks.o matches
Binary file build/emerald/src/new_game.o matches
Binary file build/emerald/src/pokemon_icon.o matches
Binary file build/emerald/src/pokenav_conditions.o matches
Binary file build/emerald/src/gym_leader_rematch.o matches
Binary file build/emerald/src/naming_screen.o matches
Binary file build/emerald/src/battle_anim_utility_funcs.o matches
Binary file build/emerald/src/pokenav_ribbons_summary.o matches
Binary file build/emerald/src/cable_club.o matches
Binary file build/emerald/src/fonts.o matches
Binary file build/emerald/src/dynamic_placeholder_text_util.o matches
Binary file build/emerald/src/rtc.o matches
Binary file build/emerald/src/save_location.o matches
Binary file build/emerald/src/play_time.o matches
Binary file build/emerald/src/confetti_util.o matches
Binary file build/emerald/src/battle_anim_throw.o matches
Binary file build/emerald/src/rotating_tile_puzzle.o matches
Binary file build/emerald/src/reshow_battle_screen.o matches
Binary file build/emerald/src/random.o matches
Binary file build/emerald/src/pokenav_menu_handler_gfx.o matches
Binary file build/emerald/src/dewford_trend.o matches
Binary file build/emerald/src/palette.o matches
Binary file build/emerald/src/faraway_island.o matches
Binary file build/emerald/src/fldeff_strength.o matches
Binary file build/emerald/src/use_pokeblock.o matches
Binary file build/emerald/src/battle_tent.o matches
Binary file build/emerald/src/item.o matches
Binary file build/emerald/src/battle_controller_player_partner.o matches
Binary file build/emerald/src/battle_ai_main.o matches
Binary file build/emerald/src/battle_controllers.o matches
Binary file build/emerald/src/item_icon.o matches
Binary file build/emerald/src/wonder_news.o matches
Binary file build/emerald/src/field_message_box.o matches
Binary file build/emerald/src/battle_anim_fight.o matches
Binary file build/emerald/src/battle_anim_new.o matches
Binary file build/emerald/src/battle_anim_smokescreen.o matches
Binary file build/emerald/src/clear_save_data_screen.o matches
Binary file build/emerald/src/fldeff_sweetscent.o matches
Binary file build/emerald/src/fieldmap.o matches
Binary file build/emerald/src/starter_choose.o matches
Binary file build/emerald/src/secret_base.o matches
Binary file build/emerald/src/heal_location.o matches
Binary file build/emerald/src/librfu_sio32id.o matches
Binary file build/emerald/src/librfu_rfu.o matches
Binary file build/emerald/src/field_control_avatar.o matches
Binary file build/emerald/src/battle_intro.o matches
Binary file build/emerald/src/player_pc.o matches
Binary file build/emerald/src/post_battle_event_funcs.o matches
Binary file build/emerald/src/time_events.o matches
Binary file build/emerald/src/pokemon_summary_screen.o matches
Binary file build/emerald/src/pokeblock.o matches
Binary file build/emerald/src/start_menu.o matches
Binary file build/emerald/src/fldeff_teleport.o matches
Binary file build/emerald/src/event_data.o matches
Binary file build/emerald/src/battle_anim_status_effects.o matches
Binary file build/emerald/src/fldeff_misc.o matches
Binary file build/emerald/src/mystery_gift_scripts.o matches
Binary file build/emerald/src/battle_gfx_sfx_util.o matches
Binary file build/emerald/src/battle_controller_link_partner.o matches
Binary file build/emerald/src/minigame_countdown.o matches
Binary file build/emerald/src/berry_fix_graphics.o matches
Binary file build/emerald/src/roamer.o matches
Binary file build/emerald/src/mirage_tower.o matches
Binary file build/emerald/src/international_string_util.o matches
Binary file build/emerald/src/battle_controller_wally.o matches
Binary file build/emerald/src/debug.o matches
Binary file build/emerald/src/lilycove_lady.o matches
Binary file build/emerald/src/battle_transition.o matches
Binary file build/emerald/src/battle_anim_mons.o matches
Binary file build/emerald/src/contest_link_util.o matches
Binary file build/emerald/src/mystery_gift.o matches
Binary file build/emerald/src/battle_controller_recorded_opponent.o matches
Binary file build/emerald/src/battle_palace.o matches
Binary file build/emerald/src/menu_helpers.o matches
Binary file build/emerald/src/pokedex_area_region_map.o matches
Binary file build/emerald/src/pokemon_animation.o matches
Binary file build/emerald/src/battle_anim_sound_tasks.o matches
Binary file build/emerald/src/wild_encounter.o matches
Binary file build/emerald/src/rayquaza_scene.o matches
Binary file build/emerald/src/load_save.o matches
Binary file build/emerald/src/union_room.o matches
Binary file build/emerald/src/coins.o matches
Binary file build/emerald/src/script_pokemon_util.o matches
Binary file build/emerald/src/main_menu.o matches
Binary file build/emerald/src/decoration.o matches
Binary file build/emerald/src/math_util.o matches
Binary file build/emerald/src/battle_anim_ice.o matches
Binary file build/emerald/src/battle_anim_dragon.o matches
Binary file build/emerald/src/fldeff_dig.o matches
Binary file build/emerald/src/fldeff_rocksmash.o matches
Binary file build/emerald/src/field_effect_helpers.o matches
Binary file build/emerald/src/cable_car.o matches
Binary file build/emerald/src/battle_anim_psychic.o matches
Binary file build/emerald/src/script_menu.o matches
Binary file build/emerald/src/battle_message.o matches
Binary file build/emerald/src/pokenav_region_map.o matches
Binary file build/emerald/src/battle_pyramid.o matches
Binary file build/emerald/src/battle_main.o matches
Binary file build/emerald/src/hall_of_fame.o matches
Binary file build/emerald/src/option_menu.o matches
Binary file build/emerald/src/berry.o matches
Binary file build/emerald/src/trig.o matches
Binary file build/emerald/src/shop.o matches
Binary file build/emerald/src/battle_pyramid_bag.o matches
Binary file build/emerald/src/scrcmd.o matches
Binary file build/emerald/src/pokemon_jump.o matches
Binary file build/emerald/src/pokenav_match_call_list.o matches
Binary file build/emerald/src/AgbRfu_LinkManager.o matches
Binary file build/emerald/src/union_room_player_avatar.o matches
Binary file build/emerald/src/field_door.o matches
Binary file build/emerald/src/trader.o matches
Binary file build/emerald/src/multiboot.o matches
Binary file build/emerald/src/frontier_pass.o matches
Binary file build/emerald/src/mystery_gift_view.o matches
Binary file build/emerald/src/list_menu.o matches
Binary file build/emerald/src/battle_anim_electric.o matches
Binary file build/emerald/src/reload_save.o matches
Binary file build/emerald/src/berry_blender.o matches
Binary file build/emerald/src/save.o matches
Binary file build/emerald/src/walda_phrase.o matches
Binary file build/emerald/src/task.o matches
Binary file build/emerald/src/battle_factory_screen.o matches
Binary file build/emerald/src/util.o matches
Binary file build/emerald/src/evolution_scene.o matches
Binary file build/emerald/src/item_menu_icons.o matches
Binary file build/emerald/src/berry_tag_screen.o matches
Binary file build/emerald/src/mystery_gift_server.o matches
Binary file build/emerald/src/mystery_gift_client.o matches
Binary file build/emerald/src/battle_z_move.o matches
Binary file build/emerald/src/battle_factory.o matches
Binary file build/emerald/src/battle_anim.o matches
Binary file build/emerald/src/contest_effect.o matches
Binary file build/emerald/src/fldeff_flash.o matches
Binary file build/emerald/src/event_object_movement.o matches
Binary file build/emerald/src/clock.o matches
Binary file build/emerald/src/pokenav.o matches
Binary file build/emerald/src/berry_powder.o matches
Binary file build/emerald/src/pokenav_conditions_gfx.o matches
Binary file build/emerald/src/contest_link.o matches
Binary file build/emerald/src/battle_anim_dark.o matches
Binary file build/emerald/src/mystery_gift_link.o matches
Binary file build/emerald/src/recorded_battle.o matches
Binary file build/emerald/src/apprentice.o matches
Binary file build/emerald/src/fldeff_cut.o matches
Binary file build/emerald/src/pokenav_ribbons_list.o matches
Binary file build/emerald/src/menu_specialized.o matches
Binary file build/emerald/src/decompress.o matches
Binary file build/emerald/src/bike.o matches
Binary file build/emerald/src/field_weather_effect.o matches
Binary file build/emerald/src/trainer_card.o matches
Binary file build/emerald/src/pokenav_match_call_data.o matches
Binary file build/emerald/src/librfu_stwi.o matches
Binary file build/emerald/src/battle_transition_frontier.o matches
Binary file build/emerald/src/metatile_behavior.o matches
Binary file build/emerald/src/battle_util2.o matches
Binary file build/emerald/src/contest.o matches
Binary file build/emerald/src/script.o matches
Binary file build/emerald/src/pokedex_cry_screen.o matches
Binary file build/emerald/src/battle_anim_effects_3.o matches
Binary file build/emerald/data/battle_scripts_1.o matches
Binary file build/emerald/data/battle_anim_scripts.o matches
Binary file build/emerald/data/event_scripts.o matches
Binary file build/emerald/data/map_events.o matches
build/emerald/ld_script.ld:90:        src/decompress.o(.text);
Binary file build/emerald/gflib/blit.o matches
Binary file build/emerald/gflib/io_reg.o matches
Binary file build/emerald/gflib/gpu_regs.o matches
Binary file build/emerald/gflib/malloc.o matches
Binary file build/emerald/gflib/bg.o matches
Binary file build/emerald/gflib/string_util.o matches
Binary file build/emerald/gflib/sprite.o matches
Binary file build/emerald/gflib/dma3_manager.o matches
Binary file build/emerald/gflib/window.o matches
Binary file build/emerald/gflib/text.o matches
ld_script.txt:90:        src/decompress.o(.text);
tools/bin2c/bin2c.c:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/bin2c/LICENSE:13:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/gbafix/COPYING:409:  You may not propagate or modify a covered work except as expressly
tools/gbafix/COPYING:492:  In the following three paragraphs, a "patent license" is any express
tools/gbafix/COPYING:494:(such as an express permission to practice a patent or covenant not to
tools/gbafix/COPYING:594:OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
tools/gbafix/elf.h:18:EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
tools/gbafix/elf.h:283:#define EM_CYPRESS_M8C	161
tools/gbafix/elf.h:443:#define SHF_COMPRESSED	     (1 << 11)
tools/gbafix/elf.h:462:#define ELFCOMPRESS_ZLIB	1
tools/gbafix/elf.h:463:#define ELFCOMPRESS_LOOS	0x60000000
tools/gbafix/elf.h:464:#define ELFCOMPRESS_HIOS	0x6fffffff
tools/gbafix/elf.h:465:#define ELFCOMPRESS_LOPROC	0x70000000
tools/gbafix/elf.h:466:#define ELFCOMPRESS_HIPROC	0x7fffffff
Binary file tools/aif2pcm/aif2pcm matches
tools/aif2pcm/main.c:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/aif2pcm/main.c:369:// This is a table of deltas between sample values in compressed PCM data.
tools/aif2pcm/main.c:381:struct Bytes *delta_decompress(struct Bytes *delta, unsigned int expected_length)
tools/aif2pcm/main.c:485:struct Bytes *delta_compress(struct Bytes *pcm)
tools/aif2pcm/main.c:571:void aif2pcm(const char *aif_filename, const char *pcm_filename, bool compress)
tools/aif2pcm/main.c:594:	if (compress)
tools/aif2pcm/main.c:599:		pcm = delta_compress(input);
tools/aif2pcm/main.c:616:	if (compress) flags |= 1;
tools/aif2pcm/main.c:642:	bool compressed = flags & 1;
tools/aif2pcm/main.c:652:	if (compressed)
tools/aif2pcm/main.c:658:		pcm = delta_decompress(delta, aif_data->num_samples);
tools/aif2pcm/main.c:884:	fprintf(stderr, "       aif2pcm aif_file [bin_file] [--compress]\n");
tools/aif2pcm/main.c:898:	bool compressed = false;
tools/aif2pcm/main.c:904:			if (strcmp(argv[i], "--compress") == 0)
tools/aif2pcm/main.c:906:				compressed = true;
tools/aif2pcm/main.c:916:			aif2pcm(input_file, output_file, compressed);
tools/aif2pcm/main.c:921:			aif2pcm(input_file, output_file, compressed);
tools/aif2pcm/LICENSE:14:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/aif2pcm/extended.c:19: * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
tools/preproc/charmap.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/string_parser.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/asm_file.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/char_util.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/charmap.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/c_file.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/utf8.cpp:16:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/asm_file.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/string_parser.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/LICENSE:13:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/c_file.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/preproc.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/preproc.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/preproc/utf8.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/scaninc/source_file.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/scaninc/scaninc.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/scaninc/asm_file.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/scaninc/c_file.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/scaninc/asm_file.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/scaninc/LICENSE:13:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/scaninc/c_file.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/scaninc/source_file.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/scaninc/scaninc.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/mapjson/json11.h:40: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/mapjson/json11.cpp:11: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/agbcc/include/pwd.h:22: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
tools/agbcc/include/unctrl.h:23: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
tools/agbcc/include/stdio.h:13: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
tools/agbcc/include/stdarg.h:12:   TYPE may alternatively be an expression whose type is used.  */
tools/agbcc/include/ar.h:32: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
tools/agbcc/include/grp.h:29: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
Binary file tools/agbcc/bin/agbcc_arm matches
Binary file tools/agbcc/bin/agbcc matches
Binary file tools/agbcc/bin/old_agbcc matches
tools/rsfont/font.c:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/rsfont/convert_png.c:132:		PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);
tools/rsfont/main.c:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/rsfont/LICENSE:13:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/rsfont/gfx.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/rsfont/font.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
Binary file tools/mgba/mgba-rom-test.exe matches
Binary file tools/mgba/mgba-rom-test matches
tools/jsonproc/nlohmann/json.hpp:21:THE SOFTWARE  IS PROVIDED "AS  IS", WITHOUT WARRANTY  OF ANY KIND,  EXPRESS OR
tools/jsonproc/nlohmann/json.hpp:1054:    _Pragma("diag_suppress=Pe137") \
tools/jsonproc/nlohmann/json.hpp:1073:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1215,1216,1444,1445")
tools/jsonproc/nlohmann/json.hpp:1075:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1215,1444")
tools/jsonproc/nlohmann/json.hpp:1081:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1215,1444")
tools/jsonproc/nlohmann/json.hpp:1094:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1291,1718")
tools/jsonproc/nlohmann/json.hpp:1100:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress=Pe1444,Pe1215")
tools/jsonproc/nlohmann/json.hpp:1117:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 1675")
tools/jsonproc/nlohmann/json.hpp:1127:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 163")
tools/jsonproc/nlohmann/json.hpp:1129:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 163")
tools/jsonproc/nlohmann/json.hpp:1131:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress=Pe161")
tools/jsonproc/nlohmann/json.hpp:1133:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 161")
tools/jsonproc/nlohmann/json.hpp:1152:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1097,1098")
tools/jsonproc/nlohmann/json.hpp:1154:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1097")
tools/jsonproc/nlohmann/json.hpp:1161:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1173")
tools/jsonproc/nlohmann/json.hpp:1163:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress=Pe1097")
tools/jsonproc/nlohmann/json.hpp:1165:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1097")
tools/jsonproc/nlohmann/json.hpp:1193:    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION _Pragma("diag_suppress 3142")
tools/jsonproc/nlohmann/json.hpp:2677:// of such an expression
tools/jsonproc/nlohmann/json.hpp:3604:// https://blogs.msdn.microsoft.com/vcblog/2015/12/02/partial-support-for-expression-sfinae-in-vs-2015-update-1/
tools/jsonproc/nlohmann/json.hpp:5683:// It's required so that expressions like {ptr, len} can be implicitly cast
tools/jsonproc/nlohmann/json.hpp:17013:        JSON_ASSERT(x < 0 && x < (std::numeric_limits<number_integer_t>::max)()); // NOLINT(misc-redundant-expression)
tools/jsonproc/nlohmann/json.hpp:17864:    value is changed, because the invariant expresses a relationship between
tools/jsonproc/nlohmann/json.hpp:17886:            // cppcheck-suppress assertWithSideEffect
tools/jsonproc/nlohmann/json.hpp:21922:    is_nothrow_move_constructible<nlohmann::NLOHMANN_BASIC_JSON_TPL>::value&&                          // NOLINT(misc-redundant-expression)
tools/jsonproc/inja.hpp:16:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/jsonproc/inja.hpp:356:class ExpressionNode;
tools/jsonproc/inja.hpp:360:class ExpressionListNode;
tools/jsonproc/inja.hpp:377:  virtual void visit(const ExpressionNode& node) = 0;
tools/jsonproc/inja.hpp:381:  virtual void visit(const ExpressionListNode& node) = 0;
tools/jsonproc/inja.hpp:428:class ExpressionNode : public AstNode {
tools/jsonproc/inja.hpp:430:  explicit ExpressionNode(size_t pos): AstNode(pos) {}
tools/jsonproc/inja.hpp:437:class LiteralNode : public ExpressionNode {
tools/jsonproc/inja.hpp:441:  explicit LiteralNode(std::string_view data_text, size_t pos): ExpressionNode(pos), value(json::parse(data_text)) {}
tools/jsonproc/inja.hpp:448:class DataNode : public ExpressionNode {
tools/jsonproc/inja.hpp:464:  explicit DataNode(std::string_view ptr_name, size_t pos): ExpressionNode(pos), name(ptr_name), ptr(json::json_pointer(convert_dot_to_ptr(ptr_name))) {}
tools/jsonproc/inja.hpp:471:class FunctionNode : public ExpressionNode {
tools/jsonproc/inja.hpp:487:  std::vector<std::shared_ptr<ExpressionNode>> arguments;
tools/jsonproc/inja.hpp:491:      : ExpressionNode(pos), precedence(8), associativity(Associativity::Left), operation(Op::Callback), name(name), number_args(1) {}
tools/jsonproc/inja.hpp:492:  explicit FunctionNode(Op operation, size_t pos): ExpressionNode(pos), operation(operation), number_args(1) {
tools/jsonproc/inja.hpp:591:class ExpressionListNode : public AstNode {
tools/jsonproc/inja.hpp:593:  std::shared_ptr<ExpressionNode> root;
tools/jsonproc/inja.hpp:595:  explicit ExpressionListNode(): AstNode(0) {}
tools/jsonproc/inja.hpp:596:  explicit ExpressionListNode(size_t pos): AstNode(pos) {}
tools/jsonproc/inja.hpp:612:  ExpressionListNode condition;
tools/jsonproc/inja.hpp:647:  ExpressionListNode condition;
tools/jsonproc/inja.hpp:701:  ExpressionListNode expression;
tools/jsonproc/inja.hpp:734:  void visit(const ExpressionNode&) {}
tools/jsonproc/inja.hpp:747:  void visit(const ExpressionListNode& node) {
tools/jsonproc/inja.hpp:831:  std::string expression_open {"{{"};
tools/jsonproc/inja.hpp:832:  std::string expression_open_force_lstrip {"{{-"};
tools/jsonproc/inja.hpp:833:  std::string expression_close {"}}"};
tools/jsonproc/inja.hpp:834:  std::string expression_close_force_rstrip {"-}}"};
tools/jsonproc/inja.hpp:858:    if (open_chars.find(expression_open[0]) == std::string::npos) {
tools/jsonproc/inja.hpp:859:      open_chars += expression_open[0];
tools/jsonproc/inja.hpp:861:    if (open_chars.find(expression_open_force_lstrip[0]) == std::string::npos) {
tools/jsonproc/inja.hpp:862:      open_chars += expression_open_force_lstrip[0];
tools/jsonproc/inja.hpp:935:    ExpressionOpen,     // {{
tools/jsonproc/inja.hpp:936:    ExpressionClose,    // }}
tools/jsonproc/inja.hpp:1006:    ExpressionStart,
tools/jsonproc/inja.hpp:1007:    ExpressionStartForceLstrip,
tools/jsonproc/inja.hpp:1008:    ExpressionBody,
tools/jsonproc/inja.hpp:1303:      if (inja::string_view::starts_with(open_str, config.expression_open)) {
tools/jsonproc/inja.hpp:1304:        if (inja::string_view::starts_with(open_str, config.expression_open_force_lstrip)) {
tools/jsonproc/inja.hpp:1305:          state = State::ExpressionStartForceLstrip;
tools/jsonproc/inja.hpp:1308:          state = State::ExpressionStart;
tools/jsonproc/inja.hpp:1345:    case State::ExpressionStart: {
tools/jsonproc/inja.hpp:1346:      state = State::ExpressionBody;
tools/jsonproc/inja.hpp:1347:      pos += config.expression_open.size();
tools/jsonproc/inja.hpp:1348:      return make_token(Token::Kind::ExpressionOpen);
tools/jsonproc/inja.hpp:1350:    case State::ExpressionStartForceLstrip: {
tools/jsonproc/inja.hpp:1351:      state = State::ExpressionBody;
tools/jsonproc/inja.hpp:1352:      pos += config.expression_open_force_lstrip.size();
tools/jsonproc/inja.hpp:1353:      return make_token(Token::Kind::ExpressionOpen);
tools/jsonproc/inja.hpp:1385:    case State::ExpressionBody:
tools/jsonproc/inja.hpp:1386:      return scan_body(config.expression_close, Token::Kind::ExpressionClose, config.expression_close_force_rstrip);
tools/jsonproc/inja.hpp:1455:  ExpressionListNode* current_expression_list {nullptr};
tools/jsonproc/inja.hpp:1457:  std::vector<std::shared_ptr<ExpressionNode>> arguments;
tools/jsonproc/inja.hpp:1552:  bool parse_expression(Template& tmpl, Token::Kind closing) {
tools/jsonproc/inja.hpp:1777:      current_expression_list->root = arguments[0];
tools/jsonproc/inja.hpp:1780:      throw_parser_error("malformed expression");
tools/jsonproc/inja.hpp:1798:      current_expression_list = &if_statement_node->condition;
tools/jsonproc/inja.hpp:1800:      if (!parse_expression(tmpl, closing)) {
tools/jsonproc/inja.hpp:1821:        current_expression_list = &if_statement_node->condition;
tools/jsonproc/inja.hpp:1823:        if (!parse_expression(tmpl, closing)) {
tools/jsonproc/inja.hpp:1906:      current_expression_list = &for_statement_node->condition;
tools/jsonproc/inja.hpp:1913:      if (!parse_expression(tmpl, closing)) {
tools/jsonproc/inja.hpp:1956:      current_expression_list = &set_statement_node->expression;
tools/jsonproc/inja.hpp:1963:      if (!parse_expression(tmpl, closing)) {
tools/jsonproc/inja.hpp:2009:      case Token::Kind::ExpressionOpen: {
tools/jsonproc/inja.hpp:2012:        auto expression_list_node = std::make_shared<ExpressionListNode>(tok.text.data() - tmpl.content.c_str());
tools/jsonproc/inja.hpp:2013:        current_block->nodes.emplace_back(expression_list_node);
tools/jsonproc/inja.hpp:2014:        current_expression_list = expression_list_node.get();
tools/jsonproc/inja.hpp:2016:        if (!parse_expression(tmpl, Token::Kind::ExpressionClose)) {
tools/jsonproc/inja.hpp:2017:          throw_parser_error("expected expression, got '" + tok.describe() + "'");
tools/jsonproc/inja.hpp:2020:        if (tok.kind != Token::Kind::ExpressionClose) {
tools/jsonproc/inja.hpp:2021:          throw_parser_error("expected expression close, got '" + tok.describe() + "'");
tools/jsonproc/inja.hpp:2147:  const std::shared_ptr<json> eval_expression_list(const ExpressionListNode& expression_list) {
tools/jsonproc/inja.hpp:2148:    if (!expression_list.root) {
tools/jsonproc/inja.hpp:2149:      throw_renderer_error("empty expression", expression_list);
tools/jsonproc/inja.hpp:2152:    expression_list.root->accept(*this);
tools/jsonproc/inja.hpp:2155:      throw_renderer_error("empty expression", expression_list);
tools/jsonproc/inja.hpp:2157:      throw_renderer_error("malformed expression", expression_list);
tools/jsonproc/inja.hpp:2165:        throw_renderer_error("expression could not be evaluated", expression_list);
tools/jsonproc/inja.hpp:2258:  void visit(const ExpressionNode&) {}
tools/jsonproc/inja.hpp:2554:  void visit(const ExpressionListNode& node) {
tools/jsonproc/inja.hpp:2555:    print_data(eval_expression_list(node));
tools/jsonproc/inja.hpp:2563:    const auto result = eval_expression_list(node.condition);
tools/jsonproc/inja.hpp:2602:    const auto result = eval_expression_list(node.condition);
tools/jsonproc/inja.hpp:2641:    const auto result = eval_expression_list(node.condition);
tools/jsonproc/inja.hpp:2688:    additional_data[json::json_pointer(ptr)] = *eval_expression_list(node.expression);
tools/jsonproc/inja.hpp:2759:  /// Sets the opener and closer for template expressions
tools/jsonproc/inja.hpp:2760:  void set_expression(const std::string& open, const std::string& close) {
tools/jsonproc/inja.hpp:2761:    lexer_config.expression_open = open;
tools/jsonproc/inja.hpp:2762:    lexer_config.expression_open_force_lstrip = open + "-";
tools/jsonproc/inja.hpp:2763:    lexer_config.expression_close = close;
tools/jsonproc/inja.hpp:2764:    lexer_config.expression_close_force_rstrip = "-" + close;
Binary file tools/jsonproc/jsonproc matches
tools/gbagfx/convert_png.c:214:        PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);
tools/gbagfx/lz.h:6:unsigned char *LZDecompress(unsigned char *src, int srcSize, int *uncompressedSize);
tools/gbagfx/lz.h:7:unsigned char *LZCompress(unsigned char *src, int srcSize, int *compressedSize, const int minDistance);
tools/gbagfx/rl.c:8:unsigned char *RLDecompress(unsigned char *src, int srcSize, int *uncompressedSize)
tools/gbagfx/rl.c:29:        bool compressed = ((flags & 0x80) != 0);
tools/gbagfx/rl.c:31:        if (compressed)
tools/gbagfx/rl.c:55:            *uncompressedSize = destSize;
tools/gbagfx/rl.c:61:    FATAL_ERROR("Fatal error while decompressing RL file.\n");
tools/gbagfx/rl.c:64:unsigned char *RLCompress(unsigned char *src, int srcSize, int *compressedSize)
tools/gbagfx/rl.c:80:    dest[0] = 0x30; // RL compression type
tools/gbagfx/rl.c:90:        bool compress = false;
tools/gbagfx/rl.c:91:        int uncompressedStart = srcPos;
tools/gbagfx/rl.c:92:        int uncompressedLength = 0;
tools/gbagfx/rl.c:94:        while (srcPos < srcSize && uncompressedLength < (0x7F + 1))
tools/gbagfx/rl.c:96:            compress = (srcPos + 2 < srcSize && src[srcPos] == src[srcPos + 1] && src[srcPos] == src[srcPos + 2]);
tools/gbagfx/rl.c:98:            if (compress)
tools/gbagfx/rl.c:102:            uncompressedLength++;
tools/gbagfx/rl.c:105:        if (uncompressedLength > 0)
tools/gbagfx/rl.c:107:            dest[destPos++] = uncompressedLength - 1;
tools/gbagfx/rl.c:109:            for (int i = 0; i < uncompressedLength; i++)
tools/gbagfx/rl.c:110:                dest[destPos++] = src[uncompressedStart + i];
tools/gbagfx/rl.c:113:        if (compress)
tools/gbagfx/rl.c:116:            int compressedLength = 0;
tools/gbagfx/rl.c:118:            while (compressedLength < (0x7F + 3)
tools/gbagfx/rl.c:119:                && srcPos + compressedLength < srcSize
tools/gbagfx/rl.c:120:                && src[srcPos + compressedLength] == data)
tools/gbagfx/rl.c:122:                compressedLength++;
tools/gbagfx/rl.c:125:            dest[destPos++] = 0x80 | (compressedLength - 3);
tools/gbagfx/rl.c:128:            srcPos += compressedLength;
tools/gbagfx/rl.c:142:            *compressedSize = destPos;
tools/gbagfx/rl.c:148:    FATAL_ERROR("Fatal error while compressing RL file.\n");
tools/gbagfx/huff.c:107:        FATAL_ERROR("Fatal error while compressing Huff file.\n");
tools/gbagfx/huff.c:137:                    FATAL_ERROR("Fatal error while compressing Huff file: unable to encode binary tree.\n");
tools/gbagfx/huff.c:157:    // This is used by the decompressor to skip the tree.
tools/gbagfx/huff.c:217:MAIN COMPRESSION/DECOMPRESSION ROUTINES
tools/gbagfx/huff.c:221:unsigned char * HuffCompress(unsigned char * src, int srcSize, int * compressedSize_p, int bitDepth) {
tools/gbagfx/huff.c:338:    *compressedSize_p = (destPos + 3) & ~3;
tools/gbagfx/huff.c:342:    FATAL_ERROR("Fatal error while compressing Huff file.\n");
tools/gbagfx/huff.c:345:unsigned char * HuffDecompress(unsigned char * src, int srcSize, int * uncompressedSize_p) {
tools/gbagfx/huff.c:386:                        *uncompressedSize_p = destSize;
tools/gbagfx/huff.c:397:    FATAL_ERROR("Fatal error while decompressing Huff file.\n");
tools/gbagfx/rl.h:6:unsigned char *RLDecompress(unsigned char *src, int srcSize, int *uncompressedSize);
tools/gbagfx/rl.h:7:unsigned char *RLCompress(unsigned char *src, int srcSize, int *compressedSize);
tools/gbagfx/main.c:381:void HandleLZCompressCommand(char *inputPath, char *outputPath, int argc, char **argv)
tools/gbagfx/main.c:424:    // before compressing it and then amending the LZ header's size field to
tools/gbagfx/main.c:425:    // reflect the expected size. This will cause an overflow when decompressing
tools/gbagfx/main.c:431:    int compressedSize;
tools/gbagfx/main.c:432:    unsigned char *compressedData = LZCompress(buffer, fileSize + overflowSize, &compressedSize, minDistance);
tools/gbagfx/main.c:434:    compressedData[1] = (unsigned char)fileSize;
tools/gbagfx/main.c:435:    compressedData[2] = (unsigned char)(fileSize >> 8);
tools/gbagfx/main.c:436:    compressedData[3] = (unsigned char)(fileSize >> 16);
tools/gbagfx/main.c:440:    WriteWholeFile(outputPath, compressedData, compressedSize);
tools/gbagfx/main.c:442:    free(compressedData);
tools/gbagfx/main.c:445:void HandleLZDecompressCommand(char *inputPath, char *outputPath, int argc UNUSED, char **argv UNUSED)
tools/gbagfx/main.c:450:    int uncompressedSize;
tools/gbagfx/main.c:451:    unsigned char *uncompressedData = LZDecompress(buffer, fileSize, &uncompressedSize);
tools/gbagfx/main.c:455:    WriteWholeFile(outputPath, uncompressedData, uncompressedSize);
tools/gbagfx/main.c:457:    free(uncompressedData);
tools/gbagfx/main.c:460:void HandleRLCompressCommand(char *inputPath, char *outputPath, int argc UNUSED, char **argv UNUSED)
tools/gbagfx/main.c:465:    int compressedSize;
tools/gbagfx/main.c:466:    unsigned char *compressedData = RLCompress(buffer, fileSize, &compressedSize);
tools/gbagfx/main.c:470:    WriteWholeFile(outputPath, compressedData, compressedSize);
tools/gbagfx/main.c:472:    free(compressedData);
tools/gbagfx/main.c:475:void HandleRLDecompressCommand(char *inputPath, char *outputPath, int argc UNUSED, char **argv UNUSED)
tools/gbagfx/main.c:480:    int uncompressedSize;
tools/gbagfx/main.c:481:    unsigned char *uncompressedData = RLDecompress(buffer, fileSize, &uncompressedSize);
tools/gbagfx/main.c:485:    WriteWholeFile(outputPath, uncompressedData, uncompressedSize);
tools/gbagfx/main.c:487:    free(uncompressedData);
tools/gbagfx/main.c:490:void HandleHuffCompressCommand(char *inputPath, char *outputPath, int argc, char **argv)
tools/gbagfx/main.c:520:    int compressedSize;
tools/gbagfx/main.c:521:    unsigned char *compressedData = HuffCompress(buffer, fileSize, &compressedSize, bitDepth);
tools/gbagfx/main.c:525:    WriteWholeFile(outputPath, compressedData, compressedSize);
tools/gbagfx/main.c:527:    free(compressedData);
tools/gbagfx/main.c:530:void HandleHuffDecompressCommand(char *inputPath, char *outputPath, int argc UNUSED, char **argv UNUSED)
tools/gbagfx/main.c:535:    int uncompressedSize;
tools/gbagfx/main.c:536:    unsigned char *uncompressedData = HuffDecompress(buffer, fileSize, &uncompressedSize);
tools/gbagfx/main.c:540:    WriteWholeFile(outputPath, uncompressedData, uncompressedSize);
tools/gbagfx/main.c:542:    free(uncompressedData);
tools/gbagfx/main.c:570:        { NULL, "huff", HandleHuffCompressCommand },
tools/gbagfx/main.c:571:        { NULL, "lz", HandleLZCompressCommand },
tools/gbagfx/main.c:572:        { "huff", NULL, HandleHuffDecompressCommand },
tools/gbagfx/main.c:573:        { "lz", NULL, HandleLZDecompressCommand },
tools/gbagfx/main.c:574:        { NULL, "rl", HandleRLCompressCommand },
tools/gbagfx/main.c:575:        { "rl", NULL, HandleRLDecompressCommand },
tools/gbagfx/LICENSE:13:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/gbagfx/lz.c:8:unsigned char *LZDecompress(unsigned char *src, int srcSize, int *uncompressedSize)
tools/gbagfx/lz.c:60:				*uncompressedSize = destSize;
tools/gbagfx/lz.c:69:	FATAL_ERROR("Fatal error while decompressing LZ file.\n");
tools/gbagfx/lz.c:72:unsigned char *LZCompress(unsigned char *src, int srcSize, int *compressedSize, const int minDistance)
tools/gbagfx/lz.c:88:	dest[0] = 0x10; // LZ compression type
tools/gbagfx/lz.c:145:				*compressedSize = destPos;
tools/gbagfx/lz.c:152:	FATAL_ERROR("Fatal error while compressing LZ file.\n");
Binary file tools/gbagfx/gbagfx matches
tools/gbagfx/huff.h:35:unsigned char * HuffCompress(unsigned char * buffer, int srcSize, int * compressedSize_p, int bitDepth);
tools/gbagfx/huff.h:36:unsigned char * HuffDecompress(unsigned char * buffer, int srcSize, int * uncompressedSize_p);
tools/mid2agb/main.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/mid2agb/main.h:37:extern bool g_compressionEnabled;
tools/mid2agb/agb.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/mid2agb/error.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/mid2agb/error.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/mid2agb/midi.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/mid2agb/midi.cpp:776:int CalculateCompressionScore(std::vector<Event>& events, int index)
tools/mid2agb/midi.cpp:853:bool IsCompressionMatch(std::vector<Event>& events, int index1, int index2)
tools/mid2agb/midi.cpp:876:void CompressWholeNote(std::vector<Event>& events, int index)
tools/mid2agb/midi.cpp:888:        if (IsCompressionMatch(events, index, j))
tools/mid2agb/midi.cpp:897:void Compress(std::vector<Event>& events)
tools/mid2agb/midi.cpp:909:        if (CalculateCompressionScore(events, i) >= 6)
tools/mid2agb/midi.cpp:911:            CompressWholeNote(events, i);
tools/mid2agb/midi.cpp:955:                if (g_compressionEnabled)
tools/mid2agb/midi.cpp:956:                    Compress(*events);
tools/mid2agb/LICENSE:13:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
Binary file tools/mid2agb/mid2agb matches
tools/mid2agb/midi.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/mid2agb/agb.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/mid2agb/agb.cpp:61:    std::fprintf(g_outputFile, "\t.equ\t%s_cmp, %u\n", g_asmLabel.c_str(), g_compressionEnabled);
tools/mid2agb/agb.cpp:99:        if (!g_compressionEnabled || s_lastOpName != name)
tools/mid2agb/agb.cpp:177:    if (g_compressionEnabled)
tools/mid2agb/agb.cpp:230:    if (!noteChanged && g_compressionEnabled)
tools/mid2agb/tables.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/mid2agb/tables.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/mid2agb/main.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/mid2agb/main.cpp:43:bool g_compressionEnabled = true;
tools/mid2agb/main.cpp:60:        "            -N  no compression\n"
tools/mid2agb/main.cpp:161:                g_compressionEnabled = false;
tools/ramscrgen/sym_file.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/ramscrgen/char_util.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/ramscrgen/ramscrgen.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/ramscrgen/LICENSE:13:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/ramscrgen/elf.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/ramscrgen/sym_file.h:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
tools/ramscrgen/main.cpp:13:// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
src/battle_anim_ice.c:1090:    AnimLoadCompressedBgTilemapHandleContest(&animBg, gBattleAnimFogTilemap, FALSE);
src/battle_anim_ice.c:1195:    AnimLoadCompressedBgTilemapHandleContest(&animBg, gBattleAnimFogTilemap, FALSE);
src/save.c:7:#include "decompress.h"
src/save.c:733:        tempAddr = gDecompressionBuffer;
src/save.c:893:        status = TryLoadSaveSector(SECTOR_ID_HOF_1, gDecompressionBuffer, SECTOR_DATA_SIZE);
src/save.c:895:            status = TryLoadSaveSector(SECTOR_ID_HOF_2, &gDecompressionBuffer[SECTOR_DATA_SIZE], SECTOR_DATA_SIZE);
src/party_menu.c:14:#include "decompress.h"
src/party_menu.c:201:    // bin2c, the utility used to encode the compressed palette data.
src/party_menu.c:370:static void Task_CancelAfterAorBPress(u8);
src/party_menu.c:736:        sPartyBgGfxTilemap = malloc_and_decompress(gPartyMenuBg_Gfx, &sizeout);
src/party_menu.c:743:            LZDecompressWram(gPartyMenuBg_Tilemap, sPartyBgTilemapBuffer);
src/party_menu.c:748:        LoadCompressedPalette(gPartyMenuBg_Pal, BG_PLTT_ID(0), 11 * PLTT_SIZE_4BPP);
src/party_menu.c:1269:        case B_BUTTON: // Selected Cancel / pressed B
src/party_menu.c:1445:    case MENU_B_PRESSED:
src/party_menu.c:1473:        switch (GetLRKeysPressedAndHeld())
src/party_menu.c:1475:        case MENU_L_PRESSED:
src/party_menu.c:1478:        case MENU_R_PRESSED:
src/party_menu.c:1497:    // Pressed Cancel
src/party_menu.c:2025:    case MENU_B_PRESSED:
src/party_menu.c:2748:        case MENU_B_PRESSED:
src/party_menu.c:3183:    case MENU_B_PRESSED:
src/party_menu.c:3336:    case MENU_B_PRESSED:
src/party_menu.c:3424:    case MENU_B_PRESSED:
src/party_menu.c:3464:    case MENU_B_PRESSED:
src/party_menu.c:3610:    StringAppend(gStringVar4, gText_PauseUntilPress);
src/party_menu.c:3628:        StringAppend(gStringVar4, gText_PauseUntilPress);
src/party_menu.c:3665:    StringAppend(gStringVar4, gText_PauseUntilPress);
src/party_menu.c:3687:    case MENU_B_PRESSED:
src/party_menu.c:3714:        gTasks[taskId].func = Task_CancelAfterAorBPress;
src/party_menu.c:3771:            gTasks[taskId].func = Task_CancelAfterAorBPress;
src/party_menu.c:3799:    case MENU_B_PRESSED:
src/party_menu.c:3832:static void Task_CancelAfterAorBPress(u8 taskId)
src/party_menu.c:4168:    LoadCompressedSpriteSheet(&sSpriteSheet_MenuPokeball);
src/party_menu.c:4169:    LoadCompressedSpriteSheet(&sSpriteSheet_MenuPokeballSmall);
src/party_menu.c:4170:    LoadCompressedSpritePalette(&sSpritePalette_MenuPokeball);
src/party_menu.c:4214:    LoadCompressedSpriteSheet(&sSpriteSheet_StatusIcons);
src/party_menu.c:4215:    LoadCompressedSpritePalette(&sSpritePalette_StatusIcons);
src/party_menu.c:4466:    static const u8 doneText[] = _("{STR_VAR_1}'s ability became\n{STR_VAR_2}!{PAUSE_UNTIL_PRESS}");
src/party_menu.c:4508:        case MENU_B_PRESSED:
src/party_menu.c:4554:    static const u8 doneText[] = _("{STR_VAR_1}'s ability became\n{STR_VAR_2}!{PAUSE_UNTIL_PRESS}");
src/party_menu.c:4596:        case MENU_B_PRESSED:
src/party_menu.c:4780:        if (input == MENU_B_PRESSED)
src/party_menu.c:5025:    case MENU_B_PRESSED:
src/party_menu.c:5132:    case MENU_B_PRESSED:
src/party_menu.c:5927:    case MENU_B_PRESSED:
src/palette.c:4:#include "decompress.h"
src/palette.c:67:EWRAM_DATA u8 gPaletteDecompressionBuffer[PLTT_DECOMP_BUFFER_SIZE] = {0};
src/palette.c:84:void LoadCompressedPalette(const u32 *src, u16 offset, u16 size)
src/palette.c:86:    LZDecompressWram(src, gPaletteDecompressionBuffer);
src/palette.c:87:    CpuCopy16(gPaletteDecompressionBuffer, &gPlttBufferUnfaded[offset], size);
src/palette.c:88:    CpuCopy16(gPaletteDecompressionBuffer, &gPlttBufferFaded[offset], size);
src/item_icon.c:2:#include "decompress.h"
src/item_icon.c:10:EWRAM_DATA u8 *gItemIconDecompressionBuffer = NULL;
src/item_icon.c:58:    gItemIconDecompressionBuffer = Alloc(0x120);
src/item_icon.c:59:    if (gItemIconDecompressionBuffer == NULL)
src/item_icon.c:65:        Free(gItemIconDecompressionBuffer);
src/item_icon.c:74:    Free(gItemIconDecompressionBuffer);
src/item_icon.c:96:        struct CompressedSpritePalette spritePalette;
src/item_icon.c:99:        LZDecompressWram(GetItemIconPicOrPalette(itemId, 0), gItemIconDecompressionBuffer);
src/item_icon.c:100:        CopyItemIconPicTo4x4Buffer(gItemIconDecompressionBuffer, gItemIcon4x4Buffer);
src/item_icon.c:108:        LoadCompressedSpritePalette(&spritePalette);
src/item_icon.c:133:        struct CompressedSpritePalette spritePalette;
src/item_icon.c:136:        LZDecompressWram(GetItemIconPicOrPalette(itemId, 0), gItemIconDecompressionBuffer);
src/item_icon.c:137:        CopyItemIconPicTo4x4Buffer(gItemIconDecompressionBuffer, gItemIcon4x4Buffer);
src/item_icon.c:145:        LoadCompressedSpritePalette(&spritePalette);
src/mini_printf.c:19: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
src/pokeball.c:4:#include "decompress.h"
src/pokeball.c:75:const struct CompressedSpriteSheet gBallSpriteSheets[POKEBALL_COUNT] =
src/pokeball.c:106:const struct CompressedSpritePalette gBallSpritePalettes[POKEBALL_COUNT] =
src/pokeball.c:1225:    LoadCompressedSpriteSheetUsingHeap(&gBallSpriteSheets[BALL_POKE]);
src/pokeball.c:1226:    LoadCompressedSpritePaletteUsingHeap(&gBallSpritePalettes[BALL_POKE]);
src/pokeball.c:1337:    LoadCompressedSpriteSheetUsingHeap(&gBallSpriteSheets[BALL_POKE]);
src/pokeball.c:1338:    LoadCompressedSpritePaletteUsingHeap(&gBallSpritePalettes[BALL_POKE]);
src/pokeball.c:1505:        LoadCompressedSpriteSheetUsingHeap(&gBallSpriteSheets[ballId]);
src/pokeball.c:1506:        LoadCompressedSpritePaletteUsingHeap(&gBallSpritePalettes[ballId]);
src/pokeball.c:1516:        LZDecompressVram(gOpenPokeballGfx, (void *)(OBJ_VRAM0 + 0x100 + var * 32));
src/trader.c:124:        case MENU_B_PRESSED:
src/contest_util.c:11:#include "decompress.h"
src/contest_util.c:268:static const struct CompressedSpriteSheet sSpriteSheet_Confetti =
src/contest_util.c:276:static const struct CompressedSpritePalette sSpritePalette_Confetti =
src/contest_util.c:454:    LZDecompressVram(gContestResults_Gfx, (void *)BG_CHAR_ADDR(0));
src/contest_util.c:459:    LoadCompressedPalette(gContestResults_Pal, BG_PLTT_ID(0), 16 * PLTT_SIZE_4BPP);
src/contest_util.c:884:    const struct CompressedSpritePalette *pokePal;
src/contest_util.c:902:        LoadCompressedSpritePalette(pokePal);
src/contest_util.c:910:        LoadCompressedSpriteSheet(&sSpriteSheet_Confetti);
src/contest_util.c:911:        LoadCompressedSpritePalette(&sSpritePalette_Confetti);
src/contest_util.c:2557:    const struct CompressedSpritePalette *palette;
src/contest_util.c:2578:        LoadCompressedSpritePalette(palette);
src/battle_arena.c:8:#include "decompress.h"
src/battle_arena.c:113:static const struct CompressedSpriteSheet sBattleArenaJudgmentSymbolsSpriteSheet[] =
src/battle_arena.c:167:        LoadCompressedSpriteSheet(sBattleArenaJudgmentSymbolsSpriteSheet);
src/battle_arena.c:168:        LoadCompressedPalette(gBattleArenaJudgmentSymbolsPalette, OBJ_PLTT_ID(15), PLTT_SIZE_4BPP);
src/battle_anim_status_effects.c:4:#include "decompress.h"
src/battle_anim_status_effects.c:14:extern const struct CompressedSpriteSheet gBattleAnimPicTable[];
src/battle_anim_status_effects.c:15:extern const struct CompressedSpritePalette gBattleAnimPaletteTable[];
src/battle_anim_status_effects.c:280:    LoadCompressedSpriteSheetUsingHeap(&gBattleAnimPicTable[GET_TRUE_SPRITE_INDEX(ANIM_TAG_CIRCLE_IMPACT)]);
src/battle_anim_status_effects.c:281:    LoadCompressedSpritePaletteUsingHeap(&gBattleAnimPaletteTable[GET_TRUE_SPRITE_INDEX(ANIM_TAG_CIRCLE_IMPACT)]);
src/battle_bg.c:10:#include "decompress.h"
src/battle_bg.c:110:static const struct CompressedSpriteSheet sVsLettersSpriteSheet =
src/battle_bg.c:740:    LoadCompressedPalette(gBattleWindowTextPalette, BG_PLTT_ID(5), PLTT_SIZE_4BPP);
src/battle_bg.c:756:        LZDecompressVram(gBattleTerrainTiles_Building, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:757:        LZDecompressVram(gBattleTerrainTilemap_Building, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:758:        LoadCompressedPalette(gBattleTerrainPalette_Frontier, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:762:        LZDecompressVram(gBattleTerrainTiles_Cave, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:763:        LZDecompressVram(gBattleTerrainTilemap_Cave, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:764:        LoadCompressedPalette(gBattleTerrainPalette_Groudon, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:768:        LZDecompressVram(gBattleTerrainTiles_Water, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:769:        LZDecompressVram(gBattleTerrainTilemap_Water, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:770:        LoadCompressedPalette(gBattleTerrainPalette_Kyogre, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:774:        LZDecompressVram(gBattleTerrainTiles_Rayquaza, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:775:        LZDecompressVram(gBattleTerrainTilemap_Rayquaza, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:776:        LoadCompressedPalette(gBattleTerrainPalette_Rayquaza, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:785:                LZDecompressVram(gBattleTerrainTiles_Building, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:786:                LZDecompressVram(gBattleTerrainTilemap_Building, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:787:                LoadCompressedPalette(gBattleTerrainPalette_BuildingLeader, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:792:                LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:793:                LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:794:                LoadCompressedPalette(gBattleTerrainPalette_StadiumWallace, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:803:            LZDecompressVram(sBattleTerrainTable[gBattleTerrain].tileset, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:804:            LZDecompressVram(sBattleTerrainTable[gBattleTerrain].tilemap, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:805:            LoadCompressedPalette(sBattleTerrainTable[gBattleTerrain].palette, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:808:            LZDecompressVram(gBattleTerrainTiles_Building, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:809:            LZDecompressVram(gBattleTerrainTilemap_Building, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:810:            LoadCompressedPalette(gBattleTerrainPalette_BuildingGym, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:813:            LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:814:            LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:815:            LoadCompressedPalette(gBattleTerrainPalette_StadiumMagma, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:818:            LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:819:            LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:820:            LoadCompressedPalette(gBattleTerrainPalette_StadiumAqua, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:823:            LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:824:            LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:825:            LoadCompressedPalette(gBattleTerrainPalette_StadiumSidney, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:828:            LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:829:            LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:830:            LoadCompressedPalette(gBattleTerrainPalette_StadiumPhoebe, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:833:            LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:834:            LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:835:            LoadCompressedPalette(gBattleTerrainPalette_StadiumGlacia, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:838:            LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:839:            LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:840:            LoadCompressedPalette(gBattleTerrainPalette_StadiumDrake, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:843:            LZDecompressVram(gBattleTerrainTiles_Building, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:844:            LZDecompressVram(gBattleTerrainTilemap_Building, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:845:            LoadCompressedPalette(gBattleTerrainPalette_Frontier, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:853:    LZDecompressVram(gBattleTextboxTiles, (void *)(BG_CHAR_ADDR(0)));
src/battle_bg.c:856:    LoadCompressedPalette(gBattleTextboxPalette, BG_PLTT_ID(0), 2 * PLTT_SIZE_4BPP);
src/battle_bg.c:1124:        LZDecompressVram(gBattleVSFrame_Gfx, (void *)(BG_CHAR_ADDR(1)));
src/battle_bg.c:1125:        LZDecompressVram(gVsLettersGfx, (void *)OBJ_VRAM0);
src/battle_bg.c:1126:        LoadCompressedPalette(gBattleVSFrame_Pal, BG_PLTT_ID(6), PLTT_SIZE_4BPP);
src/battle_bg.c:1137:        LoadCompressedSpriteSheetUsingHeap(&sVsLettersSpriteSheet);
src/battle_bg.c:1143:            LZDecompressVram(gBattleTerrainAnimTiles_Building, (void *)(BG_CHAR_ADDR(1)));
src/battle_bg.c:1144:            LZDecompressVram(gBattleTerrainAnimTilemap_Building, (void *)(BG_SCREEN_ADDR(28)));
src/battle_bg.c:1160:        LZDecompressVram(gBattleTerrainAnimTiles_Cave, (void *)(BG_CHAR_ADDR(1)));
src/battle_bg.c:1161:        LZDecompressVram(gBattleTerrainAnimTilemap_Cave, (void *)(BG_SCREEN_ADDR(28)));
src/battle_bg.c:1165:        LZDecompressVram(gBattleTerrainAnimTiles_Underwater, (void *)(BG_CHAR_ADDR(1)));
src/battle_bg.c:1166:        LZDecompressVram(gBattleTerrainAnimTilemap_Underwater, (void *)(BG_SCREEN_ADDR(28)));
src/battle_bg.c:1170:        LZDecompressVram(gBattleTerrainAnimTiles_Rayquaza, (void *)(BG_CHAR_ADDR(1)));
src/battle_bg.c:1171:        LZDecompressVram(gBattleTerrainAnimTilemap_Rayquaza, (void *)(BG_SCREEN_ADDR(28)));
src/battle_bg.c:1180:                LZDecompressVram(gBattleTerrainAnimTiles_Building, (void *)(BG_CHAR_ADDR(1)));
src/battle_bg.c:1181:                LZDecompressVram(gBattleTerrainAnimTilemap_Building, (void *)(BG_SCREEN_ADDR(28)));
src/battle_bg.c:1186:                LZDecompressVram(gBattleTerrainAnimTiles_Building, (void *)(BG_CHAR_ADDR(1)));
src/battle_bg.c:1187:                LZDecompressVram(gBattleTerrainAnimTilemap_Building, (void *)(BG_SCREEN_ADDR(28)));
src/battle_bg.c:1194:            LZDecompressVram(sBattleTerrainTable[gBattleTerrain].entryTileset, (void *)(BG_CHAR_ADDR(1)));
src/battle_bg.c:1195:            LZDecompressVram(sBattleTerrainTable[gBattleTerrain].entryTilemap, (void *)(BG_SCREEN_ADDR(28)));
src/battle_bg.c:1199:            LZDecompressVram(gBattleTerrainAnimTiles_Building, (void *)(BG_CHAR_ADDR(1)));
src/battle_bg.c:1200:            LZDecompressVram(gBattleTerrainAnimTilemap_Building, (void *)(BG_SCREEN_ADDR(28)));
src/battle_bg.c:1212:        LZDecompressVram(gBattleTextboxTiles, (void *)(BG_CHAR_ADDR(0)));
src/battle_bg.c:1219:        LoadCompressedPalette(gBattleTextboxPalette, BG_PLTT_ID(0), 2 * PLTT_SIZE_4BPP);
src/battle_bg.c:1224:            LZDecompressVram(gBattleTerrainTiles_Building, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1228:            LZDecompressVram(gBattleTerrainTiles_Cave, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1237:                    LZDecompressVram(gBattleTerrainTiles_Building, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1242:                    LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1251:                LZDecompressVram(sBattleTerrainTable[gBattleTerrain].tileset, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1254:                LZDecompressVram(gBattleTerrainTiles_Building, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1257:                LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1260:                LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1263:                LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1266:                LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1269:                LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1272:                LZDecompressVram(gBattleTerrainTiles_Stadium, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1275:                LZDecompressVram(gBattleTerrainTiles_Building, (void *)(BG_CHAR_ADDR(2)));
src/battle_bg.c:1283:            LZDecompressVram(gBattleTerrainTilemap_Building, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1288:                LZDecompressVram(gBattleTerrainTilemap_Cave, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1290:                LZDecompressVram(gBattleTerrainTilemap_Water, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1299:                    LZDecompressVram(gBattleTerrainTilemap_Building, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1304:                    LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1313:                LZDecompressVram(sBattleTerrainTable[gBattleTerrain].tilemap, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1316:                LZDecompressVram(gBattleTerrainTilemap_Building, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1319:                LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1322:                LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1325:                LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1328:                LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1331:                LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1334:                LZDecompressVram(gBattleTerrainTilemap_Stadium, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1337:                LZDecompressVram(gBattleTerrainTilemap_Building, (void *)(BG_SCREEN_ADDR(26)));
src/battle_bg.c:1345:            LoadCompressedPalette(gBattleTerrainPalette_Frontier, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1350:                LoadCompressedPalette(gBattleTerrainPalette_Groudon, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1352:                LoadCompressedPalette(gBattleTerrainPalette_Kyogre, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1361:                    LoadCompressedPalette(gBattleTerrainPalette_BuildingLeader, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1366:                    LoadCompressedPalette(gBattleTerrainPalette_StadiumWallace, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1375:                LoadCompressedPalette(sBattleTerrainTable[gBattleTerrain].palette, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1378:                LoadCompressedPalette(gBattleTerrainPalette_BuildingGym, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1381:                LoadCompressedPalette(gBattleTerrainPalette_StadiumMagma, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1384:                LoadCompressedPalette(gBattleTerrainPalette_StadiumAqua, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1387:                LoadCompressedPalette(gBattleTerrainPalette_StadiumSidney, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1390:                LoadCompressedPalette(gBattleTerrainPalette_StadiumPhoebe, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1393:                LoadCompressedPalette(gBattleTerrainPalette_StadiumGlacia, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1396:                LoadCompressedPalette(gBattleTerrainPalette_StadiumDrake, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/battle_bg.c:1399:                LoadCompressedPalette(gBattleTerrainPalette_Frontier, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/trainer_pokemon_sprites.c:6:#include "decompress.h"
src/trainer_pokemon_sprites.c:56:static bool16 DecompressPic(u16 species, u32 personality, bool8 isFrontPic, u8 *dest, bool8 isTrainer)
src/trainer_pokemon_sprites.c:72:            DecompressPicFromTable(&gTrainerFrontPicTable[species], dest, species);
src/trainer_pokemon_sprites.c:74:            DecompressPicFromTable(&gTrainerBackPicTable[species], dest, species);
src/trainer_pokemon_sprites.c:86:            LoadCompressedPalette(GetMonSpritePalFromSpeciesAndPersonality(species, otId, personality), OBJ_PLTT_ID(paletteSlot), PLTT_SIZE_4BPP);
src/trainer_pokemon_sprites.c:91:            LoadCompressedSpritePalette(GetMonSpritePalStructFromOtIdPersonality(species, otId, personality));
src/trainer_pokemon_sprites.c:99:            LoadCompressedPalette(gTrainerFrontPicPaletteTable[species].data, OBJ_PLTT_ID(paletteSlot), PLTT_SIZE_4BPP);
src/trainer_pokemon_sprites.c:104:            LoadCompressedSpritePalette(&gTrainerFrontPicPaletteTable[species]);
src/trainer_pokemon_sprites.c:112:        LoadCompressedPalette(GetMonSpritePalFromSpeciesAndPersonality(species, otId, personality), PLTT_ID(paletteSlot), PLTT_SIZE_4BPP);
src/trainer_pokemon_sprites.c:114:        LoadCompressedPalette(gTrainerFrontPicPaletteTable[species].data, PLTT_ID(paletteSlot), PLTT_SIZE_4BPP);
src/trainer_pokemon_sprites.c:151:    if (DecompressPic(species, personality, isFrontPic, framePics, isTrainer))
src/trainer_pokemon_sprites.c:215:    if (DecompressPic(species, personality, flags, framePics, FALSE))
src/trainer_pokemon_sprites.c:283:    if (DecompressPic(species, personality, isFrontPic, (u8 *)GetWindowAttribute(windowId, WINDOW_TILE_DATA), FALSE))
src/trainer_pokemon_sprites.c:295:    if (framePics && !DecompressPic(species, personality, isFrontPic, framePics, isTrainer))
src/battle_anim.c:9:#include "decompress.h"
src/battle_anim.c:414:    LoadCompressedSpriteSheetUsingHeap(&gBattleAnimPicTable[GET_TRUE_SPRITE_INDEX(index)]);
src/battle_anim.c:415:    LoadCompressedSpritePaletteUsingHeap(&gBattleAnimPaletteTable[GET_TRUE_SPRITE_INDEX(index)]);
src/battle_anim.c:1457:        LZDecompressWram(tilemap, gDecompressionBuffer);
src/battle_anim.c:1458:        RelocateBattleBgPal(GetBattleBgPaletteNum(), (void *)gDecompressionBuffer, 0x100, FALSE);
src/battle_anim.c:1459:        dmaSrc = gDecompressionBuffer;
src/battle_anim.c:1462:        LZDecompressVram(gBattleAnimBackgroundTable[bgId].image, (void *)BG_SCREEN_ADDR(4));
src/battle_anim.c:1463:        LoadCompressedPalette(gBattleAnimBackgroundTable[bgId].palette, BG_PLTT_ID(GetBattleBgPaletteNum()), PLTT_SIZE_4BPP);
src/battle_anim.c:1467:        LZDecompressVram(gBattleAnimBackgroundTable[bgId].tilemap, (void *)BG_SCREEN_ADDR(26));
src/battle_anim.c:1468:        LZDecompressVram(gBattleAnimBackgroundTable[bgId].image, (void *)BG_CHAR_ADDR(2));
src/battle_anim.c:1469:        LoadCompressedPalette(gBattleAnimBackgroundTable[bgId].palette, BG_PLTT_ID(2), PLTT_SIZE_4BPP);
src/battle_controller_link_partner.c:1143:    DecompressTrainerBackPic(trainerPicId, gActiveBattler);
src/battle_controller_link_partner.c:1556:    LoadCompressedPalette(gTrainerBackPicPaletteTable[trainerPicId].data, OBJ_PLTT_ID(paletteNum), PLTT_SIZE_4BPP);
src/match_call.c:1262:    if (!DecompressAndCopyTileDataToVram(0, sPokenavIcon_Gfx, 0, TILE_POKENAV_ICON, 0))
src/mystery_gift_link.c:3:#include "decompress.h"
src/pokenav_menu_handler_gfx.c:3:#include "decompress.h"
src/pokenav_menu_handler_gfx.c:152:static const struct CompressedSpriteSheet sPokenavOptionsSpriteSheets[] =
src/pokenav_menu_handler_gfx.c:456:        DecompressAndCopyTileDataToVram(1, gPokenavMessageBox_Gfx, 0, 0, 0);
src/pokenav_menu_handler_gfx.c:471:        DecompressAndCopyTileDataToVram(2, sPokenavDeviceBgTiles, 0, 0, 0);
src/pokenav_menu_handler_gfx.c:472:        DecompressAndCopyTileDataToVram(2, sPokenavDeviceBgTilemap, 0, 0, 1);
src/pokenav_menu_handler_gfx.c:478:        DecompressAndCopyTileDataToVram(3, sPokenavBgDotsTiles, 0, 0, 0);
src/pokenav_menu_handler_gfx.c:479:        DecompressAndCopyTileDataToVram(3, sPokenavBgDotsTilemap, 0, 0, 1);
src/pokenav_menu_handler_gfx.c:797:        LoadCompressedSpriteSheet(&sPokenavOptionsSpriteSheets[i]);
src/menu_specialized.c:6:#include "decompress.h"
src/menu_specialized.c:30:extern const struct CompressedSpriteSheet gMonFrontPicTable[];
src/battle_anim_mons.c:8:#include "decompress.h"
src/battle_anim_mons.c:1034:void AnimLoadCompressedBgGfx(u32 bgId, const u32 *src, u32 tilesOffset)
src/battle_anim_mons.c:1037:    LZDecompressWram(src, gBattleAnimBgTileBuffer);
src/battle_anim_mons.c:1047:void AnimLoadCompressedBgTilemap(u32 bgId, const void *src)
src/battle_anim_mons.c:1053:void AnimLoadCompressedBgTilemapHandleContest(struct BattleAnimBgData *data, const void *src, bool32 largeScreen)
src/battle_anim_mons.c:2144:        LoadCompressedPalette(GetMonSpritePalFromSpeciesAndPersonality(species, trainerId, personality), OBJ_PLTT_ID(palette), PLTT_SIZE_4BPP);
src/battle_anim_mons.c:2152:        LoadCompressedPalette(GetMonSpritePalFromSpeciesAndPersonality(species, trainerId, personality), OBJ_PLTT_ID(palette), PLTT_SIZE_4BPP);
src/battle_controller_player.c:2548:        DecompressTrainerFrontPic(trainerPicId, gActiveBattler);
src/battle_controller_player.c:2563:        DecompressTrainerBackPic(trainerPicId, gActiveBattler);
src/battle_controller_player.c:2602:    DecompressTrainerBackPic(trainerPicId, gActiveBattler);
src/battle_controller_player.c:3201:    LoadCompressedPalette(gTrainerBackPicPaletteTable[gSaveBlock2Ptr->playerGender].data, OBJ_PLTT_ID(paletteNum), PLTT_SIZE_4BPP);
src/battle_message.c:80:static const u8 sText_PlayerLostToEnemyTrainer[] = _("{B_PLAYER_NAME} is out of\nusable POKéMON!\pPlayer lost against\n{B_TRAINER1_CLASS} {B_TRAINER1_NAME}!{PAUSE_UNTIL_PRESS}");
src/battle_message.c:81:static const u8 sText_PlayerPaidPrizeMoney[] = _("{B_PLAYER_NAME} paid ¥{B_BUFF1} as the prize\nmoney…\p… … … …\p{B_PLAYER_NAME} whited out!{PAUSE_UNTIL_PRESS}");
src/battle_message.c:84:static const u8 sText_PlayerWhiteout2[] = _("{B_PLAYER_NAME} panicked and lost ¥{B_BUFF1}…\p… … … …\p{B_PLAYER_NAME} whited out!{PAUSE_UNTIL_PRESS}");
src/battle_message.c:86:static const u8 sText_PlayerWhiteout2[] = _("{B_PLAYER_NAME} whited out!{PAUSE_UNTIL_PRESS}");
src/battle_message.c:541:static const u8 sText_PkmnsAbilitySuppressed[] = _("{B_DEF_NAME_WITH_PREFIX}'s ability\nwas suppressed!");
src/battle_message.c:693:static const u8 sText_PressureActivates[] = _("{B_SCR_ACTIVE_NAME_WITH_PREFIX} is exerting its\npressure!");
src/battle_message.c:1266:    [STRINGID_PKMNSABILITYSUPPRESSED - BATTLESTRINGS_TABLE_START] = sText_PkmnsAbilitySuppressed,
src/battle_message.c:1392:    [STRINGID_PRESSUREENTERS - BATTLESTRINGS_TABLE_START] = sText_PressureActivates,
src/battle_message.c:1471:    [B_MSG_SWITCHIN_PRESSURE] = STRINGID_PRESSUREENTERS,
src/battle_message.c:3482:                dst[dstID] = EXT_CTRL_CODE_PAUSE_UNTIL_PRESS;
src/field_message_box.c:119:static void ExpandStringAndStartDrawFieldMessage(const u8 *str, bool32 allowSkippingDelayWithButtonPress)
src/field_message_box.c:122:    AddTextPrinterForMessage(allowSkippingDelayWithButtonPress);
src/menu_helpers.c:16:#include "decompress.h"
src/menu_helpers.c:72:static const struct CompressedSpriteSheet sSpriteSheet_SwapLine =
src/menu_helpers.c:77:static const struct CompressedSpritePalette sSpritePalette_SwapLine =
src/menu_helpers.c:172:    case MENU_B_PRESSED:
src/menu_helpers.c:252:u8 GetLRKeysPressed(void)
src/menu_helpers.c:257:            return MENU_L_PRESSED;
src/menu_helpers.c:259:            return MENU_R_PRESSED;
src/menu_helpers.c:265:u8 GetLRKeysPressedAndHeld(void)
src/menu_helpers.c:270:            return MENU_L_PRESSED;
src/menu_helpers.c:272:            return MENU_R_PRESSED;
src/menu_helpers.c:395:    LoadCompressedSpriteSheet(&sSpriteSheet_SwapLine);
src/menu_helpers.c:396:    LoadCompressedSpritePalette(&sSpritePalette_SwapLine);
src/pokedex_area_region_map.c:27:        DecompressAndCopyTileDataToVram(template->bg, sPokedexAreaMap_Gfx, 0, template->offset, 0);
src/pokedex_area_region_map.c:28:        tilemap = DecompressAndCopyTileDataToVram(template->bg, sPokedexAreaMap_Tilemap, 0, 0, 1);
src/pokedex_area_region_map.c:36:        DecompressAndCopyTileDataToVram(template->bg, sPokedexAreaMapAffine_Gfx, 0, template->offset, 0);
src/pokedex_area_region_map.c:37:        tilemap = DecompressAndCopyTileDataToVram(template->bg, sPokedexAreaMapAffine_Tilemap, 0, 0, 1);
src/fieldmap.c:845:        if (!tileset->isCompressed)
src/fieldmap.c:848:            DecompressAndCopyTileDataToVram(2, tileset->tiles, numTiles * 32, offset, 0);
src/fieldmap.c:856:        if (!tileset->isCompressed)
src/fieldmap.c:859:            DecompressAndLoadBgGfxUsingHeap(2, tileset->tiles, numTiles * 32, offset, 0);
src/fieldmap.c:893:            LoadCompressedPalette((const u32 *)tileset->palettes, destOffset, size);
src/reset_rtc_screen.c:671:        // Wait for A or B press on prompt first
src/cable_car.c:3:#include "decompress.h"
src/cable_car.c:151:static const struct CompressedSpriteSheet sSpriteSheets[] = {
src/cable_car.c:296:            LoadCompressedSpriteSheet(&sSpriteSheets[i]);
src/cable_car.c:299:        sCableCar->groundTilemap = malloc_and_decompress(sGround_Tilemap, &sizeOut);
src/cable_car.c:300:        sCableCar->treesTilemap = malloc_and_decompress(sTrees_Tilemap, &sizeOut);
src/cable_car.c:301:        sCableCar->bgMountainsTilemap = malloc_and_decompress(sBgMountains_Tilemap, &sizeOut);
src/cable_car.c:302:        sCableCar->pylonStemTilemap = malloc_and_decompress(sPylonStems_Tilemap, &sizeOut);
src/cable_car.c:304:        DecompressAndCopyTileDataToVram(0, gCableCarBg_Gfx, 0, 0, 0);
src/main_menu.c:7:#include "decompress.h"
src/main_menu.c:66: *    to be pressed.
src/main_menu.c:74: *    to be pressed.
src/main_menu.c:85: *  - If A is pressed, advance to Task_HandleMainMenuAPressed.
src/main_menu.c:86: *  - If B is pressed, return to the title screen via CB2_InitTitleScreen.
src/main_menu.c:87: *  - If Up or Down is pressed, handle scrolling if there is a scroll bar, change
src/main_menu.c:90: * Task_HandleMainMenuAPressed
src/main_menu.c:100: * Task_HandleMainMenuBPressed
src/main_menu.c:105: *    printing, and then wait for A or B to be pressed.
src/main_menu.c:106: * - Then advance to Task_HandleMainMenuBPressed.
src/main_menu.c:137: * Task_NewGameBirchSpeech_WaitPressBeforeNameChoice
src/main_menu.c:189:static void Task_HandleMainMenuAPressed(u8);
src/main_menu.c:190:static void Task_HandleMainMenuBPressed(u8);
src/main_menu.c:224:static void Task_NewGameBirchSpeech_WaitPressBeforeNameChoice(u8);
src/main_menu.c:890:        IsWirelessAdapterConnected();   // why bother calling this here? debug? Task_HandleMainMenuAPressed will check too
src/main_menu.c:892:        gTasks[taskId].func = Task_HandleMainMenuAPressed;
src/main_menu.c:900:        gTasks[taskId].func = Task_HandleMainMenuBPressed;
src/main_menu.c:935:static void Task_HandleMainMenuAPressed(u8 taskId)
src/main_menu.c:1108:static void Task_HandleMainMenuBPressed(u8 taskId)
src/main_menu.c:1155:                gTasks[taskId].func = Task_HandleMainMenuBPressed;
src/main_menu.c:1584:        gTasks[taskId].func = Task_NewGameBirchSpeech_WaitPressBeforeNameChoice;
src/main_menu.c:1587:static void Task_NewGameBirchSpeech_WaitPressBeforeNameChoice(u8 taskId)
src/main_menu.c:1636:        case MENU_B_PRESSED:
src/main_menu.c:1898:    brendanSpriteId = CreateTrainerSprite(FacilityClassToPicIndex(FACILITY_CLASS_BRENDAN), 120, 60, 0, &gDecompressionBuffer[0]);
src/main_menu.c:1903:    maySpriteId = CreateTrainerSprite(FacilityClassToPicIndex(FACILITY_CLASS_MAY), 120, 60, 0, &gDecompressionBuffer[0x800]);
src/berry_blender.c:12:#include "decompress.h"
src/berry_blender.c:285:static const u8 sText_PressAToStart[] = _("Press the A Button to start.");
src/berry_blender.c:962:        sBerryBlender->tilesBuffer = AllocZeroed(GetDecompressedDataSize(gBerryBlenderCenter_Gfx) + 100);
src/berry_blender.c:963:        LZDecompressWram(gBerryBlenderCenter_Gfx, sBerryBlender->tilesBuffer);
src/berry_blender.c:973:        LoadBgTiles(2, sBerryBlender->tilesBuffer, GetDecompressedDataSize(gBerryBlenderCenter_Gfx), 0);
src/berry_blender.c:977:        LZDecompressWram(gBerryBlenderOuter_Gfx, sBerryBlender->tilesBuffer);
src/berry_blender.c:981:        LoadBgTiles(1, sBerryBlender->tilesBuffer, GetDecompressedDataSize(gBerryBlenderOuter_Gfx), 0);
src/berry_blender.c:985:        LZDecompressWram(gBerryBlenderOuter_Tilemap, sBerryBlender->tilesBuffer);
src/berry_blender.c:989:        CopyToBgTilemapBuffer(1, sBerryBlender->tilesBuffer, GetDecompressedDataSize(gBerryBlenderOuter_Tilemap), 0);
src/berry_blender.c:2174:    bool8 pressedA = FALSE;
src/berry_blender.c:2187:                pressedA = TRUE;
src/berry_blender.c:2191:            pressedA = TRUE;
src/berry_blender.c:2194:        if (pressedA)
src/berry_blender.c:2686:        case MENU_B_PRESSED:
src/pokemon_jump.c:6:#include "decompress.h"
src/pokemon_jump.c:1718:        case MENU_B_PRESSED:
src/pokemon_jump.c:2561:static const struct CompressedSpriteSheet sCompressedSpriteSheets[] =
src/pokemon_jump.c:2871:    for (i = 0; i < ARRAY_COUNT(sCompressedSpriteSheets); i++)
src/pokemon_jump.c:2872:        LoadCompressedSpriteSheet(&sCompressedSpriteSheets[i]);
src/pokemon_jump.c:2892:    struct CompressedSpritePalette spritePalette;
src/pokemon_jump.c:2920:        LoadCompressedSpritePalette(&spritePalette);
src/pokemon_jump.c:3368:        DecompressAndCopyTileDataToVram(BG_SCENERY, sBg_Gfx, 0, 0, 0);
src/pokemon_jump.c:3369:        DecompressAndCopyTileDataToVram(BG_SCENERY, sBg_Tilemap, 0, 0, 1);
src/pokemon_jump.c:3371:        DecompressAndCopyTileDataToVram(BG_VENUSAUR, sVenusaur_Gfx, 0, 0, 0);
src/pokemon_jump.c:3372:        DecompressAndCopyTileDataToVram(BG_VENUSAUR, sVenusaur_Tilemap, 0, 0, 1);
src/pokemon_jump.c:3374:        DecompressAndCopyTileDataToVram(BG_BONUSES, sBonuses_Gfx, 0, 0, 0);
src/pokemon_jump.c:3375:        DecompressAndCopyTileDataToVram(BG_BONUSES, sBonuses_Tilemap, 0, 0, 1);
src/pokemon_jump.c:3844:static const struct CompressedSpriteSheet sSpriteSheet_Digits = {gMinigameDigits_Gfx, 0, TAG_DIGITS};
src/cable_club.c:177:        SetSuppressLinkErrorMessage(TRUE);
src/cable_club.c:236:    SetSuppressLinkErrorMessage(TRUE);
src/cable_club.c:524:    SetSuppressLinkErrorMessage(FALSE);
src/digit_obj_util.c:4:#include "decompress.h"
src/digit_obj_util.c:139:            struct CompressedSpriteSheet compSpriteSheet;
src/digit_obj_util.c:141:            compSpriteSheet = *(struct CompressedSpriteSheet *)(template->spriteSheet);
src/digit_obj_util.c:142:            compSpriteSheet.size = GetDecompressedDataSize(template->spriteSheet->data);
src/digit_obj_util.c:143:            sOamWork->array[id].tileStart = LoadCompressedSpriteSheet(&compSpriteSheet);
src/pokenav_match_call_gfx.c:4:#include "decompress.h"
src/pokenav_match_call_gfx.c:221:static const struct CompressedSpriteSheet sOptionsCursorSpriteSheets[1] =
src/pokenav_match_call_gfx.c:332:        DecompressAndCopyTileDataToVram(2, sMatchCallUI_Gfx, 0, 0, 0);
src/pokenav_match_call_gfx.c:354:        DecompressAndCopyTileDataToVram(3, sPokeball_Gfx, 0, 0, 0);
src/pokenav_match_call_gfx.c:1179:        LoadCompressedSpriteSheet(&sOptionsCursorSpriteSheets[i]);
src/pokenav_match_call_gfx.c:1250:        DecompressPicFromTable(&gTrainerFrontPicTable[trainerPic], gfx->trainerPicGfx, SPECIES_NONE);
src/battle_anim_dark.c:946:    AnimLoadCompressedBgTilemap(animBg.bgId, gMetalShineTilemap);
src/battle_anim_dark.c:947:    AnimLoadCompressedBgGfx(animBg.bgId, gMetalShineGfx, animBg.tilesOffset);
src/battle_anim_dark.c:948:    LoadCompressedPalette(gMetalShinePalette, BG_PLTT_ID(animBg.paletteId), PLTT_SIZE_4BPP);
src/credits.c:18:#include "decompress.h"
src/credits.c:277:    { gDecompressionBuffer, MONBG_OFFSET, TAG_MON_BG },
src/credits.c:281:    { (const u16 *)&gDecompressionBuffer[MONBG_OFFSET], TAG_MON_BG },
src/credits.c:556:            gDecompressionBuffer[i] = 0x11;
src/credits.c:558:            (gDecompressionBuffer + MON_PIC_SIZE)[i] = 0x22;
src/credits.c:560:            (gDecompressionBuffer + MON_PIC_SIZE * 2)[i] = 0x33;
src/credits.c:562:        temp = (u16 *)(&gDecompressionBuffer[MONBG_OFFSET]);
src/credits.c:1213:            LoadCompressedSpriteSheet(gSpriteSheet_CreditsBrendan);
src/credits.c:1214:            LoadCompressedSpriteSheet(gSpriteSheet_CreditsRivalMay);
src/credits.c:1215:            LoadCompressedSpriteSheet(gSpriteSheet_CreditsBicycle);
src/credits.c:1230:            LoadCompressedSpriteSheet(gSpriteSheet_CreditsMay);
src/credits.c:1231:            LoadCompressedSpriteSheet(gSpriteSheet_CreditsRivalBrendan);
src/credits.c:1232:            LoadCompressedSpriteSheet(gSpriteSheet_CreditsBicycle);
src/pokemon_summary_screen.c:14:#include "decompress.h"
src/pokemon_summary_screen.c:189:    s16 switchCounter; // Used for various switch statement cases that decompress/load graphics or pokemon data
src/pokemon_summary_screen.c:202:static bool8 DecompressGraphics(void);
src/pokemon_summary_screen.c:750:static const struct CompressedSpriteSheet sSpriteSheet_SplitIcons =
src/pokemon_summary_screen.c:938:static const struct CompressedSpriteSheet sSpriteSheet_MoveTypes =
src/pokemon_summary_screen.c:1050:static const struct CompressedSpriteSheet sMoveSelectorSpriteSheet =
src/pokemon_summary_screen.c:1056:static const struct CompressedSpritePalette sMoveSelectorSpritePal =
src/pokemon_summary_screen.c:1124:static const struct CompressedSpriteSheet sStatusIconsSpriteSheet =
src/pokemon_summary_screen.c:1130:static const struct CompressedSpritePalette sStatusIconsSpritePalette =
src/pokemon_summary_screen.c:1274:        if (DecompressGraphics() != FALSE)
src/pokemon_summary_screen.c:1387:static bool8 DecompressGraphics(void)
src/pokemon_summary_screen.c:1393:        DecompressAndCopyTileDataToVram(1, &gSummaryScreen_Gfx, 0, 0, 0);
src/pokemon_summary_screen.c:1399:            LZDecompressWram(gSummaryPage_Info_Tilemap, sMonSummaryScreen->bgTilemapBuffers[PSS_PAGE_INFO][0]);
src/pokemon_summary_screen.c:1404:        LZDecompressWram(gSummaryPage_InfoEgg_Tilemap, sMonSummaryScreen->bgTilemapBuffers[PSS_PAGE_INFO][1]);
src/pokemon_summary_screen.c:1408:        LZDecompressWram(gSummaryPage_Skills_Tilemap, sMonSummaryScreen->bgTilemapBuffers[PSS_PAGE_SKILLS][1]);
src/pokemon_summary_screen.c:1412:        LZDecompressWram(gSummaryPage_BattleMoves_Tilemap, sMonSummaryScreen->bgTilemapBuffers[PSS_PAGE_BATTLE_MOVES][1]);
src/pokemon_summary_screen.c:1416:        LZDecompressWram(gSummaryPage_ContestMoves_Tilemap, sMonSummaryScreen->bgTilemapBuffers[PSS_PAGE_CONTEST_MOVES][1]);
src/pokemon_summary_screen.c:1420:        LoadCompressedPalette(gSummaryScreen_Pal, BG_PLTT_ID(0), 8 * PLTT_SIZE_4BPP);
src/pokemon_summary_screen.c:1425:        LoadCompressedSpriteSheet(&sSpriteSheet_MoveTypes);
src/pokemon_summary_screen.c:1429:        LoadCompressedSpriteSheet(&sMoveSelectorSpriteSheet);
src/pokemon_summary_screen.c:1433:        LoadCompressedSpriteSheet(&sStatusIconsSpriteSheet);
src/pokemon_summary_screen.c:1437:        LoadCompressedSpritePalette(&sStatusIconsSpritePalette);
src/pokemon_summary_screen.c:1441:        LoadCompressedSpritePalette(&sMoveSelectorSpritePal);
src/pokemon_summary_screen.c:1445:        LoadCompressedPalette(gMoveTypes_Pal, OBJ_PLTT_ID(13), 3 * PLTT_SIZE_4BPP);
src/pokemon_summary_screen.c:1446:        LoadCompressedSpriteSheet(&sSpriteSheet_SplitIcons);
src/pokemon_summary_screen.c:1612:        else if ((JOY_NEW(DPAD_LEFT)) || GetLRKeysPressed() == MENU_L_PRESSED)
src/pokemon_summary_screen.c:1616:        else if ((JOY_NEW(DPAD_RIGHT)) || GetLRKeysPressed() == MENU_R_PRESSED)
src/pokemon_summary_screen.c:2289:            else if (JOY_NEW(DPAD_LEFT) || GetLRKeysPressed() == MENU_L_PRESSED)
src/pokemon_summary_screen.c:2293:            else if (JOY_NEW(DPAD_RIGHT) || GetLRKeysPressed() == MENU_R_PRESSED)
src/pokemon_summary_screen.c:2370:        else if (JOY_NEW(DPAD_LEFT) || GetLRKeysPressed() == MENU_L_PRESSED)
src/pokemon_summary_screen.c:2384:        else if (JOY_NEW(DPAD_RIGHT) || GetLRKeysPressed() == MENU_R_PRESSED)
src/pokemon_summary_screen.c:3981:    const struct CompressedSpritePalette *pal;
src/pokemon_summary_screen.c:4017:        LoadCompressedSpritePalette(pal);
src/battle_main.c:19:#include "decompress.h"
src/battle_main.c:1783:        // Player pressed B during recorded battle playback, end battle
src/battle_main.c:1829:    u16 *arr = (u16 *)gDecompressionBuffer;
src/battle_main.c:2144:        LoadCompressedPalette(gBattleTextboxPalette, BG_PLTT_ID(0), 2 * PLTT_SIZE_4BPP);
src/battle_z_move.c:21:#include "decompress.h"
src/battle_z_move.c:115:static const struct CompressedSpriteSheet sSpriteSheet_ZMoveTrigger = {
src/battle_z_move.c:279:        LoadCompressedSpriteSheetUsingHeap(&sSpriteSheet_ZMoveTrigger);
src/clear_save_data_screen.c:98:    case MENU_B_PRESSED:
src/wild_encounter.c:330:            if (ability == ABILITY_HUSTLE || ability == ABILITY_VITAL_SPIRIT || ability == ABILITY_PRESSURE)
src/rayquaza_scene.c:14:#include "decompress.h"
src/rayquaza_scene.c:553:static const struct CompressedSpriteSheet sSpriteSheet_DuoFight_Groudon =
src/rayquaza_scene.c:558:static const struct CompressedSpritePalette sSpritePal_DuoFight_Groudon =
src/rayquaza_scene.c:585:static const struct CompressedSpriteSheet sSpriteSheet_DuoFight_GroudonShoulder =
src/rayquaza_scene.c:612:static const struct CompressedSpriteSheet sSpriteSheet_DuoFight_GroudonClaw =
src/rayquaza_scene.c:704:static const struct CompressedSpriteSheet sSpriteSheet_DuoFight_Kyogre =
src/rayquaza_scene.c:709:static const struct CompressedSpritePalette sSpritePal_DuoFight_Kyogre =
src/rayquaza_scene.c:739:static const struct CompressedSpriteSheet sSpriteSheet_DuoFight_KyogrePectoralFin =
src/rayquaza_scene.c:755:static const struct CompressedSpriteSheet sSpriteSheet_DuoFight_KyogreDorsalFin =
src/rayquaza_scene.c:826:static const struct CompressedSpriteSheet sSpriteSheet_TakesFlight_Smoke =
src/rayquaza_scene.c:831:static const struct CompressedSpritePalette sSpritePal_TakesFlight_Smoke =
src/rayquaza_scene.c:925:static const struct CompressedSpriteSheet sSpriteSheet_Descends_Rayquaza =
src/rayquaza_scene.c:930:static const struct CompressedSpriteSheet sSpriteSheet_Descends_RayquazaTail =
src/rayquaza_scene.c:935:static const struct CompressedSpritePalette sSpritePal_Descends_Rayquaza =
src/rayquaza_scene.c:1139:static const struct CompressedSpriteSheet sSpriteSheet_ChasesAway_Groudon =
src/rayquaza_scene.c:1144:static const struct CompressedSpriteSheet sSpriteSheet_ChasesAway_GroudonTail =
src/rayquaza_scene.c:1149:static const struct CompressedSpriteSheet sSpriteSheet_ChasesAway_Kyogre =
src/rayquaza_scene.c:1154:static const struct CompressedSpriteSheet sSpriteSheet_ChasesAway_Rayquaza =
src/rayquaza_scene.c:1159:static const struct CompressedSpriteSheet sSpriteSheet_ChasesAway_RayquazaTail =
src/rayquaza_scene.c:1164:static const struct CompressedSpriteSheet sSpriteSheet_ChasesAway_KyogreSplash =
src/rayquaza_scene.c:1169:static const struct CompressedSpritePalette sSpritePal_ChasesAway_Groudon =
src/rayquaza_scene.c:1174:static const struct CompressedSpritePalette sSpritePal_ChasesAway_Kyogre =
src/rayquaza_scene.c:1179:static const struct CompressedSpritePalette sSpritePal_ChasesAway_Rayquaza =
src/rayquaza_scene.c:1184:static const struct CompressedSpritePalette sSpritePal_ChasesAway_KyogreSplash =
src/rayquaza_scene.c:1589:    DecompressAndCopyTileDataToVram(0, gRaySceneDuoFight_Clouds_Gfx, 0, 0, 0);
src/rayquaza_scene.c:1592:    LZDecompressWram(gRaySceneDuoFight_Clouds2_Tilemap, sRayScene->tilemapBuffers[0]);
src/rayquaza_scene.c:1593:    LZDecompressWram(gRaySceneDuoFight_Clouds1_Tilemap, sRayScene->tilemapBuffers[1]);
src/rayquaza_scene.c:1594:    LZDecompressWram(gRaySceneDuoFight_Clouds3_Tilemap, sRayScene->tilemapBuffers[2]);
src/rayquaza_scene.c:1595:    LoadCompressedPalette(gRaySceneDuoFight_Clouds_Pal, BG_PLTT_ID(0), 2 * PLTT_SIZE_4BPP);
src/rayquaza_scene.c:1596:    LoadCompressedSpriteSheet(&sSpriteSheet_DuoFight_Groudon);
src/rayquaza_scene.c:1597:    LoadCompressedSpriteSheet(&sSpriteSheet_DuoFight_GroudonShoulder);
src/rayquaza_scene.c:1598:    LoadCompressedSpriteSheet(&sSpriteSheet_DuoFight_GroudonClaw);
src/rayquaza_scene.c:1599:    LoadCompressedSpriteSheet(&sSpriteSheet_DuoFight_Kyogre);
src/rayquaza_scene.c:1600:    LoadCompressedSpriteSheet(&sSpriteSheet_DuoFight_KyogrePectoralFin);
src/rayquaza_scene.c:1601:    LoadCompressedSpriteSheet(&sSpriteSheet_DuoFight_KyogreDorsalFin);
src/rayquaza_scene.c:1602:    LoadCompressedSpritePalette(&sSpritePal_DuoFight_Groudon);
src/rayquaza_scene.c:1603:    LoadCompressedSpritePalette(&sSpritePal_DuoFight_Kyogre);
src/rayquaza_scene.c:2027:    DecompressAndCopyTileDataToVram(0, gRaySceneDuoFight_Clouds_Gfx, 0, 0, 0); // Re-uses clouds from previous scene
src/rayquaza_scene.c:2028:    DecompressAndCopyTileDataToVram(1, gRaySceneTakesFlight_Bg_Gfx, 0, 0, 0);
src/rayquaza_scene.c:2029:    DecompressAndCopyTileDataToVram(2, gRaySceneTakesFlight_Rayquaza_Gfx, 0, 0, 0);
src/rayquaza_scene.c:2032:    LZDecompressWram(gRaySceneDuoFight_Clouds2_Tilemap, sRayScene->tilemapBuffers[0]);
src/rayquaza_scene.c:2033:    LZDecompressWram(gRaySceneTakesFlight_Bg_Tilemap, sRayScene->tilemapBuffers[1]);
src/rayquaza_scene.c:2034:    LZDecompressWram(gRaySceneTakesFlight_Rayquaza_Tilemap, sRayScene->tilemapBuffers[2]);
src/rayquaza_scene.c:2035:    LoadCompressedPalette(gRaySceneTakesFlight_Rayquaza_Pal, BG_PLTT_ID(0), 2 * PLTT_SIZE_4BPP);
src/rayquaza_scene.c:2036:    LoadCompressedSpriteSheet(&sSpriteSheet_TakesFlight_Smoke);
src/rayquaza_scene.c:2037:    LoadCompressedSpritePalette(&sSpritePal_TakesFlight_Smoke);
src/rayquaza_scene.c:2231:    DecompressAndCopyTileDataToVram(0, gRaySceneDescends_Light_Gfx, 0, 0, 0);
src/rayquaza_scene.c:2232:    DecompressAndCopyTileDataToVram(1, gRaySceneDescends_Bg_Gfx, 0, 0, 0);
src/rayquaza_scene.c:2235:    LZDecompressWram(gRaySceneDescends_Light_Tilemap, sRayScene->tilemapBuffers[0]);
src/rayquaza_scene.c:2236:    LZDecompressWram(gRaySceneDescends_Bg_Tilemap, sRayScene->tilemapBuffers[3]);
src/rayquaza_scene.c:2241:    LoadCompressedPalette(gRaySceneDescends_Bg_Pal, BG_PLTT_ID(0), 2 * PLTT_SIZE_4BPP);
src/rayquaza_scene.c:2244:    LoadCompressedSpriteSheet(&sSpriteSheet_Descends_Rayquaza);
src/rayquaza_scene.c:2245:    LoadCompressedSpriteSheet(&sSpriteSheet_Descends_RayquazaTail);
src/rayquaza_scene.c:2246:    LoadCompressedSpritePalette(&sSpritePal_Descends_Rayquaza);
src/rayquaza_scene.c:2481:    DecompressAndCopyTileDataToVram(1, gRaySceneCharges_Rayquaza_Gfx, 0, 0, 0);
src/rayquaza_scene.c:2482:    DecompressAndCopyTileDataToVram(2, gRaySceneCharges_Streaks_Gfx, 0, 0, 0);
src/rayquaza_scene.c:2483:    DecompressAndCopyTileDataToVram(3, gRaySceneCharges_Bg_Gfx, 0, 0, 0);
src/rayquaza_scene.c:2486:    LZDecompressWram(gRaySceneCharges_Orbs_Tilemap, sRayScene->tilemapBuffers[0]);
src/rayquaza_scene.c:2487:    LZDecompressWram(gRaySceneCharges_Rayquaza_Tilemap, sRayScene->tilemapBuffers[1]);
src/rayquaza_scene.c:2488:    LZDecompressWram(gRaySceneCharges_Streaks_Tilemap, sRayScene->tilemapBuffers[2]);
src/rayquaza_scene.c:2489:    LZDecompressWram(gRaySceneCharges_Bg_Tilemap, sRayScene->tilemapBuffers[3]);
src/rayquaza_scene.c:2490:    LoadCompressedPalette(gRaySceneCharges_Bg_Pal, BG_PLTT_ID(0), 4 * PLTT_SIZE_4BPP);
src/rayquaza_scene.c:2667:    DecompressAndCopyTileDataToVram(2, gRaySceneChasesAway_Ring_Gfx, 0, 0, 0);
src/rayquaza_scene.c:2668:    DecompressAndCopyTileDataToVram(0, gRaySceneChasesAway_Light_Gfx, 0, 0, 0);
src/rayquaza_scene.c:2671:    LZDecompressWram(gRaySceneChasesAway_Bg_Tilemap, sRayScene->tilemapBuffers[1]);
src/rayquaza_scene.c:2672:    LZDecompressWram(gRaySceneChasesAway_Light_Tilemap, sRayScene->tilemapBuffers[0]);
src/rayquaza_scene.c:2673:    LZDecompressWram(gRaySceneChasesAway_Ring_Tilemap, sRayScene->tilemapBuffers[2]);
src/rayquaza_scene.c:2674:    LoadCompressedPalette(gRaySceneChasesAway_Bg_Pal, BG_PLTT_ID(0), 3 * PLTT_SIZE_4BPP);
src/rayquaza_scene.c:2675:    LoadCompressedSpriteSheet(&sSpriteSheet_ChasesAway_Groudon);
src/rayquaza_scene.c:2676:    LoadCompressedSpriteSheet(&sSpriteSheet_ChasesAway_GroudonTail);
src/rayquaza_scene.c:2677:    LoadCompressedSpriteSheet(&sSpriteSheet_ChasesAway_Kyogre);
src/rayquaza_scene.c:2678:    LoadCompressedSpriteSheet(&sSpriteSheet_ChasesAway_Rayquaza);
src/rayquaza_scene.c:2679:    LoadCompressedSpriteSheet(&sSpriteSheet_ChasesAway_RayquazaTail);
src/rayquaza_scene.c:2680:    LoadCompressedSpriteSheet(&sSpriteSheet_ChasesAway_KyogreSplash);
src/rayquaza_scene.c:2681:    LoadCompressedSpritePalette(&sSpritePal_ChasesAway_Groudon);
src/rayquaza_scene.c:2682:    LoadCompressedSpritePalette(&sSpritePal_ChasesAway_Kyogre);
src/rayquaza_scene.c:2683:    LoadCompressedSpritePalette(&sSpritePal_ChasesAway_Rayquaza);
src/rayquaza_scene.c:2684:    LoadCompressedSpritePalette(&sSpritePal_ChasesAway_KyogreSplash);
src/battle_anim_flying.c:1255:    AnimLoadCompressedBgGfx(animBg.bgId, gBattleAnimBgImage_Sandstorm, animBg.tilesOffset);
src/battle_anim_flying.c:1256:    AnimLoadCompressedBgTilemapHandleContest(&animBg, gBattleAnimBgTilemap_Sandstorm, 0);
src/battle_anim_flying.c:1257:    LoadCompressedPalette(gBattleAnimSpritePal_Windstorm, animBg.paletteId * 16, 32);
src/battle_anim_smokescreen.c:4:#include "decompress.h"
src/battle_anim_smokescreen.c:49:static const struct CompressedSpriteSheet sSmokescreenImpactSpriteSheet =
src/battle_anim_smokescreen.c:54:static const struct CompressedSpritePalette sSmokescreenImpactSpritePalette =
src/battle_anim_smokescreen.c:127:const struct CompressedSpriteSheet gSpriteSheet_EnemyShadow =
src/battle_anim_smokescreen.c:173:        LoadCompressedSpriteSheetUsingHeap(&sSmokescreenImpactSpriteSheet);
src/battle_anim_smokescreen.c:174:        LoadCompressedSpritePaletteUsingHeap(&sSmokescreenImpactSpritePalette);
src/overworld.c:158:static bool32 CanCableClubPlayerPressStart(struct CableClubPlayer *);
src/overworld.c:2346:            if (CanCableClubPlayerPressStart(trainer))
src/overworld.c:2713:static bool32 CanCableClubPlayerPressStart(struct CableClubPlayer *player)
src/hall_of_fame.c:15:#include "decompress.h"
src/hall_of_fame.c:88:static void Task_Hof_ExitOnKeyPressed(u8 taskId);
src/hall_of_fame.c:98:static void Task_HofPC_ExitOnButtonPress(u8 taskId);
src/hall_of_fame.c:151:static const struct CompressedSpriteSheet sSpriteSheet_Confetti[] =
src/hall_of_fame.c:157:static const struct CompressedSpritePalette sSpritePalette_Confetti[] =
src/hall_of_fame.c:487:    struct HallofFameTeam *lastSavedTeam = (struct HallofFameTeam *)(gDecompressionBuffer);
src/hall_of_fame.c:491:        memset(gDecompressionBuffer, 0, SECTOR_SIZE * NUM_HOF_SECTORS);
src/hall_of_fame.c:496:            memset(gDecompressionBuffer, 0, SECTOR_SIZE * NUM_HOF_SECTORS);
src/hall_of_fame.c:506:        struct HallofFameTeam *afterTeam = (struct HallofFameTeam *)(gDecompressionBuffer);
src/hall_of_fame.c:507:        struct HallofFameTeam *beforeTeam = (struct HallofFameTeam *)(gDecompressionBuffer);
src/hall_of_fame.c:728:        gTasks[taskId].func = Task_Hof_ExitOnKeyPressed;
src/hall_of_fame.c:732:static void Task_Hof_ExitOnKeyPressed(u8 taskId)
src/hall_of_fame.c:824:            struct HallofFameTeam *fameTeam = (struct HallofFameTeam *)(gDecompressionBuffer);
src/hall_of_fame.c:872:        CpuCopy16(gDecompressionBuffer, sHofMonPtr, SECTOR_SIZE * NUM_HOF_SECTORS);
src/hall_of_fame.c:1048:    fameTeam = (struct HallofFameTeam *)(gDecompressionBuffer);
src/hall_of_fame.c:1093:    gTasks[taskId].func = Task_HofPC_ExitOnButtonPress;
src/hall_of_fame.c:1096:static void Task_HofPC_ExitOnButtonPress(u8 taskId)
src/hall_of_fame.c:1284:    LoadCompressedSpriteSheet(sSpriteSheet_Confetti);
src/hall_of_fame.c:1285:    LoadCompressedSpritePalette(sSpritePalette_Confetti);
src/hall_of_fame.c:1307:        DecompressAndCopyTileDataToVram(1, sHallOfFame_Gfx, 0, 0, 0);
src/hall_of_fame.c:1495:        LoadCompressedSpriteSheet(sSpriteSheet_Confetti);
src/hall_of_fame.c:1496:        LoadCompressedSpritePalette(sSpritePalette_Confetti);
src/battle_controller_recorded_player.c:1229:        DecompressTrainerFrontPic(trainerPicId, gActiveBattler);
src/battle_controller_recorded_player.c:1243:        DecompressTrainerBackPic(trainerPicId, gActiveBattler);
src/battle_controller_recorded_player.c:1690:    LoadCompressedPalette(gTrainerBackPicPaletteTable[trainerPicId].data, OBJ_PLTT_ID(paletteNum), PLTT_SIZE_4BPP);
src/mail.c:86:static void CB2_WaitForPaletteExitOnKeyPress(void);
src/mail.c:87:static void CB2_ExitOnKeyPress(void);
src/mail.c:550:            DecompressAndCopyTileDataToVram(1, sMailGraphics[sMailRead->mailType].tiles, 0, 0, 0);
src/mail.c:624:            sMailRead->callback = CB2_WaitForPaletteExitOnKeyPress;
src/mail.c:722:static void CB2_WaitForPaletteExitOnKeyPress(void)
src/mail.c:726:        sMailRead->callback = CB2_ExitOnKeyPress;
src/mail.c:730:static void CB2_ExitOnKeyPress(void)
src/battle_anim_throw.c:6:#include "decompress.h"
src/battle_anim_throw.c:159:static const struct CompressedSpriteSheet sBallParticleSpriteSheets[] =
src/battle_anim_throw.c:190:static const struct CompressedSpritePalette sBallParticlePalettes[] =
src/battle_anim_throw.c:690:    AnimLoadCompressedBgTilemap(animBgData.bgId, UnusedLevelupAnimationTilemap);
src/battle_anim_throw.c:691:    AnimLoadCompressedBgGfx(animBgData.bgId, UnusedLevelupAnimationGfx, animBgData.tilesOffset);
src/battle_anim_throw.c:692:    LoadCompressedPalette(gCureBubblesPal, BG_PLTT_ID(animBgData.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_throw.c:1825:        LoadCompressedSpriteSheetUsingHeap(&sBallParticleSpriteSheets[ballId]);
src/battle_anim_throw.c:1826:        LoadCompressedSpritePaletteUsingHeap(&sBallParticlePalettes[ballId]);
src/battle_anim_throw.c:2503:                LoadCompressedSpriteSheetUsingHeap(&gBattleAnimPicTable[ANIM_TAG_GOLD_STARS - ANIM_SPRITES_START]);
src/battle_anim_throw.c:2504:                LoadCompressedSpritePaletteUsingHeap(&gBattleAnimPaletteTable[ANIM_TAG_GOLD_STARS - ANIM_SPRITES_START]);
src/battle_anim_throw.c:2656:    LoadCompressedSpriteSheetUsingHeap(&gBattleAnimPicTable[ANIM_TAG_POKEBLOCK - ANIM_SPRITES_START]);
src/battle_anim_throw.c:2657:    LoadCompressedSpritePaletteUsingHeap(&gBattleAnimPaletteTable[ANIM_TAG_POKEBLOCK - ANIM_SPRITES_START]);
src/pokenav_conditions_search_results.c:431:        DecompressAndCopyTileDataToVram(1, sConditionSearchResultTiles, 0, 0, 0);
src/union_room.c:8:#include "decompress.h"
src/union_room.c:456:                StringExpandPlaceholders(gStringVar4, sText_AwaitingLinkPressStart);
src/union_room.c:546:        case MENU_B_PRESSED:
src/union_room.c:624:        case MENU_B_PRESSED:
src/union_room.c:643:        case MENU_B_PRESSED:
src/union_room.c:1190:        case MENU_B_PRESSED:
src/union_room.c:1965:        case MENU_B_PRESSED:
src/union_room.c:2470:    memcpy(&gDecompressionBuffer[sizeof(gDecompressionBuffer) - (MAX_UNION_ROOM_LEADERS * sizeof(struct RfuPlayer))],
src/union_room.c:2478:           &gDecompressionBuffer[sizeof(gDecompressionBuffer) - (MAX_UNION_ROOM_LEADERS * sizeof(struct RfuPlayer))],
src/union_room.c:2846:        case MENU_B_PRESSED:
src/union_room.c:2980:        case MENU_B_PRESSED:
src/union_room.c:3137:        case MENU_B_PRESSED:
src/union_room.c:3207:        case MENU_B_PRESSED:
src/union_room.c:3643:        if (input == MENU_B_PRESSED || input == 0 || input == 1)
src/field_specials.c:621:// Presses the stepped-on switch and raises the rest
src/field_specials.c:622:void MauvilleGymPressSwitch(void)
src/field_specials.c:628:            MapGridSetMetatileIdAt(sMauvilleGymSwitchCoords[i].x, sMauvilleGymSwitchCoords[i].y, METATILE_MauvilleGym_PressedSwitch);
src/field_specials.c:728:// Presses all switches and deactivates all beams.
src/field_specials.c:735:        MapGridSetMetatileIdAt(switchCoords->x, switchCoords->y, METATILE_MauvilleGym_PressedSwitch);
src/field_specials.c:2391:        gSpecialVar_Result = MULTI_B_PRESSED;
src/field_specials.c:2654:        gSpecialVar_Result = MULTI_B_PRESSED;
src/battle_controller_recorded_opponent.c:1241:    DecompressTrainerFrontPic(trainerPicId, gActiveBattler);
src/decompress.c:4:#include "decompress.h"
src/decompress.c:9:EWRAM_DATA ALIGNED(4) u8 gDecompressionBuffer[0x4000] = {0};
src/decompress.c:11:void LZDecompressWram(const u32 *src, void *dest)
src/decompress.c:16:void LZDecompressVram(const u32 *src, void *dest)
src/decompress.c:21:u16 LoadCompressedSpriteSheet(const struct CompressedSpriteSheet *src)
src/decompress.c:25:    LZ77UnCompWram(src->data, gDecompressionBuffer);
src/decompress.c:26:    dest.data = gDecompressionBuffer;
src/decompress.c:32:void LoadCompressedSpriteSheetOverrideBuffer(const struct CompressedSpriteSheet *src, void *buffer)
src/decompress.c:43:void LoadCompressedSpritePalette(const struct CompressedSpritePalette *src)
src/decompress.c:47:    LZ77UnCompWram(src->data, gDecompressionBuffer);
src/decompress.c:48:    dest.data = (void *) gDecompressionBuffer;
src/decompress.c:53:void LoadCompressedSpritePaletteOverrideBuffer(const struct CompressedSpritePalette *src, void *buffer)
src/decompress.c:63:void DecompressPicFromTable(const struct CompressedSpriteSheet *src, void *buffer, s32 species)
src/decompress.c:71:void DecompressPicFromTableGender(void* buffer, s32 species, u32 personality)
src/decompress.c:74:        DecompressPicFromTable(&gMonFrontPicTableFemale[species], buffer, species);
src/decompress.c:76:        DecompressPicFromTable(&gMonFrontPicTable[species], buffer, species);
src/decompress.c:120:void Unused_LZDecompressWramIndirect(const void **src, void *dest)
src/decompress.c:269:u32 GetDecompressedDataSize(const u32 *ptr)
src/decompress.c:275:bool8 LoadCompressedSpriteSheetUsingHeap(const struct CompressedSpriteSheet *src)
src/decompress.c:292:bool8 LoadCompressedSpritePaletteUsingHeap(const struct CompressedSpritePalette *src)
src/intro.c:17:#include "decompress.h"
src/intro.c:111:extern const struct CompressedSpriteSheet gBattleAnimPicTable[];
src/intro.c:112:extern const struct CompressedSpritePalette gBattleAnimPaletteTable[];
src/intro.c:204:static const struct CompressedSpriteSheet sSpriteSheet_Sparkle[] =
src/intro.c:268:static const struct CompressedSpriteSheet sSpriteSheet_RunningPokemon[] =
src/intro.c:416:static const struct CompressedSpriteSheet sSpriteSheet_Lightning[] =
src/intro.c:487:static const struct CompressedSpriteSheet sSpriteSheet_Bubbles[] =
src/intro.c:964:static const struct CompressedSpriteSheet sSpriteSheet_WaterDropsAndLogo[] =
src/intro.c:969:static const struct CompressedSpriteSheet sSpriteSheet_FlygonSilhouette[] =
src/intro.c:1016:static const struct CompressedSpriteSheet sSpriteSheet_RayquazaOrb[] =
src/intro.c:1191:    LoadCompressedSpriteSheet(sSpriteSheet_WaterDropsAndLogo);
src/intro.c:1192:    LoadCompressedSpriteSheet(sSpriteSheet_FlygonSilhouette);
src/intro.c:1194:    LoadCompressedSpriteSheet(sSpriteSheet_Sparkle);
src/intro.c:1380:        LoadCompressedSpriteSheet(gSpriteSheet_IntroBrendan);
src/intro.c:1382:        LoadCompressedSpriteSheet(gSpriteSheet_IntroMay);
src/intro.c:1384:    LoadCompressedSpriteSheet(gSpriteSheet_IntroBicycle);
src/intro.c:1385:    LoadCompressedSpriteSheet(gSpriteSheet_IntroFlygon);
src/intro.c:1389:        LoadCompressedSpriteSheet(&sSpriteSheet_RunningPokemon[spriteId]);
src/intro.c:1778:        LZDecompressVram(gIntroGroudon_Gfx, (void *)VRAM);
src/intro.c:1779:        LZDecompressVram(gIntroGroudon_Tilemap, (void *)(BG_CHAR_ADDR(3)));
src/intro.c:1780:        LZDecompressVram(gIntroLegendBg_Gfx, (void *)(BG_CHAR_ADDR(1)));
src/intro.c:1781:        LZDecompressVram(gIntroGroudonBg_Tilemap, (void *)(BG_SCREEN_ADDR(28)));
src/intro.c:1782:        LoadCompressedSpriteSheetUsingHeap(&gBattleAnimPicTable[GET_TRUE_SPRITE_INDEX(ANIM_TAG_ROCKS)]);
src/intro.c:1783:        LoadCompressedSpritePaletteUsingHeap(&gBattleAnimPaletteTable[GET_TRUE_SPRITE_INDEX(ANIM_TAG_ROCKS)]);
src/intro.c:2053:    LZDecompressVram(gIntroKyogre_Gfx, (void *)VRAM);
src/intro.c:2054:    LZDecompressVram(gIntroKyogre_Tilemap, (void *)(BG_CHAR_ADDR(3)));
src/intro.c:2055:    LZDecompressVram(gIntroKyogreBg_Tilemap, (void *)(BG_SCREEN_ADDR(28)));
src/intro.c:2056:    LoadCompressedSpriteSheet(sSpriteSheet_Bubbles);
src/intro.c:2361:    LZDecompressVram(gIntroClouds_Gfx, (void *)VRAM);
src/intro.c:2362:    LZDecompressVram(gIntroClouds_Gfx, (void *)(BG_CHAR_ADDR(1)));
src/intro.c:2363:    LZDecompressVram(gIntroCloudsSun_Tilemap, (void *)(BG_SCREEN_ADDR(28)));
src/intro.c:2369:    LZDecompressVram(gIntroCloudsLeft_Tilemap, (void *)(BG_CHAR_ADDR(3)));
src/intro.c:2370:    LZDecompressVram(gIntroCloudsRight_Tilemap, (void *)(BG_SCREEN_ADDR(26)));
src/intro.c:2428:    LZDecompressVram(gIntroRayquaza_Tilemap, (void *)(BG_SCREEN_ADDR(28)));
src/intro.c:2429:    LZDecompressVram(gIntroRayquazaClouds_Tilemap, (void *)(BG_CHAR_ADDR(3)));
src/intro.c:2430:    LZDecompressVram(gIntroRayquaza_Gfx, (void *)(BG_CHAR_ADDR(1)));
src/intro.c:2431:    LZDecompressVram(gIntroRayquazaClouds_Gfx, (void *)VRAM);
src/intro.c:2442:    LoadCompressedSpriteSheetUsingHeap(sSpriteSheet_Lightning);
src/intro.c:2529:    LoadCompressedSpriteSheet(sSpriteSheet_RayquazaOrb);
src/pokemon_storage_system.c:5:#include "decompress.h"
src/pokemon_storage_system.c:176:    INPUT_PRESSED_B,
src/pokemon_storage_system.c:304:// picked up at once by pressing Select then holding
src/pokemon_storage_system.c:585:static void Task_OnBPressed(u8);
src/pokemon_storage_system.c:588:static void Task_OnCloseBoxPressed(u8);
src/pokemon_storage_system.c:1583:        case MENU_B_PRESSED:
src/pokemon_storage_system.c:2315:            SetPokeStorageTask(Task_OnCloseBoxPressed);
src/pokemon_storage_system.c:2317:        case INPUT_PRESSED_B:
src/pokemon_storage_system.c:2318:            SetPokeStorageTask(Task_OnBPressed);
src/pokemon_storage_system.c:2614:        case MENU_B_PRESSED:
src/pokemon_storage_system.c:2932:        case MENU_B_PRESSED:
src/pokemon_storage_system.c:3297:        case MENU_B_PRESSED:
src/pokemon_storage_system.c:3403:        case MENU_B_PRESSED:
src/pokemon_storage_system.c:3445:        case MENU_B_PRESSED:
src/pokemon_storage_system.c:3483:        case MENU_B_PRESSED:
src/pokemon_storage_system.c:3619:static void Task_OnCloseBoxPressed(u8 taskId)
src/pokemon_storage_system.c:3652:        case MENU_B_PRESSED:
src/pokemon_storage_system.c:3680:static void Task_OnBPressed(u8 taskId)
src/pokemon_storage_system.c:3718:        case MENU_B_PRESSED:
src/pokemon_storage_system.c:3827:    DecompressAndLoadBgGfxUsingHeap(3, sScrollingBg_Gfx, 0, 0, 0);
src/pokemon_storage_system.c:3840:    DecompressAndLoadBgGfxUsingHeap(1, gStorageSystemMenu_Gfx, 0, 0, 0);
src/pokemon_storage_system.c:5425:        sStorage->wallpaperTiles = malloc_and_decompress(wallpaper->tiles, &tilesSize);
src/pokemon_storage_system.c:5443:        sStorage->wallpaperTiles = malloc_and_decompress(wallpaper->tiles, &tilesSize);
src/pokemon_storage_system.c:5444:        iconGfx = malloc_and_decompress(sWaldaWallpaperIcons[GetWaldaWallpaperIconId()], &iconSize);
src/pokemon_storage_system.c:7177:            return INPUT_PRESSED_B;
src/pokemon_storage_system.c:7455:                return INPUT_PRESSED_B;
src/pokemon_storage_system.c:7532:            return INPUT_PRESSED_B;
src/pokemon_storage_system.c:7605:        // Button was pressed, determine which
src/pokemon_storage_system.c:7610:            return INPUT_PRESSED_B;
src/pokemon_storage_system.c:8089:            input = MENU_B_PRESSED;
src/pokemon_storage_system.c:8781:    struct CompressedSpriteSheet spriteSheet;
src/pokemon_storage_system.c:8793:            LoadCompressedSpriteSheet(&spriteSheet);
src/mystery_gift_view.c:5:#include "decompress.h"
src/mystery_gift_view.c:150:static const struct CompressedSpriteSheet sSpriteSheet_StampShadow = {
src/mystery_gift_view.c:235:        DecompressAndCopyTileDataToVram(2, sWonderCardData->gfx->tiles, 0, 0x008, 0);
src/mystery_gift_view.c:500:        LoadCompressedSpriteSheetUsingHeap(&sSpriteSheet_StampShadow);
src/mystery_gift_view.c:699:        DecompressAndCopyTileDataToVram(3, sWonderNewsData->gfx->tiles, 0, 8, 0);
src/slot_machine.c:9:#include "decompress.h"
src/slot_machine.c:69:// turns to the reel after you press stop.
src/slot_machine.c:513:static void PressStopReelButton(u8);
src/slot_machine.c:514:static void Task_PressStopReelButton(u8);
src/slot_machine.c:516:static void StopReelButton_Press(struct Task *, u8);
src/slot_machine.c:518:static void StopReelButton_Unpress(struct Task *, u8);
src/slot_machine.c:654:static EWRAM_DATA u16 *sReelButtonPress_Tilemap = NULL;
src/slot_machine.c:923:    StopReelButton_Press,
src/slot_machine.c:925:    StopReelButton_Unpress,
src/slot_machine.c:1233:    sReelButtonPress_Tilemap = AllocZeroed(8);
src/slot_machine.c:1478:        PressStopReelButton(sSlotMachine->currentReel);
src/slot_machine.c:1768:        FREE_AND_SET_NULL(sReelButtonPress_Tilemap);
src/slot_machine.c:3182:static void PressStopReelButton(u8 reelNum)
src/slot_machine.c:3184:    u8 taskId = CreateTask(Task_PressStopReelButton, 5);
src/slot_machine.c:3186:    Task_PressStopReelButton(taskId);
src/slot_machine.c:3189:static void Task_PressStopReelButton(u8 taskId)
src/slot_machine.c:3194:static void StopReelButton_Press(struct Task *task, u8 taskId)
src/slot_machine.c:3206:static void StopReelButton_Unpress(struct Task *task, u8 taskId)
src/slot_machine.c:3884:// Info Box is the screen shown when Select is pressed
src/slot_machine.c:5015:    LZDecompressWram(gSlotMachineDigitalDisplay_Gfx, sDigitalDisplayGfxPtr);
src/slot_machine.c:5017:    LZDecompressWram(sReelTimeGfx, sReelTimeGfxPtr);
src/slot_machine.c:5055:    LZDecompressWram(gSlotMachineMenu_Gfx, sMenuGfx);
src/slot_machine.c:5094:// For (un)shading the gray button at the bottom of a reel when A is pressed. The button is colored in quadrants
src/slot_machine.c:5097:    sReelButtonPress_Tilemap[0] = topLeft;
src/slot_machine.c:5098:    sReelButtonPress_Tilemap[1] = topRight;
src/slot_machine.c:5099:    sReelButtonPress_Tilemap[2] = bottomLeft;
src/slot_machine.c:5100:    sReelButtonPress_Tilemap[3] = bottomRight;
src/slot_machine.c:5102:    LoadBgTilemap(2, sReelButtonPress_Tilemap,     2, 15 * 32 + offset);     // Top left
src/slot_machine.c:5103:    LoadBgTilemap(2, sReelButtonPress_Tilemap + 1, 2, 15 * 32 + 1 + offset); // Top right
src/slot_machine.c:5104:    LoadBgTilemap(2, sReelButtonPress_Tilemap + 2, 2, 16 * 32 + offset);     // Bottom left
src/slot_machine.c:5105:    LoadBgTilemap(2, sReelButtonPress_Tilemap + 3, 2, 16 * 32 + 1 + offset); // Bottom Right
src/pokenav_ribbons_list.c:432:        DecompressAndCopyTileDataToVram(1, sMonRibbonListFrameTiles, 0, 0, 0);
src/intro_credits_graphics.c:4:#include "decompress.h"
src/intro_credits_graphics.c:90:static const struct CompressedSpriteSheet sSpriteSheet_Clouds[] =
src/intro_credits_graphics.c:217:static const struct CompressedSpriteSheet sSpriteSheet_TreesSmall[] =
src/intro_credits_graphics.c:364:static const struct CompressedSpriteSheet sSpriteSheet_HouseSilhouette[] =
src/intro_credits_graphics.c:579:const struct CompressedSpriteSheet gSpriteSheet_IntroBrendan[] =
src/intro_credits_graphics.c:589:const struct CompressedSpriteSheet gSpriteSheet_IntroMay[] =
src/intro_credits_graphics.c:599:const struct CompressedSpriteSheet gSpriteSheet_IntroBicycle[] =
src/intro_credits_graphics.c:610:static const struct CompressedSpriteSheet sSpriteSheet_IntroFlygon_Unused[] =
src/intro_credits_graphics.c:620:const struct CompressedSpriteSheet gSpriteSheet_IntroFlygon[] =
src/intro_credits_graphics.c:639:const struct CompressedSpriteSheet gSpriteSheet_CreditsBrendan[] =
src/intro_credits_graphics.c:649:const struct CompressedSpriteSheet gSpriteSheet_CreditsMay[] =
src/intro_credits_graphics.c:659:const struct CompressedSpriteSheet gSpriteSheet_CreditsBicycle[] =
src/intro_credits_graphics.c:670:static const struct CompressedSpriteSheet sSpriteSheet_Latios[] =
src/intro_credits_graphics.c:681:static const struct CompressedSpriteSheet sSpriteSheet_Latias[] =
src/intro_credits_graphics.c:700:const struct CompressedSpriteSheet gSpriteSheet_CreditsRivalBrendan[] =
src/intro_credits_graphics.c:710:const struct CompressedSpriteSheet gSpriteSheet_CreditsRivalMay[] =
src/intro_credits_graphics.c:743:        LoadCompressedSpriteSheet(sSpriteSheet_Clouds);
src/intro_credits_graphics.c:751:        LoadCompressedSpriteSheet(sSpriteSheet_TreesSmall);
src/intro_credits_graphics.c:850:        LoadCompressedSpriteSheet(sSpriteSheet_Clouds);
src/intro_credits_graphics.c:860:        LoadCompressedSpriteSheet(sSpriteSheet_Clouds);
src/intro_credits_graphics.c:871:        LoadCompressedSpriteSheet(sSpriteSheet_TreesSmall);
src/intro_credits_graphics.c:880:        LoadCompressedSpriteSheet(sSpriteSheet_HouseSilhouette);
src/expansion_intro.c:3:#include "decompress.h"
src/expansion_intro.c:140:static const struct CompressedSpriteSheet sSpriteSheet_DizzyEgg =
src/expansion_intro.c:147:static const struct CompressedSpriteSheet sSpriteSheet_Porygon =
src/expansion_intro.c:315:    LoadCompressedPalette(sBgPal_Credits, 0x00, 0x60);
src/expansion_intro.c:317:    LoadCompressedSpriteSheet(&sSpriteSheet_DizzyEgg);
src/expansion_intro.c:318:    LoadCompressedSpriteSheet(&sSpriteSheet_Porygon);
src/battle_anim_effects_2.c:5:#include "decompress.h"
src/battle_anim_effects_2.c:3063:    LZDecompressWram(gBattleAnimSpritePal_MusicNotes2, gMonSpritesGfxPtr->buffer);
src/battle_anim_effects_2.c:3296:    AnimLoadCompressedBgGfx(animBg.bgId, gBattleAnimBgImage_Attract, animBg.tilesOffset);
src/battle_anim_effects_2.c:3297:    AnimLoadCompressedBgTilemapHandleContest(&animBg, gBattleAnimBgTilemap_Attract, FALSE);
src/battle_anim_effects_2.c:3298:    LoadCompressedPalette(gBattleAnimBgPalette_Attract, BG_PLTT_ID(animBg.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_effects_2.c:3375:        AnimLoadCompressedBgTilemapHandleContest(&animBg, &gBattleAnimBgTilemap_ScaryFaceContest, FALSE);
src/battle_anim_effects_2.c:3377:        AnimLoadCompressedBgTilemapHandleContest(&animBg, &gBattleAnimBgTilemap_ScaryFacePlayer, FALSE);
src/battle_anim_effects_2.c:3379:        AnimLoadCompressedBgTilemapHandleContest(&animBg, &gBattleAnimBgTilemap_ScaryFaceOpponent, FALSE);
src/battle_anim_effects_2.c:3381:    AnimLoadCompressedBgGfx(animBg.bgId, gBattleAnimBgImage_ScaryFace, animBg.tilesOffset);
src/battle_anim_effects_2.c:3382:    LoadCompressedPalette(gBattleAnimBgPalette_ScaryFace, BG_PLTT_ID(animBg.paletteId), PLTT_SIZE_4BPP);
src/battle_util.c:1331:void PressurePPLose(u8 target, u8 attacker, u16 move)
src/battle_util.c:1335:    if (GetBattlerAbility(target) != ABILITY_PRESSURE)
src/battle_util.c:1358:void PressurePPLoseOnUsingImprison(u8 attacker)
src/battle_util.c:1366:        if (atkSide != GetBattlerSide(i) && GetBattlerAbility(i) == ABILITY_PRESSURE)
src/battle_util.c:1390:void PressurePPLoseOnUsingPerishSong(u8 attacker)
src/battle_util.c:1397:        if (GetBattlerAbility(i) == ABILITY_PRESSURE && i != attacker)
src/battle_util.c:1687:    case MOVE_FLYING_PRESS:
src/battle_util.c:4614:        case ABILITY_PRESSURE:
src/battle_util.c:4617:                gBattleCommunication[MULTISTRING_CHOOSER] = B_MSG_SWITCHIN_PRESSURE;
src/battle_util.c:9199:    else if (gBattleMoves[move].effect == EFFECT_BODY_PRESS)
src/starter_choose.c:4:#include "decompress.h"
src/starter_choose.c:284:static const struct CompressedSpriteSheet sSpriteSheet_PokeballSelect[] =
src/starter_choose.c:294:static const struct CompressedSpriteSheet sSpriteSheet_StarterCircle[] =
src/starter_choose.c:420:    LoadCompressedSpriteSheet(&sSpriteSheet_PokeballSelect[0]);
src/starter_choose.c:421:    LoadCompressedSpriteSheet(&sSpriteSheet_StarterCircle[0]);
src/starter_choose.c:551:    case MENU_B_PRESSED:
src/egg_hatch.c:7:#include "decompress.h"
src/egg_hatch.c:447:            LoadCompressedSpritePalette(GetMonSpritePalStruct(mon));
src/egg_hatch.c:530:        DecompressAndLoadBgGfxUsingHeap(0, gBattleTextboxTiles, 0, 0, 0);
src/egg_hatch.c:532:        LoadCompressedPalette(gBattleTextboxPalette, BG_PLTT_ID(0), PLTT_SIZE_4BPP);
src/egg_hatch.c:695:        case MENU_B_PRESSED:
src/m4a_1.s:1914:sDecodingBuffer: @ Used as a buffer for audio decoded from compressed DPCM
src/battle_anim_water.c:998:            AnimLoadCompressedBgTilemap(animBg.bgId, gBattleAnimBgTilemap_SurfOpponent);
src/battle_anim_water.c:1000:            AnimLoadCompressedBgTilemap(animBg.bgId, gBattleAnimBgTilemap_SurfPlayer);
src/battle_anim_water.c:1004:        AnimLoadCompressedBgTilemapHandleContest(&animBg, gBattleAnimBgTilemap_SurfContest, TRUE);
src/battle_anim_water.c:1006:    AnimLoadCompressedBgGfx(animBg.bgId, gBattleAnimBgImage_Surf, animBg.tilesOffset);
src/battle_anim_water.c:1012:            LoadCompressedPalette(gBattleAnimSpritePal_NewSurf, BG_PLTT_ID(animBg.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_water.c:1014:            LoadCompressedPalette(gBattleAnimBgPalette_Surf, BG_PLTT_ID(animBg.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_water.c:1017:        LoadCompressedPalette(gBattleAnimBackgroundImageMuddyWater_Pal, BG_PLTT_ID(animBg.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_water.c:1020:        LoadCompressedPalette(gBattleAnimBgPalette_SludgeWave, BG_PLTT_ID(animBg.paletteId), PLTT_SIZE_4BPP);
src/pokenav_list.c:8:#include "decompress.h"
src/pokenav_list.c:768:static const struct CompressedSpriteSheet sListArrowSpriteSheets[] =
src/pokenav_list.c:839:    const struct CompressedSpriteSheet *ptr;
src/pokenav_list.c:842:        LoadCompressedSpriteSheet(ptr);
src/main.c:265:    // BUG: Key repeat won't work when pressing L using L=A button mode
src/main.c:299:        gMain.watchedKeysPressed = TRUE;
src/battle_anim_effects_1.c:5:#include "decompress.h"
src/battle_anim_effects_1.c:143:static void AnimMoveAccupressure(struct Sprite *);
src/battle_anim_effects_1.c:280:static const union AffineAnimCmd sAccupressureTurn[] =
src/battle_anim_effects_1.c:287:static const union AffineAnimCmd sAccupressureStill[] =
src/battle_anim_effects_1.c:293:static const union AffineAnimCmd * const sAccupressureAffineAnims[] =
src/battle_anim_effects_1.c:295:    sAccupressureStill,
src/battle_anim_effects_1.c:296:    sAccupressureTurn
src/battle_anim_effects_1.c:357:const struct SpriteTemplate gAcupressureSpriteTemplate =
src/battle_anim_effects_1.c:359:    .tileTag = ANIM_TAG_ACUPRESSURE,
src/battle_anim_effects_1.c:360:    .paletteTag = ANIM_TAG_ACUPRESSURE,
src/battle_anim_effects_1.c:364:    .affineAnims = sAccupressureAffineAnims,
src/battle_anim_effects_1.c:365:    .callback = AnimMoveAccupressure,
src/battle_anim_effects_1.c:3458:static void AnimMoveAccupressureTransition(struct Sprite *sprite)
src/battle_anim_effects_1.c:3478:static void AnimMoveAccupressure(struct Sprite *sprite)
src/battle_anim_effects_1.c:3488:    sprite->callback = AnimMoveAccupressureTransition;
src/battle_anim_effects_1.c:6837:static const union AffineAnimCmd sCompressTargetHorizontallyAffineAnimCmds[] =
src/battle_anim_effects_1.c:6839:	AFFINEANIMCMD_FRAME(64, 0, 0, 16), //Compress
src/battle_anim_effects_1.c:6845:static void AnimTask_CompressTargetStep(u8 taskId)
src/battle_anim_effects_1.c:6853:void AnimTask_CompressTargetHorizontally(u8 taskId)
src/battle_anim_effects_1.c:6857:	PrepareAffineAnimInTaskData(task, spriteId, sCompressTargetHorizontallyAffineAnimCmds);
src/battle_anim_effects_1.c:6858:	task->func = AnimTask_CompressTargetStep;
src/field_tasks.c:30: *      . FortreeBridgePerStepCallback: Depresses Fortree log bridges that the player steps on.
src/pokenav_region_map.c:3:#include "decompress.h"
src/pokenav_region_map.c:53:static u32 LoopedTask_DecompressCityMaps(s32);
src/pokenav_region_map.c:57:static void DecompressCityMaps(void);
src/pokenav_region_map.c:58:static bool32 IsDecompressCityMapsActive(void);
src/pokenav_region_map.c:125:static const struct CompressedSpriteSheet sCityZoomTextSpriteSheet[1] =
src/pokenav_region_map.c:339:        DecompressCityMaps();
src/pokenav_region_map.c:342:        if (IsDecompressCityMapsActive())
src/pokenav_region_map.c:489:        LoadCompressedSpriteSheet(&sCityZoomTextSpriteSheet[i]);
src/pokenav_region_map.c:514:    DecompressAndCopyTileDataToVram(1, sRegionMapCityZoomTiles_Gfx, 0, 0, 0);
src/pokenav_region_map.c:615:static void DecompressCityMaps(void)
src/pokenav_region_map.c:617:    CreateLoopedTask(LoopedTask_DecompressCityMaps, 1);
src/pokenav_region_map.c:620:static bool32 IsDecompressCityMapsActive(void)
src/pokenav_region_map.c:622:    return FuncIsActiveLoopedTask(LoopedTask_DecompressCityMaps);
src/pokenav_region_map.c:625:static u32 LoopedTask_DecompressCityMaps(s32 taskState)
src/list_menu.c:9:#include "decompress.h"
src/list_menu.c:1075:    struct CompressedSpriteSheet spriteSheet;
src/list_menu.c:1083:    LoadCompressedSpriteSheet(&spriteSheet);
src/list_menu.c:1320:    struct CompressedSpriteSheet spriteSheet;
src/list_menu.c:1329:    LoadCompressedSpriteSheet(&spriteSheet);
src/list_menu.c:1405:    struct CompressedSpriteSheet spriteSheet;
src/list_menu.c:1414:    LoadCompressedSpriteSheet(&spriteSheet);
src/pokenav_conditions.c:3:#include "decompress.h"
src/pokenav_conditions.c:102:                // In Party mode, pressing A only applies to the Cancel button
src/pokenav_conditions.c:113:                // In Search mode pressing A brings up the markings menu
src/pokedex_area_screen.c:221:        DecompressAndCopyTileDataToVram(2, sAreaGlow_Gfx, 0, 0, 0);
src/pokeblock_feed.c:6:#include "decompress.h"
src/pokeblock_feed.c:142:EWRAM_DATA static struct CompressedSpritePalette sPokeblockSpritePal = {0};
src/pokeblock_feed.c:583:static const struct CompressedSpriteSheet sSpriteSheet_Pokeblock =
src/pokeblock_feed.c:722:    const struct CompressedSpritePalette *palette;
src/pokeblock_feed.c:740:        LoadCompressedSpritePalette(palette);
src/pokeblock_feed.c:745:        LoadCompressedSpriteSheet(&gPokeblockCase_SpriteSheet);
src/pokeblock_feed.c:749:        LoadCompressedSpritePalette(&gPokeblockCase_SpritePal);
src/pokeblock_feed.c:753:        LoadCompressedSpriteSheet(&sSpriteSheet_Pokeblock);
src/pokeblock_feed.c:758:        LoadCompressedSpritePalette(&sPokeblockSpritePal);
src/pokeblock_feed.c:763:        DecompressAndCopyTileDataToVram(1, gBattleTerrainTiles_Building, 0, 0, 0);
src/pokeblock_feed.c:769:            LZDecompressWram(gPokeblockFeedBg_Tilemap, sPokeblockFeed->tilemapBuffer);
src/pokeblock_feed.c:774:        LoadCompressedPalette(gBattleTerrainPalette_Frontier, BG_PLTT_ID(2), 3 * PLTT_SIZE_4BPP);
src/option_menu.c:73:EWRAM_DATA static bool8 sArrowPressed = FALSE;
src/option_menu.c:343:        if (sArrowPressed)
src/option_menu.c:345:            sArrowPressed = FALSE;
src/option_menu.c:407:        sArrowPressed = TRUE;
src/option_menu.c:416:        sArrowPressed = TRUE;
src/option_menu.c:449:        sArrowPressed = TRUE;
src/option_menu.c:472:        sArrowPressed = TRUE;
src/option_menu.c:496:        sArrowPressed = TRUE;
src/option_menu.c:525:        sArrowPressed = TRUE;
src/option_menu.c:536:        sArrowPressed = TRUE;
src/option_menu.c:581:        sArrowPressed = TRUE;
src/option_menu.c:590:        sArrowPressed = TRUE;
src/wallclock.c:4:#include "decompress.h"
src/wallclock.c:133:static const struct CompressedSpriteSheet sSpriteSheet_ClockHand =
src/wallclock.c:667:    LoadCompressedSpriteSheet(&sSpriteSheet_ClockHand);
src/wallclock.c:852:    case MENU_B_PRESSED:
src/ereader_helpers.c:3:#include "decompress.h"
src/contest_link.c:3:#include "decompress.h"
src/contest_link.c:24:    memcpy(gDecompressionBuffer, src, size);
src/contest_link.c:25:    if (SendBlock(BitmaskAllOtherLinkPlayers(), gDecompressionBuffer, size))
src/battle_anim_rock.c:334:    .paletteTag = ANIM_TAG_ACUPRESSURE,
src/battle_anim_rock.c:507:    AnimLoadCompressedBgGfx(animBg.bgId, gBattleAnimBgImage_Sandstorm, animBg.tilesOffset);
src/battle_anim_rock.c:508:    AnimLoadCompressedBgTilemapHandleContest(&animBg, gBattleAnimBgTilemap_Sandstorm, FALSE);
src/battle_anim_rock.c:509:    LoadCompressedPalette(gBattleAnimSpritePal_FlyingDirt, BG_PLTT_ID(animBg.paletteId), PLTT_SIZE_4BPP);
src/battle_gfx_sfx_util.c:21:#include "decompress.h"
src/battle_gfx_sfx_util.c:30:extern const struct CompressedSpriteSheet gSpriteSheet_EnemyShadow;
src/battle_gfx_sfx_util.c:43:static const struct CompressedSpriteSheet sSpriteSheet_SinglesPlayerHealthbox =
src/battle_gfx_sfx_util.c:48:static const struct CompressedSpriteSheet sSpriteSheet_SinglesOpponentHealthbox =
src/battle_gfx_sfx_util.c:53:static const struct CompressedSpriteSheet sSpriteSheets_DoublesPlayerHealthbox[2] =
src/battle_gfx_sfx_util.c:59:static const struct CompressedSpriteSheet sSpriteSheets_DoublesOpponentHealthbox[2] =
src/battle_gfx_sfx_util.c:65:static const struct CompressedSpriteSheet sSpriteSheet_SafariHealthbox =
src/battle_gfx_sfx_util.c:70:static const struct CompressedSpriteSheet sSpriteSheets_HealthBar[MAX_BATTLERS_COUNT] =
src/battle_gfx_sfx_util.c:72:    {gBlankGfxCompressed, 0x0100, TAG_HEALTHBAR_PLAYER1_TILE},
src/battle_gfx_sfx_util.c:73:    {gBlankGfxCompressed, 0x0120, TAG_HEALTHBAR_OPPONENT1_TILE},
src/battle_gfx_sfx_util.c:74:    {gBlankGfxCompressed, 0x0100, TAG_HEALTHBAR_PLAYER2_TILE},
src/battle_gfx_sfx_util.c:75:    {gBlankGfxCompressed, 0x0120, TAG_HEALTHBAR_OPPONENT2_TILE}
src/battle_gfx_sfx_util.c:597:    LZDecompressWram(lzPaletteData, gDecompressionBuffer);
src/battle_gfx_sfx_util.c:598:    LoadPalette(gDecompressionBuffer, paletteOffset, PLTT_SIZE_4BPP);
src/battle_gfx_sfx_util.c:599:    LoadPalette(gDecompressionBuffer, BG_PLTT_ID(8) + BG_PLTT_ID(battlerId), PLTT_SIZE_4BPP);
src/battle_gfx_sfx_util.c:604:        LZDecompressWram(lzPaletteData, gBattleStruct->castformPalette);
src/battle_gfx_sfx_util.c:630:void DecompressTrainerFrontPic(u16 frontPicId, u8 battlerId)
src/battle_gfx_sfx_util.c:633:    DecompressPicFromTable(&gTrainerFrontPicTable[frontPicId],
src/battle_gfx_sfx_util.c:636:    LoadCompressedSpritePalette(&gTrainerFrontPicPaletteTable[frontPicId]);
src/battle_gfx_sfx_util.c:639:void DecompressTrainerBackPic(u16 backPicId, u8 battlerId)
src/battle_gfx_sfx_util.c:642:    DecompressPicFromTable(&gTrainerBackPicTable[backPicId],
src/battle_gfx_sfx_util.c:645:    LoadCompressedPalette(gTrainerBackPicPaletteTable[backPicId].data,
src/battle_gfx_sfx_util.c:668:        LoadCompressedSpriteSheet(&sSpriteSheet_SinglesPlayerHealthbox);
src/battle_gfx_sfx_util.c:669:        LoadCompressedSpriteSheet(&sSpriteSheet_SinglesOpponentHealthbox);
src/battle_gfx_sfx_util.c:674:        LoadCompressedSpriteSheet(&sSpriteSheets_DoublesPlayerHealthbox[0]);
src/battle_gfx_sfx_util.c:675:        LoadCompressedSpriteSheet(&sSpriteSheets_DoublesPlayerHealthbox[1]);
src/battle_gfx_sfx_util.c:676:        LoadCompressedSpriteSheet(&sSpriteSheets_DoublesOpponentHealthbox[0]);
src/battle_gfx_sfx_util.c:677:        LoadCompressedSpriteSheet(&sSpriteSheets_DoublesOpponentHealthbox[1]);
src/battle_gfx_sfx_util.c:681:        LoadCompressedSpriteSheet(&sSpriteSheets_HealthBar[gBattlerPositions[i]]);
src/battle_gfx_sfx_util.c:700:                    LoadCompressedSpriteSheet(&sSpriteSheet_SafariHealthbox);
src/battle_gfx_sfx_util.c:702:                    LoadCompressedSpriteSheet(&sSpriteSheet_SinglesPlayerHealthbox);
src/battle_gfx_sfx_util.c:705:                LoadCompressedSpriteSheet(&sSpriteSheet_SinglesOpponentHealthbox);
src/battle_gfx_sfx_util.c:707:                LoadCompressedSpriteSheet(&sSpriteSheets_HealthBar[gBattlerPositions[0]]);
src/battle_gfx_sfx_util.c:709:                LoadCompressedSpriteSheet(&sSpriteSheets_HealthBar[gBattlerPositions[1]]);
src/battle_gfx_sfx_util.c:718:                    LoadCompressedSpriteSheet(&sSpriteSheets_DoublesPlayerHealthbox[0]);
src/battle_gfx_sfx_util.c:720:                    LoadCompressedSpriteSheet(&sSpriteSheet_SinglesPlayerHealthbox);
src/battle_gfx_sfx_util.c:723:                LoadCompressedSpriteSheet(&sSpriteSheets_DoublesPlayerHealthbox[1]);
src/battle_gfx_sfx_util.c:725:                LoadCompressedSpriteSheet(&sSpriteSheets_DoublesOpponentHealthbox[0]);
src/battle_gfx_sfx_util.c:727:                LoadCompressedSpriteSheet(&sSpriteSheets_DoublesOpponentHealthbox[1]);
src/battle_gfx_sfx_util.c:729:                LoadCompressedSpriteSheet(&sSpriteSheets_HealthBar[gBattlerPositions[0]]);
src/battle_gfx_sfx_util.c:731:                LoadCompressedSpriteSheet(&sSpriteSheets_HealthBar[gBattlerPositions[1]]);
src/battle_gfx_sfx_util.c:733:                LoadCompressedSpriteSheet(&sSpriteSheets_HealthBar[gBattlerPositions[2]]);
src/battle_gfx_sfx_util.c:735:                LoadCompressedSpriteSheet(&sSpriteSheets_HealthBar[gBattlerPositions[3]]);
src/battle_gfx_sfx_util.c:746:    LZDecompressWram(gBattleInterfaceGfx_BattleBar, gMonSpritesGfxPtr->barFontGfx);
src/battle_gfx_sfx_util.c:913:        LZDecompressWram(lzPaletteData, gBattleStruct->castformPalette);
src/battle_gfx_sfx_util.c:930:        LZDecompressWram(lzPaletteData, gDecompressionBuffer);
src/battle_gfx_sfx_util.c:931:        LoadPalette(gDecompressionBuffer, paletteOffset, PLTT_SIZE_4BPP);
src/battle_gfx_sfx_util.c:936:            LZDecompressWram(lzPaletteData, gBattleStruct->castformPalette);
src/battle_gfx_sfx_util.c:969:            LZDecompressVram(gSubstituteDollBackGfx, gMonSpritesGfxPtr->sprites.ptr[position]);
src/battle_gfx_sfx_util.c:971:            LZDecompressVram(gSubstituteDollFrontGfx, gMonSpritesGfxPtr->sprites.ptr[position]);
src/battle_gfx_sfx_util.c:973:            LZDecompressVram(gSubstituteDollBackGfx, gMonSpritesGfxPtr->sprites.ptr[position]);
src/battle_gfx_sfx_util.c:981:        LoadCompressedPalette(gSubstituteDollPal, palOffset, PLTT_SIZE_4BPP);
src/battle_gfx_sfx_util.c:1110:    LoadCompressedSpriteSheet(&gSpriteSheet_EnemyShadow);
src/battle_gfx_sfx_util.c:1220:    gMonSpritesGfxPtr->firstDecompressed = AllocZeroed(MON_PIC_SIZE * 4 * MAX_BATTLERS_COUNT);
src/battle_gfx_sfx_util.c:1224:        gMonSpritesGfxPtr->sprites.ptr[i] = gMonSpritesGfxPtr->firstDecompressed + (i * MON_PIC_SIZE * 4);
src/battle_gfx_sfx_util.c:1247:    FREE_AND_SET_NULL(gMonSpritesGfxPtr->firstDecompressed);
src/battle_debug.c:25:#include "decompress.h"
src/evolution_scene.c:7:#include "decompress.h"
src/evolution_scene.c:215:    const struct CompressedSpritePalette* pokePal;
src/evolution_scene.c:263:    DecompressPicFromTableGender(gMonSpritesGfxPtr->sprites.ptr[B_POSITION_OPPONENT_LEFT],
src/evolution_scene.c:267:    LoadCompressedPalette(pokePal->data, OBJ_PLTT_ID(1), PLTT_SIZE_4BPP);
src/evolution_scene.c:278:    DecompressPicFromTableGender(gMonSpritesGfxPtr->sprites.ptr[B_POSITION_OPPONENT_RIGHT],
src/evolution_scene.c:282:    LoadCompressedPalette(pokePal->data, OBJ_PLTT_ID(2), PLTT_SIZE_4BPP);
src/evolution_scene.c:315:    const struct CompressedSpritePalette* pokePal;
src/evolution_scene.c:355:    DecompressPicFromTableGender(gMonSpritesGfxPtr->sprites.ptr[B_POSITION_OPPONENT_RIGHT],
src/evolution_scene.c:360:    LoadCompressedPalette(pokePal->data, OBJ_PLTT_ID(2), PLTT_SIZE_4BPP);
src/evolution_scene.c:424:            const struct CompressedSpritePalette* pokePal;
src/evolution_scene.c:427:            DecompressPicFromTableGender(gMonSpritesGfxPtr->sprites.ptr[B_POSITION_OPPONENT_RIGHT],
src/evolution_scene.c:431:            LoadCompressedPalette(pokePal->data, OBJ_PLTT_ID(2), PLTT_SIZE_4BPP);
src/evolution_scene.c:474:    const struct CompressedSpritePalette* pokePal;
src/evolution_scene.c:491:    DecompressPicFromTableGender(gMonSpritesGfxPtr->sprites.ptr[B_POSITION_OPPONENT_LEFT],
src/evolution_scene.c:496:    LoadCompressedPalette(pokePal->data, OBJ_PLTT_ID(2), PLTT_SIZE_4BPP);
src/evolution_scene.c:1334:            case MENU_B_PRESSED:
src/evolution_scene.c:1621:    DecompressAndLoadBgGfxUsingHeap(1, sBgAnim_Gfx, FALSE, 0, 0);
src/graphics.c:16:const u32 gBlankGfxCompressed[] = INCBIN_U32("graphics/interface/blank.4bpp.lz");
src/graphics.c:374:const u32 gBattleAnimSpriteGfx_Acupressure[] = INCBIN_U32("graphics/battle_anims/sprites/acupressure.4bpp.lz");
src/graphics.c:375:const u32 gBattleAnimSpritePal_Acupressure[] = INCBIN_U32("graphics/battle_anims/sprites/acupressure.gbapal.lz");
src/graphics.c:2012:const u16 gTitleScreenPressStartPal[]      = INCBIN_U16("graphics/title_screen/press_start.gbapal");
src/graphics.c:2013:const u32 gTitleScreenPressStartGfx[]      = INCBIN_U32("graphics/title_screen/press_start.4bpp.lz");
src/diploma.c:9:#include "decompress.h"
src/diploma.c:25:static void Task_DiplomaWaitForKeyPress(u8);
src/diploma.c:80:    DecompressAndCopyTileDataToVram(1, &sDiplomaTiles, 0, 0, 0);
src/diploma.c:83:    LZDecompressWram(sDiplomaTilemap, sDiplomaTilemapPtr);
src/diploma.c:105:        gTasks[taskId].func = Task_DiplomaWaitForKeyPress;
src/diploma.c:108:static void Task_DiplomaWaitForKeyPress(u8 taskId)
src/field_control_avatar.c:75:    input->pressedAButton = FALSE;
src/field_control_avatar.c:77:    input->pressedStartButton = FALSE;
src/field_control_avatar.c:78:    input->pressedSelectButton = FALSE;
src/field_control_avatar.c:82:    input->pressedBButton = FALSE;
src/field_control_avatar.c:101:                input->pressedStartButton = TRUE;
src/field_control_avatar.c:103:                input->pressedSelectButton = TRUE;
src/field_control_avatar.c:105:                input->pressedAButton = TRUE;
src/field_control_avatar.c:107:                input->pressedBButton = TRUE;
src/field_control_avatar.c:162:    if (input->pressedBButton && TrySetupDiveEmergeScript() == TRUE)
src/field_control_avatar.c:181:    if (input->pressedAButton && TryStartInteractionScript(&position, metatileBehavior, playerDirection) == TRUE)
src/field_control_avatar.c:189:    if (input->pressedAButton && TrySetupDiveDownScript() == TRUE)
src/field_control_avatar.c:191:    if (input->pressedStartButton)
src/field_control_avatar.c:197:    if (input->pressedSelectButton && UseRegisteredKeyItemOnField() == TRUE)
src/ereader_screen.c:3:#include "decompress.h"
src/ereader_screen.c:101:    memset(gDecompressionBuffer, 0, 0x2000);
src/ereader_screen.c:104:    SetSuppressLinkErrorMessage(TRUE);
src/ereader_screen.c:474:        data->status = ValidateTrainerHillData((struct EReaderTrainerHillSet *)gDecompressionBuffer);
src/ereader_screen.c:488:        if (TryWriteTrainerHill((struct EReaderTrainerHillSet *)&gDecompressionBuffer))
src/script_pokemon_util.c:7:#include "decompress.h"
src/player_pc.c:424:    case MENU_B_PRESSED:
src/player_pc.c:540:    case MENU_B_PRESSED:
src/player_pc.c:770:    case MENU_B_PRESSED:
src/player_pc.c:841:    case MENU_B_PRESSED:
src/battle_ai_util.c:166:    [ABILITY_PRESSURE] = 5,
src/battle_ai_util.c:1161:// does NOT include ability suppression checks
src/battle_ai_util.c:1263:        return FALSE;   // AI handicap flag: doesn't understand ability suppression concept
src/battle_ai_util.c:1283:        return TRUE;   // AI doesn't understand weather supression (handicap)
src/battle_ai_util.c:2091:	case EFFECT_ACUPRESSURE:
src/pokeblock.c:7:#include "decompress.h"
src/pokeblock.c:277:const struct CompressedSpriteSheet gPokeblockCase_SpriteSheet =
src/pokeblock.c:282:const struct CompressedSpritePalette gPokeblockCase_SpritePal =
src/pokeblock.c:645:        DecompressAndCopyTileDataToVram(2, gMenuPokeblock_Gfx, 0, 0, 0);
src/pokeblock.c:651:            LZDecompressWram(gMenuPokeblock_Tilemap, sPokeblockMenu->tilemap);
src/pokeblock.c:656:        LoadCompressedPalette(gMenuPokeblock_Pal, BG_PLTT_ID(0), 6 * PLTT_SIZE_4BPP);
src/pokeblock.c:660:        LoadCompressedSpriteSheet(&gPokeblockCase_SpriteSheet);
src/pokeblock.c:664:        LoadCompressedSpritePalette(&gPokeblockCase_SpritePal);
src/pokeblock.c:1098:            if (JOY_NEW(A_BUTTON)) // Pointless check, B Button has been pressed here
src/pokeblock.c:1172:    else if (itemId == MENU_B_PRESSED)
src/field_effect.c:2:#include "decompress.h"
src/field_effect.c:239:extern struct CompressedSpritePalette gMonPaletteTable[]; // GF made a mistake and did not extern it as const.
src/field_effect.c:240:extern const struct CompressedSpritePalette gTrainerFrontPicPaletteTable[];
src/field_effect.c:241:extern const struct CompressedSpriteSheet gTrainerFrontPicTable[];
src/field_effect.c:891:    LoadCompressedSpritePaletteOverrideBuffer(&gTrainerFrontPicPaletteTable[trainerSpriteID], buffer);
src/field_effect.c:892:    LoadCompressedSpriteSheetOverrideBuffer(&gTrainerFrontPicTable[trainerSpriteID], buffer);
src/field_effect.c:905:    LZDecompressVram(gTrainerFrontPicTable[gender].data, dest);
src/field_effect.c:906:    LoadCompressedPalette(gTrainerFrontPicPaletteTable[gender].data, palOffset, PLTT_SIZE_4BPP);
src/field_effect.c:927:    const struct CompressedSpritePalette *spritePalette = GetMonSpritePalStructFromOtIdPersonality(species, otId, personality);
src/battle_controller_opponent.c:1317:    DecompressTrainerFrontPic(trainerPicId, gActiveBattler);
src/battle_controller_opponent.c:1389:    DecompressTrainerFrontPic(trainerPicId, gActiveBattler);
src/fldeff_sweetscent.c:55:    CpuFastSet(gPlttBufferUnfaded, gPaletteDecompressionBuffer, 0x100);
src/fldeff_sweetscent.c:94:        CpuFastSet(gPaletteDecompressionBuffer, gPlttBufferUnfaded, 0x100);
src/rom_header_gf.c:23:    const struct CompressedSpriteSheet * monFrontPics;
src/rom_header_gf.c:24:    const struct CompressedSpriteSheet * monBackPics;
src/rom_header_gf.c:25:    const struct CompressedSpritePalette * monNormalPalettes;
src/rom_header_gf.c:26:    const struct CompressedSpritePalette * monShinyPalettes;
src/rom_header_gf.c:77:    const struct CompressedSpriteSheet * ballGfx;
src/rom_header_gf.c:78:    const struct CompressedSpritePalette * ballPalettes;
src/pokenav_ribbons_summary.c:2:#include "decompress.h"
src/pokenav_ribbons_summary.c:573:        DecompressAndCopyTileDataToVram(2, gPokenavRibbonsSummaryBg_Gfx, 0, 0, 0);
src/pokenav_ribbons_summary.c:583:            DecompressAndCopyTileDataToVram(1, sRibbonIconsSmall_Gfx, 0, 1, 0);
src/pokenav_ribbons_summary.c:1138:static const struct CompressedSpriteSheet sSpriteSheet_RibbonIconsBig =
src/pokenav_ribbons_summary.c:1219:    LoadCompressedSpriteSheet(&sSpriteSheet_RibbonIconsBig);
src/field_player_avatar.c:1865:// We have a bite. Now, wait for the player to press A, or the timer to expire.
src/frontier_pass.c:19:#include "decompress.h"
src/frontier_pass.c:363:static const struct CompressedSpriteSheet sCursorSpriteSheets[] =
src/frontier_pass.c:370:static const struct CompressedSpriteSheet sHeadsSpriteSheet[] =
src/frontier_pass.c:765:        sPassGfx->mapAndCardZoomTilemap = malloc_and_decompress(sMapAndCard_Zooming_Tilemap, &sizeOut);
src/frontier_pass.c:766:        sPassGfx->mapAndCardTilemap = malloc_and_decompress(sMapAndCard_ZoomedOut_Tilemap, &sizeOut);
src/frontier_pass.c:767:        sPassGfx->battleRecordTilemap = malloc_and_decompress(sBattleRecord_Tilemap, &sizeOut);
src/frontier_pass.c:768:        DecompressAndCopyTileDataToVram(1, gFrontierPassBg_Gfx, 0, 0, 0);
src/frontier_pass.c:769:        DecompressAndCopyTileDataToVram(2, gFrontierPassMapAndCard_Gfx, 0, 0, 0);
src/frontier_pass.c:1313:    LoadCompressedSpriteSheet(&sCursorSpriteSheets[0]);
src/frontier_pass.c:1314:    LoadCompressedSpriteSheet(&sCursorSpriteSheets[2]);
src/frontier_pass.c:1421:        DecompressAndCopyTileDataToVram(1, sMapScreen_Gfx, 0, 0, 0);
src/frontier_pass.c:1641:    LoadCompressedSpriteSheet(&sCursorSpriteSheets[0]);
src/frontier_pass.c:1648:    LoadCompressedSpriteSheet(&sCursorSpriteSheets[1]);
src/frontier_pass.c:1694:        LoadCompressedSpriteSheet(sHeadsSpriteSheet);
src/naming_screen.c:129:    STATE_PRESSED_OK,
src/naming_screen.c:278:// This handles what characters get inserted when a key is pressed
src/naming_screen.c:339:static bool8 MainState_PressedOKButton(void);
src/naming_screen.c:568:    case STATE_PRESSED_OK:
src/naming_screen.c:569:        MainState_PressedOKButton();
src/naming_screen.c:669:static bool8 MainState_PressedOKButton(void)
src/naming_screen.c:1516:        sNamingScreen->state = STATE_PRESSED_OK;
src/contest.c:10:#include "decompress.h"
src/contest.c:441:static const struct CompressedSpriteSheet sSpriteSheet_NextTurn[CONTESTANT_COUNT] =
src/contest.c:560:static const struct CompressedSpriteSheet sSpriteSheet_Faces =
src/contest.c:593:static const struct CompressedSpriteSheet sSpriteSheet_ApplauseMeter =
src/contest.c:656:static const struct CompressedSpriteSheet sSpriteSheet_Judge =
src/contest.c:663:static const struct CompressedSpriteSheet sSpriteSheet_JudgeSymbols =
src/contest.c:670:static const struct CompressedSpritePalette sSpritePalette_JudgeSymbols =
src/contest.c:837:static const struct CompressedSpriteSheet sSpriteSheets_ContestantsTurnBlinkEffect[CONTESTANT_COUNT] =
src/contest.c:840:        .data = gBlankGfxCompressed,
src/contest.c:845:        .data = gBlankGfxCompressed,
src/contest.c:850:        .data = gBlankGfxCompressed,
src/contest.c:855:        .data = gBlankGfxCompressed,
src/contest.c:1034:    LZDecompressVram(gContestInterfaceGfx, (void *)VRAM);
src/contest.c:1035:    LZDecompressVram(gContestAudienceGfx, (void *)(BG_SCREEN_ADDR(4)));
src/contest.c:1038:    LoadCompressedPalette(gContestInterfaceAudiencePalette, BG_PLTT_OFFSET, BG_PLTT_SIZE);
src/contest.c:1178:        FREE_AND_SET_NULL(gMonSpritesGfxPtr->firstDecompressed);
src/contest.c:1179:        gMonSpritesGfxPtr->firstDecompressed = AllocZeroed(0x4000);
src/contest.c:1316:        LZDecompressVram(gContestInterfaceGfx, (void *)VRAM);
src/contest.c:1319:        LZDecompressVram(gContestAudienceGfx, (void *)(BG_SCREEN_ADDR(4)));
src/contest.c:1333:        LoadCompressedPalette(gContestInterfaceAudiencePalette, BG_PLTT_OFFSET, BG_PLTT_SIZE);
src/contest.c:1501:    // Wait for button press to show move select screen
src/contest.c:3102:    LoadCompressedSpriteSheet(&sSpriteSheet_Judge);
src/contest.c:3103:    LoadCompressedPalette(gContest2Pal, OBJ_PLTT_ID(1), PLTT_SIZE_4BPP);
src/contest.c:3114:    LoadCompressedSpriteSheet(&sSpriteSheet_JudgeSymbols);
src/contest.c:3115:    LoadCompressedSpritePalette(&sSpritePalette_JudgeSymbols);
src/contest.c:3129:    LoadCompressedPalette(GetMonSpritePalFromSpeciesAndPersonality(species, otId, personality), OBJ_PLTT_ID(2), PLTT_SIZE_4BPP);
src/contest.c:3948:        LoadCompressedSpriteSheet(&sSpriteSheet_NextTurn[i]);
src/contest.c:3962:    LoadCompressedSpriteSheet(&sSpriteSheet_ApplauseMeter);
src/contest.c:4123:    LoadCompressedSpriteSheet(&sSpriteSheets_ContestantsTurnBlinkEffect[contestant]);
src/pokenav_conditions_gfx.c:5:#include "decompress.h"
src/pokenav_conditions_gfx.c:210:        DecompressAndCopyTileDataToVram(3, gPokenavCondition_Gfx, 0, 0, 0);
src/pokenav_conditions_gfx.c:215:        DecompressAndCopyTileDataToVram(2, sConditionGraphData_Gfx, 0, 0, 0);
src/use_pokeblock.c:6:#include "decompress.h"
src/use_pokeblock.c:664:        case MENU_B_PRESSED:
src/use_pokeblock.c:890:    case MENU_B_PRESSED:
src/use_pokeblock.c:1604:    struct CompressedSpriteSheet spriteSheet;
src/use_pokeblock.c:1611:    LoadCompressedSpriteSheet(&spriteSheet);
src/money.c:11:#include "decompress.h"
src/money.c:59:static const struct CompressedSpriteSheet sSpriteSheet_MoneyLabel =
src/money.c:66:static const struct CompressedSpritePalette sSpritePalette_MoneyLabel =
src/money.c:189:    LoadCompressedSpriteSheet(&sSpriteSheet_MoneyLabel);
src/money.c:190:    LoadCompressedSpritePalette(&sSpritePalette_MoneyLabel);
src/save_failed_screen.c:8:#include "decompress.h"
src/save_failed_screen.c:25:extern const u8 gText_SaveCompletePressA[];
src/save_failed_screen.c:205:        SetBgTilemapBuffer(0, (void *)&gDecompressionBuffer[0x2000]);
src/save_failed_screen.c:206:        CpuFill32(0, &gDecompressionBuffer[0x2000], 0x800);
src/save_failed_screen.c:210:        SetWindowAttribute(sWindowIds[TEXT_WIN_ID], 7, (u32)&gDecompressionBuffer[0x2800]);
src/save_failed_screen.c:212:        SetWindowAttribute(sWindowIds[CLOCK_WIN_ID], 7, (u32)&gDecompressionBuffer[0x3D00]);
src/save_failed_screen.c:288:            SaveFailedScreenTextPrint(gText_SaveCompletePressA, 1, 0);
src/script_menu.c:30:static void DrawMultichoiceMenu(u8 left, u8 top, u8 multichoiceId, bool8 ignoreBPress, u8 cursorPos);
src/script_menu.c:31:static void InitMultichoiceCheckWrap(bool8 ignoreBPress, u8 count, u8 windowId, u8 multichoiceId);
src/script_menu.c:37:static void InitMultichoiceNoWrap(bool8 ignoreBPress, u8 unusedCount, u8 windowId, u8 multichoiceId);
src/script_menu.c:39:bool8 ScriptMenu_Multichoice(u8 left, u8 top, u8 multichoiceId, bool8 ignoreBPress)
src/script_menu.c:48:        DrawMultichoiceMenu(left, top, multichoiceId, ignoreBPress, 0);
src/script_menu.c:53:bool8 ScriptMenu_MultichoiceWithDefault(u8 left, u8 top, u8 multichoiceId, bool8 ignoreBPress, u8 defaultChoice)
src/script_menu.c:62:        DrawMultichoiceMenu(left, top, multichoiceId, ignoreBPress, defaultChoice);
src/script_menu.c:93:static void DrawMultichoiceMenuInternal(u8 left, u8 top, u8 multichoiceId, bool8 ignoreBPress, u8 cursorPos, const struct MenuAction *actions, int count)
src/script_menu.c:112:    InitMultichoiceCheckWrap(ignoreBPress, count, windowId, multichoiceId);
src/script_menu.c:115:static void DrawMultichoiceMenu(u8 left, u8 top, u8 multichoiceId, bool8 ignoreBPress, u8 cursorPos)
src/script_menu.c:117:    DrawMultichoiceMenuInternal(left, top, multichoiceId, ignoreBPress, cursorPos, sMultichoiceLists[multichoiceId].list, sMultichoiceLists[multichoiceId].count);
src/script_menu.c:197:#define tIgnoreBPress   data[4]
src/script_menu.c:202:static void InitMultichoiceCheckWrap(bool8 ignoreBPress, u8 count, u8 windowId, u8 multichoiceId)
src/script_menu.c:218:    gTasks[taskId].tIgnoreBPress = ignoreBPress;
src/script_menu.c:256:                if (selection == MENU_B_PRESSED)
src/script_menu.c:258:                    if (tIgnoreBPress)
src/script_menu.c:261:                    gSpecialVar_Result = MULTI_B_PRESSED;
src/script_menu.c:313:    case MENU_B_PRESSED:
src/script_menu.c:327:bool8 ScriptMenu_MultichoiceGrid(u8 left, u8 top, u8 multichoiceId, bool8 ignoreBPress, u8 columnCount)
src/script_menu.c:354:        gTasks[taskId].tIgnoreBPress = ignoreBPress;
src/script_menu.c:373:    case MENU_B_PRESSED:
src/script_menu.c:374:        if (tIgnoreBPress)
src/script_menu.c:377:        gSpecialVar_Result = MULTI_B_PRESSED;
src/script_menu.c:619:    if (gSpecialVar_Result != MULTI_B_PRESSED)
src/script_menu.c:783:static void InitMultichoiceNoWrap(bool8 ignoreBPress, u8 unusedCount, u8 windowId, u8 multichoiceId)
src/script_menu.c:788:    gTasks[taskId].tIgnoreBPress = ignoreBPress;
src/script_menu.c:798:#undef tIgnoreBPress
src/battle_controller_player_partner.c:1327:        DecompressTrainerBackPic(trainerPicId, gActiveBattler);
src/battle_controller_player_partner.c:1338:        DecompressTrainerFrontPic(trainerPicId, gActiveBattler);
src/battle_controller_player_partner.c:1808:        LoadCompressedPalette(gTrainerBackPicPaletteTable[spriteId].data, OBJ_PLTT_ID(paletteNum), PLTT_SIZE_4BPP);
src/battle_controller_player_partner.c:1813:        LoadCompressedPalette(gTrainerBackPicPaletteTable[spriteId].data, 0x100 + paletteNum * 16, 32);
src/battle_controller_player_partner.c:1818:        LoadCompressedPalette(gTrainerFrontPicPaletteTable[spriteId].data, OBJ_PLTT_ID(paletteNum), PLTT_SIZE_4BPP);
src/libisagbprn.c:160:void AGBAssert(const char *pFile, int nLine, const char *pExpression, int nStopProgram)
src/libisagbprn.c:164:        AGBPrintf("ASSERTION FAILED  FILE=[%s] LINE=[%d]  EXP=[%s] \n", pFile, nLine, pExpression);
src/libisagbprn.c:170:        AGBPrintf("WARING FILE=[%s] LINE=[%d]  EXP=[%s] \n", pFile, nLine, pExpression);
src/libisagbprn.c:198:void NoCashGBAAssert(const char *pFile, s32 nLine, const char *pExpression, bool32 nStopProgram)
src/libisagbprn.c:202:        NoCashGBAPrintf("ASSERTION FAILED  FILE=[%s] LINE=[%d]  EXP=[%s]", pFile, nLine, pExpression);
src/libisagbprn.c:207:        NoCashGBAPrintf("WARING FILE=[%s] LINE=[%d]  EXP=[%s]", pFile, nLine, pExpression);
src/libisagbprn.c:244:void MgbaAssert(const char *pFile, s32 nLine, const char *pExpression, bool32 nStopProgram)
src/libisagbprn.c:248:        MgbaPrintf(MGBA_LOG_ERROR, "ASSERTION FAILED  FILE=[%s] LINE=[%d]  EXP=[%s]", pFile, nLine, pExpression);
src/libisagbprn.c:253:        MgbaPrintf(MGBA_LOG_WARN, "WARING FILE=[%s] LINE=[%d]  EXP=[%s]", pFile, nLine, pExpression);
src/trade.c:9:#include "decompress.h"
src/trade.c:1501:    case MENU_B_PRESSED:
src/trade.c:1537:static void CB_ChooseMonAfterButtonPress(void)
src/trade.c:1639:    case MENU_B_PRESSED:
src/trade.c:1673:    case MENU_B_PRESSED:
src/trade.c:1838:        CB_ChooseMonAfterButtonPress();
src/trade.c:2823:        LoadCompressedSpritePalette(GetMonSpritePalStruct(mon));
src/trade.c:2993:    DecompressAndLoadBgGfxUsingHeap(0, gBattleTextboxTiles, 0, 0, 0);
src/trade.c:2994:    LZDecompressWram(gBattleTextboxTilemap, gDecompressionBuffer);
src/trade.c:2995:    CopyToBgTilemapBuffer(0, gDecompressionBuffer, BG_SCREEN_SIZE, 0);
src/trade.c:2996:    LoadCompressedPalette(gBattleTextboxPalette, BG_PLTT_ID(0), PLTT_SIZE_4BPP);
src/trade.c:2999:    DecompressAndLoadBgGfxUsingHeap(0, gBattleTextboxTiles, 0, 0, 0);
src/trade.c:3000:    LZDecompressWram(gBattleTextboxTilemap, gDecompressionBuffer);
src/trade.c:3001:    CopyToBgTilemapBuffer(0, gDecompressionBuffer, BG_SCREEN_SIZE, 0);
src/trade.c:3002:    LoadCompressedPalette(gBattleTextboxPalette, BG_PLTT_ID(0), PLTT_SIZE_4BPP);
src/strings.c:236:const u8 gText_DadsAdvice[] = _("DAD's advice…\n{PLAYER}, there's a time and place for\leverything!{PAUSE_UNTIL_PRESS}");
src/strings.c:237:const u8 gText_CantDismountBike[] = _("You can't dismount your BIKE here.{PAUSE_UNTIL_PRESS}");
src/strings.c:238:const u8 gText_ItemFinderNearby[] = _("Huh?\nThe ITEMFINDER's responding!\pThere's an item buried around here!{PAUSE_UNTIL_PRESS}");
src/strings.c:239:const u8 gText_ItemFinderOnTop[] = _("Oh!\nThe ITEMFINDER's shaking wildly!{PAUSE_UNTIL_PRESS}");
src/strings.c:240:const u8 gText_ItemFinderNothing[] = _("… … … …Nope!\nThere's no response.{PAUSE_UNTIL_PRESS}");
src/strings.c:241:const u8 gText_CoinCase[] = _("Your COINS:\n{STR_VAR_1}{PAUSE_UNTIL_PRESS}");
src/strings.c:245:const u8 gText_PlayerUsedVar2[] = _("{PLAYER} used the\n{STR_VAR_2}.{PAUSE_UNTIL_PRESS}");
src/strings.c:246:const u8 gText_RepelEffectsLingered[] = _("But the effects of a REPEL\nlingered from earlier.{PAUSE_UNTIL_PRESS}");
src/strings.c:247:const u8 gText_LureEffectsLingered[] = _("But the effects of a Lure\nlingered from earlier.{PAUSE_UNTIL_PRESS}");
src/strings.c:248:const u8 gText_UsedVar2WildLured[] = _("{PLAYER} used the\n{STR_VAR_2}.\pWild POKéMON will be lured.{PAUSE_UNTIL_PRESS}");
src/strings.c:249:const u8 gText_UsedVar2WildRepelled[] = _("{PLAYER} used the\n{STR_VAR_2}.\pWild POKéMON will be repelled.{PAUSE_UNTIL_PRESS}");
src/strings.c:250:const u8 gText_BoxFull[] = _("The BOX is full.{PAUSE_UNTIL_PRESS}");
src/strings.c:251:const u8 gText_PowderQty[] = _("POWDER QTY: {STR_VAR_1}{PAUSE_UNTIL_PRESS}");
src/strings.c:338:const u8 gText_Var1AteTheVar2[] = _("{STR_VAR_1} ate the\n{STR_VAR_2}.{PAUSE_UNTIL_PRESS}");
src/strings.c:339:const u8 gText_Var1HappilyAteVar2[] = _("{STR_VAR_1} happily ate the\n{STR_VAR_2}.{PAUSE_UNTIL_PRESS}");
src/strings.c:340:const u8 gText_Var1DisdainfullyAteVar2[] = _("{STR_VAR_1} disdainfully ate the\n{STR_VAR_2}.{PAUSE_UNTIL_PRESS}");
src/strings.c:354:const u8 gText_YouDontHaveMoney[] = _("You don't have enough money.{PAUSE_UNTIL_PRESS}");
src/strings.c:355:const u8 gText_NoMoreRoomForThis[] = _("You have no more room for this\nitem.{PAUSE_UNTIL_PRESS}");
src/strings.c:356:const u8 gText_SpaceForVar1Full[] = _("The space for {STR_VAR_1} is full.{PAUSE_UNTIL_PRESS}");
src/strings.c:359:const u8 gText_ThrowInPremierBall[] = _("I'll throw in a PREMIER BALL, too.{PAUSE_UNTIL_PRESS}");
src/strings.c:360:const u8 gText_CantBuyKeyItem[] = _("{STR_VAR_2}? Oh, no.\nI can't buy that.{PAUSE_UNTIL_PRESS}");
src/strings.c:378:const u8 gText_WontHaveEffect[] = _("It won't have any effect.{PAUSE_UNTIL_PRESS}");
src/strings.c:379:const u8 gText_CantBeUsedOnPkmn[] = _("This can't be used on\nthat POKéMON.{PAUSE_UNTIL_PRESS}");
src/strings.c:380:const u8 gText_PkmnCantSwitchOut[] = _("{STR_VAR_1} can't be switched\nout!{PAUSE_UNTIL_PRESS}");
src/strings.c:381:const u8 gText_PkmnAlreadyInBattle[] = _("{STR_VAR_1} is already\nin battle!{PAUSE_UNTIL_PRESS}");
src/strings.c:382:const u8 gText_PkmnAlreadySelected[] = _("{STR_VAR_1} has already been\nselected.{PAUSE_UNTIL_PRESS}");
src/strings.c:383:const u8 gText_PkmnHasNoEnergy[] = _("{STR_VAR_1} has no energy\nleft to battle!{PAUSE_UNTIL_PRESS}");
src/strings.c:384:const u8 gText_CantSwitchWithAlly[] = _("You can't switch {STR_VAR_1}'s\nPOKéMON with one of yours!{PAUSE_UNTIL_PRESS}");
src/strings.c:385:const u8 gText_EggCantBattle[] = _("An EGG can't battle!{PAUSE_UNTIL_PRESS}");
src/strings.c:386:const u8 gText_CantUseUntilNewBadge[] = _("This can't be used until a new\nBADGE is obtained.{PAUSE_UNTIL_PRESS}");
src/strings.c:387:const u8 gText_NoMoreThanVar1Pkmn[] = _("No more than {STR_VAR_1} POKéMON\nmay enter.{PAUSE_UNTIL_PRESS}");
src/strings.c:389:const u8 gText_MailSentToPC[] = _("The MAIL was sent to your PC.{PAUSE_UNTIL_PRESS}");
src/strings.c:390:const u8 gText_PCMailboxFull[] = _("Your PC's MAILBOX is full.{PAUSE_UNTIL_PRESS}");
src/strings.c:392:const u8 gText_RemoveMailBeforeItem[] = _("MAIL must be removed before\nholding an item.{PAUSE_UNTIL_PRESS}");
src/strings.c:393:const u8 gText_PkmnWasGivenItem[] = _("{STR_VAR_1} was given the\n{STR_VAR_2} to hold.{PAUSE_UNTIL_PRESS}");
src/strings.c:395:const u8 gText_PkmnNotHolding[] = _("{STR_VAR_1} isn't holding\nanything.{PAUSE_UNTIL_PRESS}");
src/strings.c:396:const u8 gText_ReceivedItemFromPkmn[] = _("Received the {STR_VAR_2}\nfrom {STR_VAR_1}.{PAUSE_UNTIL_PRESS}");
src/strings.c:397:const u8 gText_MailTakenFromPkmn[] = _("MAIL was taken from the\nPOKéMON.{PAUSE_UNTIL_PRESS}");
src/strings.c:398:const u8 gText_SwitchedPkmnItem[] = _("The {STR_VAR_2} was taken and\nreplaced with the {STR_VAR_1}.{PAUSE_UNTIL_PRESS}");
src/strings.c:399:const u8 gText_PkmnHoldingItemCantHoldMail[] = _("This POKéMON is holding an\nitem. It cannot hold MAIL.{PAUSE_UNTIL_PRESS}");
src/strings.c:400:const u8 gText_MailTransferredFromMailbox[] = _("MAIL was transferred from\nthe MAILBOX.{PAUSE_UNTIL_PRESS}");
src/strings.c:401:const u8 gText_BagFullCouldNotRemoveItem[] = _("The BAG is full. The POKéMON's\nitem could not be removed.{PAUSE_UNTIL_PRESS}");
src/strings.c:403:const u8 gText_PkmnCantLearnMove[] = _("{STR_VAR_1} and {STR_VAR_2}\nare not compatible.\p{STR_VAR_2} can't be\nlearned.{PAUSE_UNTIL_PRESS}");
src/strings.c:406:const u8 gText_MoveNotLearned[] = _("{STR_VAR_1} did not learn the\nmove {STR_VAR_2}.{PAUSE_UNTIL_PRESS}");
src/strings.c:407:const u8 gText_WhichMoveToForget[] = _("Which move should be forgotten?{PAUSE_UNTIL_PRESS}");
src/strings.c:408:const u8 gText_12PoofForgotMove[] = _("1, {PAUSE 15}2, and{PAUSE 15}… {PAUSE 15}… {PAUSE 15}… {PAUSE 15}{PLAY_SE SE_BALL_BOUNCE_1}Poof!\p{STR_VAR_1} forgot how to\nuse {STR_VAR_2}.\pAnd…{PAUSE_UNTIL_PRESS}");
src/strings.c:409:const u8 gText_PkmnAlreadyKnows[] = _("{STR_VAR_1} already knows\n{STR_VAR_2}.{PAUSE_UNTIL_PRESS}");
src/strings.c:410:const u8 gText_PkmnHPRestoredByVar2[] = _("{STR_VAR_1}'s HP was restored\nby {STR_VAR_2} point(s).{PAUSE_UNTIL_PRESS}");
src/strings.c:411:const u8 gText_PkmnCuredOfPoison[] = _("{STR_VAR_1} was cured of its\npoisoning.{PAUSE_UNTIL_PRESS}");
src/strings.c:412:const u8 gText_PkmnCuredOfParalysis[] = _("{STR_VAR_1} was cured of\nparalysis.{PAUSE_UNTIL_PRESS}");
src/strings.c:413:const u8 gText_PkmnWokeUp2[] = _("{STR_VAR_1} woke up.{PAUSE_UNTIL_PRESS}");
src/strings.c:414:const u8 gText_PkmnBurnHealed[] = _("{STR_VAR_1}'s burn was healed.{PAUSE_UNTIL_PRESS}");
src/strings.c:415:const u8 gText_PkmnThawedOut[] = _("{STR_VAR_1} was thawed out.{PAUSE_UNTIL_PRESS}");
src/strings.c:416:const u8 gText_PPWasRestored[] = _("PP was restored.{PAUSE_UNTIL_PRESS}");
src/strings.c:417:const u8 gText_PkmnRegainhedHealth[] = _("{STR_VAR_1} regained health.{PAUSE_UNTIL_PRESS}"); // Unused
src/strings.c:418:const u8 gText_PkmnBecameHealthy[] = _("{STR_VAR_1} became healthy.{PAUSE_UNTIL_PRESS}");
src/strings.c:419:const u8 gText_MovesPPIncreased[] = _("{STR_VAR_1}'s PP increased.{PAUSE_UNTIL_PRESS}");
src/strings.c:421:const u8 gText_PkmnGainedExp[] = _("{STR_VAR_1} gained {STR_VAR_2} Exp. Points!{PAUSE_UNTIL_PRESS}");
src/strings.c:423:const u8 gText_PkmnBaseVar2StatIncreased[] = _("{STR_VAR_1}'s base {STR_VAR_2}\nstat was raised.{PAUSE_UNTIL_PRESS}");
src/strings.c:424:const u8 gText_PkmnFriendlyBaseVar2Fell[] = _("{STR_VAR_1} turned friendly.\nThe base {STR_VAR_2} fell!{PAUSE_UNTIL_PRESS}");
src/strings.c:425:const u8 gText_PkmnAdoresBaseVar2Fell[] = _("{STR_VAR_1} adores you!\nThe base {STR_VAR_2} fell!{PAUSE_UNTIL_PRESS}");
src/strings.c:426:const u8 gText_PkmnFriendlyBaseVar2CantFall[] = _("{STR_VAR_1} turned friendly.\nThe base {STR_VAR_2} can't fall!{PAUSE_UNTIL_PRESS}");
src/strings.c:427:const u8 gText_PkmnSnappedOutOfConfusion[] = _("{STR_VAR_1} snapped out of its\nconfusion.{PAUSE_UNTIL_PRESS}");
src/strings.c:428:const u8 gText_PkmnGotOverInfatuation[] = _("{STR_VAR_1} got over its\ninfatuation.{PAUSE_UNTIL_PRESS}");
src/strings.c:429:const u8 gText_PkmnTransformed[] = _("{STR_VAR_1} transformed!{PAUSE_UNTIL_PRESS}");
src/strings.c:431:const u8 gText_ItemThrownAway[] = _("The {STR_VAR_1}\nwas thrown away.{PAUSE_UNTIL_PRESS}");
src/strings.c:472:const u8 gText_PkmnCantParticipate[] = _("That POKéMON can't participate.{PAUSE_UNTIL_PRESS}");
src/strings.c:479:const u8 gText_PauseUntilPress[] = _("{PAUSE_UNTIL_PRESS}");
src/strings.c:537:const u8 gText_RegisteredDataDeleted[] = _("The registered data was deleted.{PAUSE_UNTIL_PRESS}");
src/strings.c:538:const u8 gText_NoRegistry[] = _("There is no REGISTRY.{PAUSE_UNTIL_PRESS}");
src/strings.c:548:const u8 gText_NoDecorations[] = _("There are no decorations.{PAUSE_UNTIL_PRESS}");
src/strings.c:574:const u8 gText_NoDecorationsInUse[] = _("There are no decorations in use.{PAUSE_UNTIL_PRESS}");
src/strings.c:589:const u8 gText_NoItems[] = _("There are no items.{PAUSE_UNTIL_PRESS}");
src/strings.c:596:const u8 gText_NoMailHere[] = _("There's no MAIL here.{PAUSE_UNTIL_PRESS}");
src/strings.c:599:const u8 gText_BagIsFull[] = _("The BAG is full.{PAUSE_UNTIL_PRESS}");
src/strings.c:600:const u8 gText_MailToBagMessageErased[] = _("The MAIL was returned to the BAG\nwith its message erased.{PAUSE_UNTIL_PRESS}");
src/strings.c:1076:const u8 gText_QuestionPressTheAButton[] = _("question, press the A Button.");
src/strings.c:1100:const u8 gText_SaveCompletePressA[] = _("Save completed.\n{COLOR RED}“Please press the A Button.”");
src/strings.c:1317:ALIGNED(4) const u8 gText_PressingSpeed[] = _("Pressing Speed:");
src/strings.c:1326:ALIGNED(4) const u8 gText_PressesRankings[] = _("No. of Presses Rankings");
src/strings.c:1330:ALIGNED(4) const u8 gText_PressingPowerRankings[] = _("Pressing-Power Rankings");
src/strings.c:1332:const u8 gText_PressingSpeedRankings[] = _("Pressing-Speed Rankings");
src/strings.c:1416:const u8 gJPText_SelectConnectAndPressA[] = _("カードeリーダー{PLUS}の　‘つうしん'を\nえらんで　Aボタンを　おしてください"); // Unused
src/strings.c:1536:const u8 gText_PressAToLoadEvent[] = _("Press the A Button to load event.\n… … B Button: Cancel");
src/strings.c:1550:const u8 gText_PokemonOnHook[] = _("A POKéMON's on the hook!{PAUSE_UNTIL_PRESS}");
src/strings.c:1551:const u8 gText_NotEvenANibble[] = _("Not even a nibble…{PAUSE_UNTIL_PRESS}");
src/strings.c:1552:const u8 gText_ItGotAway[] = _("It got away…{PAUSE_UNTIL_PRESS}");
src/strings.c:1721:ALIGNED(4) const u8 gText_SaveCompletedPressA[] = _("Save completed.\nPlease press the A Button.");
src/decoration.c:3:#include "decompress.h"
src/decoration.c:183:static u8 gpu_pal_decompress_alloc_tag_and_upload(struct PlaceDecorationGraphicsDataBuffer *data, u8 decor);
src/decoration.c:608:        case MENU_B_PRESSED:
src/decoration.c:776:        case MENU_B_PRESSED:
src/decoration.c:1384:    gFieldCamera.spriteId = gpu_pal_decompress_alloc_tag_and_upload(data, decor);
src/decoration.c:2029:static u8 gpu_pal_decompress_alloc_tag_and_upload(struct PlaceDecorationGraphicsDataBuffer *data, u8 decor)
src/decoration.c:2048:    struct CompressedSpritePalette palette;
src/decoration.c:2055:    LZDecompressWram(GetDecorationIconPicOrPalette(decor, 0), gItemIconDecompressionBuffer);
src/decoration.c:2056:    CopyItemIconPicTo4x4Buffer(gItemIconDecompressionBuffer, gItemIcon4x4Buffer);
src/decoration.c:2063:    LoadCompressedSpritePalette(&palette);
src/recorded_battle.c:789:// Used to determine when the player is allowed to press B to end a recorded battle's playback
src/menu.c:49:    bool8 APressMuted;
src/menu.c:192:void AddTextPrinterForMessage(bool8 allowSkippingDelayWithButtonPress)
src/menu.c:195:    gTextFlags.canABSpeedUpPrint = allowSkippingDelayWithButtonPress;
src/menu.c:199:void AddTextPrinterForMessage_2(bool8 allowSkippingDelayWithButtonPress)
src/menu.c:201:    gTextFlags.canABSpeedUpPrint = allowSkippingDelayWithButtonPress;
src/menu.c:205:void AddTextPrinterWithCustomSpeedForMessage(bool8 allowSkippingDelayWithButtonPress, u8 speed)
src/menu.c:207:    gTextFlags.canABSpeedUpPrint = allowSkippingDelayWithButtonPress;
src/menu.c:910:static u8 InitMenu(u8 windowId, u8 fontId, u8 left, u8 top, u8 cursorHeight, u8 numChoices, u8 initialCursorPos, bool8 muteAPress)
src/menu.c:921:    sMenu.APressMuted = muteAPress;
src/menu.c:934:// There is no muted version of this, so the version that plays sound when A is pressed is the "Normal" one.
src/menu.c:998:        if (!sMenu.APressMuted)
src/menu.c:1004:        return MENU_B_PRESSED;
src/menu.c:1028:        if (!sMenu.APressMuted)
src/menu.c:1034:        return MENU_B_PRESSED;
src/menu.c:1056:        if (!sMenu.APressMuted)
src/menu.c:1062:        return MENU_B_PRESSED;
src/menu.c:1086:        if (!sMenu.APressMuted)
src/menu.c:1092:        return MENU_B_PRESSED;
src/menu.c:1422:        return MENU_B_PRESSED;
src/menu.c:1436:    else if (JOY_NEW(DPAD_LEFT) || GetLRKeysPressed() == MENU_L_PRESSED)
src/menu.c:1442:    else if (JOY_NEW(DPAD_RIGHT) || GetLRKeysPressed() == MENU_R_PRESSED)
src/menu.c:1463:        return MENU_B_PRESSED;
src/menu.c:1477:    else if (JOY_NEW(DPAD_LEFT) || GetLRKeysPressed() == MENU_L_PRESSED)
src/menu.c:1483:    else if (JOY_NEW(DPAD_RIGHT) || GetLRKeysPressed() == MENU_R_PRESSED)
src/menu.c:1503:        return MENU_B_PRESSED;
src/menu.c:1517:    else if (JOY_REPEAT(DPAD_ANY) == DPAD_LEFT || GetLRKeysPressedAndHeld() == MENU_L_PRESSED)
src/menu.c:1523:    else if (JOY_REPEAT(DPAD_ANY) == DPAD_RIGHT || GetLRKeysPressedAndHeld() == MENU_R_PRESSED)
src/menu.c:1545:        return MENU_B_PRESSED;
src/menu.c:1559:    else if (JOY_REPEAT(DPAD_ANY) == DPAD_LEFT || GetLRKeysPressedAndHeld() == MENU_L_PRESSED)
src/menu.c:1565:    else if (JOY_REPEAT(DPAD_ANY) == DPAD_RIGHT || GetLRKeysPressedAndHeld() == MENU_R_PRESSED)
src/menu.c:1575:u8 InitMenuInUpperLeftCorner(u8 windowId, u8 itemCount, u8 initialCursorPos, bool8 APressMuted)
src/menu.c:1586:    sMenu.APressMuted = APressMuted;
src/menu.c:1598:// There is no muted version of this function, so the version that plays sound when A is pressed is the "Normal" one.
src/menu.c:1799:void *DecompressAndCopyTileDataToVram(u8 bgId, const void *src, u32 size, u16 offset, u8 mode)
src/menu.c:1804:        void *ptr = malloc_and_decompress(src, &sizeOut);
src/menu.c:1809:            copy_decompressed_tile_data_to_vram(bgId, ptr, size, offset, mode);
src/menu.c:1817:void DecompressAndLoadBgGfxUsingHeap(u8 bgId, const void *src, u32 size, u16 offset, u8 mode)
src/menu.c:1820:    void *ptr = malloc_and_decompress(src, &sizeOut);
src/menu.c:1826:        gTasks[taskId].data[0] = copy_decompressed_tile_data_to_vram(bgId, ptr, size, offset, mode);
src/menu.c:1840:void *malloc_and_decompress(const void *src, u32 *size)
src/menu.c:1857:u16 copy_decompressed_tile_data_to_vram(u8 bgId, const void *src, u16 size, u16 offset, u8 mode)
src/region_map.c:550:            DecompressAndCopyTileDataToVram(sRegionMap->bgNum, sRegionMapBg_GfxLZ, 0, 0, 0);
src/region_map.c:558:                DecompressAndCopyTileDataToVram(sRegionMap->bgNum, sRegionMapBg_TilemapLZ, 0, 0, 1);
src/berry_fix_program.c:40:static const u8 sText_BerryProgramWillBeUpdatedPressA[] = _("The Berry Program on your POKéMON\n"
src/berry_fix_program.c:42:                                                            "{COLOR RED}{SHADOW LIGHT_RED}Press the A Button.");
src/berry_fix_program.c:45:                                                       "{COLOR RED}{SHADOW LIGHT_RED}YES: Press the A Button.\n"
src/berry_fix_program.c:146:    [SCENE_BEGIN]           = sText_BerryProgramWillBeUpdatedPressA
src/pokedex.c:5:#include "decompress.h"
src/pokedex.c:770:static const struct CompressedSpriteSheet sInterfaceSpriteSheet[] =
src/pokedex.c:1767:        //Exit menu when Start or B is pressed
src/pokedex.c:1972:        //Exit menu when Start or B is pressed
src/pokedex.c:2069:        DecompressAndLoadBgGfxUsingHeap(3, gPokedexMenu_Gfx, 0x2000, 0, 0);
src/pokedex.c:2092:        LoadCompressedSpriteSheet(&sInterfaceSpriteSheet[0]);
src/pokedex.c:3246:        DecompressAndLoadBgGfxUsingHeap(3, gPokedexMenu_Gfx, 0x2000, 0, 0);
src/pokedex.c:3544:        DecompressAndLoadBgGfxUsingHeap(3, &gPokedexMenu_Gfx, 0x2000, 0, 0);
src/pokedex.c:3738:        DecompressAndLoadBgGfxUsingHeap(3, gPokedexMenu_Gfx, 0x2000, 0, 0);
src/pokedex.c:3973:        DecompressAndLoadBgGfxUsingHeap(3, gPokedexMenu_Gfx, 0x2000, 0, 0);
src/pokedex.c:4066:        LoadCompressedPalette(lzPaletteData, OBJ_PLTT_ID(paletteNum), PLTT_SIZE_4BPP);
src/pokedex.c:4792:            DecompressAndLoadBgGfxUsingHeap(3, gPokedexSearchMenu_Gfx, 0x2000, 0, 0);
src/pokedex.c:4803:        LoadCompressedSpriteSheet(sInterfaceSpriteSheet);
src/battle_dome.c:23:#include "decompress.h"
src/battle_dome.c:905:static const struct CompressedSpriteSheet sTourneyTreeButtonsSpriteSheet[] =
src/battle_dome.c:912:static const struct CompressedSpritePalette sTourneyTreeButtonsSpritePal[] =
src/battle_dome.c:3057:        DecompressAndLoadBgGfxUsingHeap(2, gDomeTourneyInfoCard_Gfx, 0x2000, 0, 0);
src/battle_dome.c:3058:        DecompressAndLoadBgGfxUsingHeap(2, gDomeTourneyInfoCard_Tilemap, 0x2000, 0, 1);
src/battle_dome.c:3059:        DecompressAndLoadBgGfxUsingHeap(3, gDomeTourneyInfoCardBg_Tilemap, 0x800, 0, 1);
src/battle_dome.c:3060:        LoadCompressedSpriteSheet(sTourneyTreeButtonsSpriteSheet);
src/battle_dome.c:3061:        LoadCompressedPalette(gDomeTourneyTree_Pal, BG_PLTT_OFFSET, BG_PLTT_SIZE);
src/battle_dome.c:3062:        LoadCompressedPalette(gDomeTourneyTreeButtons_Pal, OBJ_PLTT_OFFSET, OBJ_PLTT_SIZE);
src/battle_dome.c:3063:        LoadCompressedPalette(gBattleWindowTextPalette, BG_PLTT_ID(15), PLTT_SIZE_4BPP);
src/battle_dome.c:3065:            LoadCompressedPalette(gDomeTourneyMatchCardBg_Pal, BG_PLTT_ID(5), PLTT_SIZE_4BPP); // Changes the moving info card bg to orange when in match card mode
src/battle_dome.c:5332:        LZDecompressWram(gDomeTourneyTree_Tilemap, sTilemapBuffer);
src/battle_dome.c:5335:        DecompressAndLoadBgGfxUsingHeap(1, gDomeTourneyTree_Gfx, 0x2000, 0, 0);
src/battle_dome.c:5336:        DecompressAndLoadBgGfxUsingHeap(2, gDomeTourneyLine_Gfx, 0x2000, 0, 0);
src/battle_dome.c:5337:        DecompressAndLoadBgGfxUsingHeap(2, gDomeTourneyLineDown_Tilemap, 0x2000, 0, 1);
src/battle_dome.c:5338:        DecompressAndLoadBgGfxUsingHeap(3, gDomeTourneyLineUp_Tilemap, 0x2000, 0, 1);
src/battle_dome.c:5339:        LoadCompressedPalette(gDomeTourneyTree_Pal, BG_PLTT_OFFSET, BG_PLTT_SIZE);
src/battle_dome.c:5340:        LoadCompressedPalette(gDomeTourneyTreeButtons_Pal, OBJ_PLTT_OFFSET, OBJ_PLTT_SIZE);
src/battle_dome.c:5341:        LoadCompressedPalette(gBattleWindowTextPalette, BG_PLTT_ID(15), PLTT_SIZE_4BPP);
src/battle_dome.c:5350:        LoadCompressedSpriteSheet(sTourneyTreeButtonsSpriteSheet);
src/secret_base.c:1040:    case MENU_B_PRESSED:
src/link_rfu_3.c:3:#include "decompress.h"
src/link_rfu_3.c:295:static const struct CompressedSpriteSheet sWirelessStatusIndicatorSpriteSheet = {
src/link_rfu_3.c:792:        LoadCompressedSpriteSheet(&sWirelessStatusIndicatorSpriteSheet);
src/braille.c:18:static void DecompressGlyph_Braille(u16);
src/braille.c:97:            case EXT_CTRL_CODE_PAUSE_UNTIL_PRESS:
src/braille.c:138:        DecompressGlyph_Braille(char_);
src/braille.c:198:static void DecompressGlyph_Braille(u16 glyph)
src/braille.c:201:    DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
src/braille.c:202:    DecompressGlyphTile(glyphs + 0x8, gCurGlyph.gfxBufferTop + 8);
src/braille.c:203:    DecompressGlyphTile(glyphs + 0x80, gCurGlyph.gfxBufferBottom);
src/braille.c:204:    DecompressGlyphTile(glyphs + 0x88, gCurGlyph.gfxBufferBottom + 8);
src/mystery_gift_client.c:3:#include "decompress.h"
src/mystery_gift_client.c:239:        memcpy(gDecompressionBuffer, client->recvBuffer, MG_LINK_BUFFER_SIZE);
src/mystery_gift_client.c:280:    u32 (*func)(u32 *, struct SaveBlock2 *, struct SaveBlock1 *) = (void *)gDecompressionBuffer;
src/battle_pyramid_bag.c:6:#include "decompress.h"
src/battle_pyramid_bag.c:361:static const struct CompressedSpriteSheet sSpriteSheet_PyramidBag = {gBattlePyramidBag_Gfx, 0x0800, TAG_PYRAMID_BAG};
src/battle_pyramid_bag.c:570:        DecompressAndCopyTileDataToVram(2, gBagScreen_Gfx, 0, 0, 0);
src/battle_pyramid_bag.c:576:            LZDecompressWram(gBattlePyramidBagTilemap, gPyramidBagMenu->tilemapBuffer);
src/battle_pyramid_bag.c:581:        LoadCompressedPalette(gBattlePyramidBagInterface_Pal, BG_PLTT_ID(0), PLTT_SIZE_4BPP);
src/battle_pyramid_bag.c:585:        LoadCompressedSpriteSheet(&sSpriteSheet_PyramidBag);
src/battle_pyramid_bag.c:1000:        case MENU_B_PRESSED:
src/battle_pyramid_bag.c:1034:        else if (JOY_NEW(DPAD_LEFT) || GetLRKeysPressed() == MENU_L_PRESSED)
src/battle_pyramid_bag.c:1042:        else if (JOY_NEW(DPAD_RIGHT) || GetLRKeysPressed() == MENU_R_PRESSED)
src/battle_pyramid_bag.c:1542:    LZDecompressWram(gBattlePyramidBag_Pal, palPtr);
src/dodrio_berry_picking.c:4978:        // Increment state only if A or B button have been pressed.
src/dodrio_berry_picking.c:5202:        DecompressAndCopyTileDataToVram(BG_SCENERY, sBg_Gfx, 0, 0, 0);
src/dodrio_berry_picking.c:5205:        DecompressAndCopyTileDataToVram(BG_TREE_LEFT, sTreeBorder_Gfx, 0, 0, 0);
src/battle_anim_effects_3.c:8:#include "decompress.h"
src/battle_anim_effects_3.c:2473:        AnimLoadCompressedBgTilemapHandleContest(&animBg, &gBattleAnimMaskTilemap_LightBeam, FALSE);
src/battle_anim_effects_3.c:2489:        AnimLoadCompressedBgGfx(animBg.bgId, gBattleAnimMaskImage_LightBeam, animBg.tilesOffset);
src/battle_anim_effects_3.c:2490:        LoadCompressedPalette(gBattleAnimMaskPalette_LightBeam, BG_PLTT_ID(animBg.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_effects_3.c:2654:        AnimLoadCompressedBgTilemapHandleContest(&animBg, &gBattleAnimMaskTilemap_LightBeam, FALSE);
src/battle_anim_effects_3.c:2685:        AnimLoadCompressedBgGfx(animBg.bgId, gBattleAnimMaskImage_LightBeam, animBg.tilesOffset);
src/battle_anim_effects_3.c:2686:        LoadCompressedPalette(gBattleAnimMaskPalette_LightBeam, BG_PLTT_ID(animBg.paletteId), PLTT_SIZE_4BPP);
src/bike.c:1022:    // because the player pressed a direction, it won't ever return a speed of 0 since this function returns the player's current speed.
src/mauville_old_man.c:1367:        if (selection == MENU_B_PRESSED || selection == GetFreeStorySlot())
src/link_rfu_2.c:5:#include "decompress.h"
src/contest_painting.c:9:#include "decompress.h"
src/contest_painting.c:367:    LZDecompressVram(pal, gContestPaintingMonPalette);
src/battle_script_commands.c:994:    [MOVE_BODY_PRESS] = FORBIDDEN_METRONOME,
src/battle_script_commands.c:1563:        PressurePPLose(gBattlerAttacker, gBattlerTarget, MOVE_MAGIC_COAT);
src/battle_script_commands.c:1597:            PressurePPLose(gBattlerAttacker, gBattlerByTurnOrder[i], MOVE_SNATCH);
src/battle_script_commands.c:1954:    if (!gSpecialStatuses[gBattlerAttacker].ppNotAffectedByPressure)
src/battle_script_commands.c:1962:                    ppToDeduct += (GetBattlerAbility(i) == ABILITY_PRESSURE);
src/battle_script_commands.c:1970:                    ppToDeduct += (GetBattlerAbility(i) == ABILITY_PRESSURE);
src/battle_script_commands.c:1974:            if (gBattlerAttacker != gBattlerTarget && GetBattlerAbility(gBattlerTarget) == ABILITY_PRESSURE)
src/battle_script_commands.c:8863:    case VARIOUS_ACUPRESSURE:
src/battle_script_commands.c:11275:        gSpecialStatuses[gBattlerAttacker].ppNotAffectedByPressure = TRUE;
src/battle_script_commands.c:12891:        gSpecialStatuses[gBattlerAttacker].ppNotAffectedByPressure = TRUE;
src/battle_script_commands.c:12919:        gSpecialStatuses[gBattlerAttacker].ppNotAffectedByPressure = TRUE;
src/battle_script_commands.c:13449:        gSpecialStatuses[gBattlerAttacker].ppNotAffectedByPressure = TRUE;
src/battle_script_commands.c:13490:    PressurePPLoseOnUsingPerishSong(gBattlerAttacker);
src/battle_script_commands.c:14587:        PressurePPLoseOnUsingImprison(gBattlerAttacker);
src/battle_script_commands.c:14709:    gSpecialStatuses[gBattlerAttacker].ppNotAffectedByPressure = TRUE;
src/battle_script_commands.c:14726:    gSpecialStatuses[gBattlerAttacker].ppNotAffectedByPressure = TRUE;
src/battle_script_commands.c:16050:        gSpecialStatuses[gBattlerAttacker].ppNotAffectedByPressure = TRUE;
src/roulette.c:5:#include "decompress.h"
src/roulette.c:1100:    sRoulette->gridTilemap = malloc_and_decompress(sGrid_Tilemap, &size);
src/roulette.c:1199:        DecompressAndCopyTileDataToVram(1, gRouletteMenu_Gfx, 0, 0, 0);
src/roulette.c:1200:        DecompressAndCopyTileDataToVram(2, gRouletteWheel_Gfx, 0, 0, 0);
src/roulette.c:1436:    bool8 dirPressed = FALSE;
src/roulette.c:1437:    if ((!(JOY_NEW(DPAD_UP))    || ((dirPressed = TRUE) && CanMoveSelectionInDir(&gTasks[taskId].tSelectionId, 0)))
src/roulette.c:1438:     && (!(JOY_NEW(DPAD_DOWN))  || ((dirPressed = TRUE) && CanMoveSelectionInDir(&gTasks[taskId].tSelectionId, 1)))
src/roulette.c:1439:     && (!(JOY_NEW(DPAD_LEFT))  || ((dirPressed = TRUE) && CanMoveSelectionInDir(&gTasks[taskId].tSelectionId, 2)))
src/roulette.c:1440:     && (!(JOY_NEW(DPAD_RIGHT)) || ((dirPressed = TRUE) && CanMoveSelectionInDir(&gTasks[taskId].tSelectionId, 3)))
src/roulette.c:1441:     && (dirPressed))
src/roulette.c:2416:static const struct CompressedSpriteSheet sSpriteSheet_WheelIcons =
src/roulette.c:2500:static const struct CompressedSpriteSheet sSpriteSheet_Headers =
src/roulette.c:2507:static const struct CompressedSpriteSheet sSpriteSheet_GridIcons =
src/roulette.c:2855:static const struct CompressedSpriteSheet sSpriteSheets_Interface[] =
src/roulette.c:3004:static const struct CompressedSpriteSheet sSpriteSheet_Ball = {
src/roulette.c:3114:static const struct CompressedSpriteSheet sSpriteSheet_WheelCenter =
src/roulette.c:3150:static const struct CompressedSpriteSheet sSpriteSheet_ShroomishTaillow =
src/roulette.c:3272:static const struct CompressedSpriteSheet sSpriteSheet_Shadow =
src/roulette.c:3490:        LoadCompressedSpriteSheet(&sSpriteSheet_Ball);
src/roulette.c:3491:        LoadCompressedSpriteSheet(&sSpriteSheet_ShroomishTaillow);
src/roulette.c:3492:        LoadCompressedSpriteSheet(&sSpriteSheet_Shadow);
src/roulette.c:3525:    LZ77UnCompWram(sSpriteSheet_Headers.data, gDecompressionBuffer);
src/roulette.c:3526:    s.data = gDecompressionBuffer;
src/roulette.c:3530:    LZ77UnCompWram(sSpriteSheet_GridIcons.data, gDecompressionBuffer);
src/roulette.c:3531:    s.data = gDecompressionBuffer;
src/roulette.c:3662:    LZ77UnCompWram(sSpriteSheet_WheelIcons.data, gDecompressionBuffer);
src/roulette.c:3663:    s.data = gDecompressionBuffer;
src/roulette.c:3707:        LZ77UnCompWram(sSpriteSheets_Interface[i].data, gDecompressionBuffer);
src/roulette.c:3708:        s.data = gDecompressionBuffer;
src/roulette.c:3855:    LZ77UnCompWram(sSpriteSheet_WheelCenter.data, gDecompressionBuffer);
src/roulette.c:3856:    s.data = gDecompressionBuffer;
src/berry_crush.c:6:#include "decompress.h"
src/berry_crush.c:120:    STATE_RESULTS_PRESSES,
src/berry_crush.c:127:#define RESULTS_STATE_START STATE_RESULTS_PRESSES
src/berry_crush.c:131:// Only 3 pages are shown for a given game. Presses and Crushing are always shown 1st and 3rd.
src/berry_crush.c:134:    RESULTS_PAGE_PRESSES,
src/berry_crush.c:141:// "Cooperative" is how often the player pressed A at the same time as others
src/berry_crush.c:142:// "Power" is how much of the time the player spent pressing A
src/berry_crush.c:182:// Data is only sent if the player is the leader or if they pressed A
src/berry_crush.c:193:    u16 numAPresses;
src/berry_crush.c:194:    u16 numSyncedAPresses;
src/berry_crush.c:195:    u16 timePressingA;
src/berry_crush.c:207:    u8 playerPressedAFlags:5; // 1 bit for each player
src/berry_crush.c:224:    u8 playerPressedAFlags:5;
src/berry_crush.c:236:    u16 targetPressesPerSec; // Never read
src/berry_crush.c:238:    u16 totalAPresses;
src/berry_crush.c:297:    u16 pressingSpeed;
src/berry_crush.c:298:    s16 targetAPresses;
src/berry_crush.c:299:    s16 totalAPresses;
src/berry_crush.c:382:// Additional A presses are counted depending on the number of players
src/berry_crush.c:384:static const u8 sSyncPressBonus[MAX_RFU_PLAYERS] = { 0, 1, 2, 3, 5 };
src/berry_crush.c:532:    [STATE_RESULTS_PRESSES - RESULTS_STATE_START] = {
src/berry_crush.c:566:    {6, 8, 9, 11},    // "Presses" and "Neatness/Cooperative/Power" pages
src/berry_crush.c:570:static const u32 sPressingSpeedConversionTable[] =
src/berry_crush.c:684:// sTimerDigits_Gfx is part of this array but is (apparently) uncompressed
src/berry_crush.c:685:// It gets cast to raw uncompressed data when used in sDigitObjTemplates
src/berry_crush.c:686:static const struct CompressedSpriteSheet sSpriteSheets[] =
src/berry_crush.c:908:    [RESULTS_PAGE_PRESSES]  = gText_SpaceTimes2, // " times"
src/berry_crush.c:914:    [RESULTS_PAGE_POWER + NUM_RESULTS_PAGES]       = gText_PressingPowerRankings,
src/berry_crush.c:947:// Per group size, the number of A presses required to increase the number of sparkles.
src/berry_crush.c:956:// Per group size, the number of A presses required to get big sparkles
src/berry_crush.c:1072:    u32 time, presses;
src/berry_crush.c:1074:    // Calculate pressing speed ((time / 60) / presses)
src/berry_crush.c:1078:    presses = sGame->results.totalAPresses;
src/berry_crush.c:1079:    presses = Q_24_8(presses);
src/berry_crush.c:1080:    presses = MathUtil_Div32(presses, time) & 0xFFFF;
src/berry_crush.c:1081:    sGame->pressingSpeed = presses;
src/berry_crush.c:1086:        if (sGame->pressingSpeed > gSaveBlock2Ptr->berryCrush.pressingSpeeds[0])
src/berry_crush.c:1090:            gSaveBlock2Ptr->berryCrush.pressingSpeeds[0] = sGame->pressingSpeed;
src/berry_crush.c:1094:        if (sGame->pressingSpeed > gSaveBlock2Ptr->berryCrush.pressingSpeeds[1])
src/berry_crush.c:1098:            gSaveBlock2Ptr->berryCrush.pressingSpeeds[1] = sGame->pressingSpeed;
src/berry_crush.c:1102:        if (sGame->pressingSpeed > gSaveBlock2Ptr->berryCrush.pressingSpeeds[2])
src/berry_crush.c:1106:            gSaveBlock2Ptr->berryCrush.pressingSpeeds[2] = sGame->pressingSpeed;
src/berry_crush.c:1110:        if (sGame->pressingSpeed > gSaveBlock2Ptr->berryCrush.pressingSpeeds[3])
src/berry_crush.c:1114:            gSaveBlock2Ptr->berryCrush.pressingSpeeds[3] = sGame->pressingSpeed;
src/berry_crush.c:1225:        DecompressAndCopyTileDataToVram(1, gBerryCrush_Crusher_Gfx, 0, 0, 0);
src/berry_crush.c:1468:    u8 numPlayersPressed;
src/berry_crush.c:1473:    numPlayersPressed = 0;
src/berry_crush.c:1485:            numPlayersPressed++;
src/berry_crush.c:1500:    if (numPlayersPressed == 0)
src/berry_crush.c:1539:            if (numPlayersPressed == 1)
src/berry_crush.c:1586:            fractionalFrames += sPressingSpeedConversionTable[i];
src/berry_crush.c:1624:        case RESULTS_PAGE_PRESSES:
src/berry_crush.c:1640:                    xOffset += sPressingSpeedConversionTable[j];
src/berry_crush.c:1672:    u32 pressingSpeedFrac = 0;
src/berry_crush.c:1702:    // Print pressing speed text
src/berry_crush.c:1704:    AddTextPrinterParameterized3(game->gfx.resultsWindowId, FONT_SHORT, 0, y, sTextColorTable[COLORID_GRAY], 0, gText_PressingSpeed);
src/berry_crush.c:1708:    // Print pressing speed value
src/berry_crush.c:1710:        if (((u8)game->pressingSpeed >> (7 - i)) & 1)
src/berry_crush.c:1711:            pressingSpeedFrac += *(i + sPressingSpeedConversionTable); // It's accessed in a different way here for unknown reason
src/berry_crush.c:1712:    ConvertIntToDecimalStringN(gStringVar1, game->pressingSpeed >> 8, STR_CONV_MODE_RIGHT_ALIGN, 3);
src/berry_crush.c:1713:    ConvertIntToDecimalStringN(gStringVar2, pressingSpeedFrac / 1000000, STR_CONV_MODE_LEADING_ZEROS, 2);
src/berry_crush.c:1761:        case STATE_RESULTS_PRESSES:
src/berry_crush.c:1762:            PrintTextCentered(gfx->resultsWindowId, 20, COLORID_BLUE, gText_PressesRankings);
src/berry_crush.c:1763:            PrintResultsText(game, RESULTS_PAGE_PRESSES, 0xA0, 8 * sResultsWindowHeights[0][playerCountIdx]);
src/berry_crush.c:1798:#define tPressingSpeeds(i) data[2 + (i)] // data[2]-[5], for different group sizes
src/berry_crush.c:1819:        xPos = 96 - GetStringWidth(FONT_NORMAL, gText_PressingSpeedRankings, -1) / 2u;
src/berry_crush.c:1820:        AddTextPrinterParameterized3(tWindowId, FONT_NORMAL, xPos, 17, sTextColorTable[COLORID_BLUE], 0, gText_PressingSpeedRankings);
src/berry_crush.c:1822:        // Print pressing speed record for each group size, ranked
src/berry_crush.c:1833:                if (((tPressingSpeeds(i) & 0xFF) >> (7 - j)) & 1)
src/berry_crush.c:1834:                    score += sPressingSpeedConversionTable[j];
src/berry_crush.c:1836:            ConvertIntToDecimalStringN(gStringVar1, (u16)tPressingSpeeds(i) >> 8, STR_CONV_MODE_RIGHT_ALIGN, 3);
src/berry_crush.c:1870:    gTasks[taskId].tPressingSpeeds(0) = gSaveBlock2Ptr->berryCrush.pressingSpeeds[0];
src/berry_crush.c:1871:    gTasks[taskId].tPressingSpeeds(1) = gSaveBlock2Ptr->berryCrush.pressingSpeeds[1];
src/berry_crush.c:1872:    gTasks[taskId].tPressingSpeeds(2) = gSaveBlock2Ptr->berryCrush.pressingSpeeds[2];
src/berry_crush.c:1873:    gTasks[taskId].tPressingSpeeds(3) = gSaveBlock2Ptr->berryCrush.pressingSpeeds[3];
src/berry_crush.c:1952:    LZ77UnCompWram(gBerryCrush_TextWindows_Tilemap, gDecompressionBuffer);
src/berry_crush.c:1954:    for (windowGfx = gDecompressionBuffer; i < game->playerCount; i++)
src/berry_crush.c:1978:        LoadCompressedSpriteSheet(&sSpriteSheets[i]);
src/berry_crush.c:2397:            game->targetAPresses += gBerryCrush_BerryData[game->players[i].berryId].difficulty;
src/berry_crush.c:2402:        game->targetDepth = MathUtil_Div32(Q_24_8(game->targetAPresses), Q_24_8(32));
src/berry_crush.c:2557:    u8 numPlayersPressed = 0;
src/berry_crush.c:2575:            game->localState.playerPressedAFlags |= sBitTable[i];
src/berry_crush.c:2577:            game->players[i].numAPresses++;
src/berry_crush.c:2578:            numPlayersPressed++;
src/berry_crush.c:2609:    if (numPlayersPressed > 1)
src/berry_crush.c:2611:        // For each player that pressed A, flag their input as synchronous
src/berry_crush.c:2618:            game->players[i].numSyncedAPresses++;
src/berry_crush.c:2621:    if (numPlayersPressed == 0)
src/berry_crush.c:2624:    game->bigSparkleCounter += numPlayersPressed;
src/berry_crush.c:2625:    numPlayersPressed += sSyncPressBonus[numPlayersPressed - 1];
src/berry_crush.c:2626:    game->sparkleCounter += numPlayersPressed;
src/berry_crush.c:2627:    game->totalAPresses += numPlayersPressed;
src/berry_crush.c:2628:    if (game->targetAPresses - game->totalAPresses > 0)
src/berry_crush.c:2630:        temp = (s32)game->totalAPresses;
src/berry_crush.c:2638:    // Target number of A presses has been reached, game is complete
src/berry_crush.c:2647:    u8 numPlayersPressed = 0;
src/berry_crush.c:2656:            numPlayersPressed++;
src/berry_crush.c:2666:    if (numPlayersPressed == 0)
src/berry_crush.c:2673:        if (numPlayersPressed != game->gfx.vibrationIdx)
src/berry_crush.c:2675:            game->gfx.vibrationIdx = numPlayersPressed - 1;
src/berry_crush.c:2676:            game->gfx.numVibrations = sVibrationData[numPlayersPressed - 1][0];
src/berry_crush.c:2686:        game->gfx.vibrationIdx = numPlayersPressed - 1;
src/berry_crush.c:2687:        game->gfx.numVibrations = sVibrationData[numPlayersPressed - 1][0];
src/berry_crush.c:2722:        if (game->players[game->localId].timePressingA < game->timer)
src/berry_crush.c:2723:            game->players[game->localId].timePressingA++;
src/berry_crush.c:2726:    // Only send data to other players if you are the leader or you pressed A
src/berry_crush.c:2732:    // depending on how many A presses there were in that time
src/berry_crush.c:2749:    // depending on how many A presses there were in that time (including the bonus)
src/berry_crush.c:2784:            else if (game->localState.playerPressedAFlags == 0)
src/berry_crush.c:3001:        if (game->players[game->localId].timePressingA > game->timer)
src/berry_crush.c:3002:            game->players[game->localId].timePressingA = game->timer;
src/berry_crush.c:3003:        game->sendCmd[0] = game->players[game->localId].timePressingA;
src/berry_crush.c:3015:            game->players[i].timePressingA = gBlockRecvBuffer[i][0];
src/berry_crush.c:3033:        game->results.targetPressesPerSec = game->targetAPresses / (game->timer / 60);
src/berry_crush.c:3037:        // which itself depends on the number of A presses every 30 frames
src/berry_crush.c:3055:            game->results.playerIdsRanked[RESULTS_PAGE_PRESSES][i] = i;
src/berry_crush.c:3057:            game->results.stats[RESULTS_PAGE_PRESSES][i] = game->players[i].numAPresses;
src/berry_crush.c:3058:            game->results.totalAPresses += game->results.stats[RESULTS_PAGE_PRESSES][i];
src/berry_crush.c:3064:                if (game->players[i].numAPresses != 0)
src/berry_crush.c:3071:                    temp2 = game->players[i].numAPresses;
src/berry_crush.c:3081:                if (game->players[i].numAPresses != 0)
src/berry_crush.c:3085:                    temp1 = game->players[i].numSyncedAPresses;
src/berry_crush.c:3088:                    temp2 = game->players[i].numAPresses;
src/berry_crush.c:3098:                if (game->players[i].numAPresses == 0)
src/berry_crush.c:3102:                else if (game->players[i].timePressingA >= game->timer)
src/berry_crush.c:3104:                    // Spent 100% of the time pressing A
src/berry_crush.c:3110:                    // player spent pressing A
src/berry_crush.c:3111:                    temp1 = game->players[i].timePressingA;
src/berry_crush.c:3129:                // Calculate player rankings for "Number of Presses" by sorting arrays
src/berry_crush.c:3130:                if (game->results.stats[RESULTS_PAGE_PRESSES][j - 1] < game->results.stats[RESULTS_PAGE_PRESSES][j])
src/berry_crush.c:3132:                    SWAP(game->results.stats[RESULTS_PAGE_PRESSES][j],
src/berry_crush.c:3133:                         game->results.stats[RESULTS_PAGE_PRESSES][j - 1],
src/berry_crush.c:3135:                    SWAP(game->results.playerIdsRanked[RESULTS_PAGE_PRESSES][j],
src/berry_crush.c:3136:                         game->results.playerIdsRanked[RESULTS_PAGE_PRESSES][j - 1],
src/berry_crush.c:3171:        game->gameState = STATE_RESULTS_PRESSES;
src/berry_crush.c:3458:    game->targetAPresses = 0;
src/berry_crush.c:3459:    game->totalAPresses = 0;
src/berry_crush.c:3481:        game->players[i].numAPresses = 0;
src/berry_crush.c:3482:        game->players[i].numSyncedAPresses = 0;
src/berry_crush.c:3483:        game->players[i].timePressingA = 0;
src/reshow_battle_screen.c:195:            DecompressTrainerBackPic(gSaveBlock2Ptr->playerGender, battler);
src/reshow_battle_screen.c:197:            DecompressTrainerBackPic(TRAINER_BACK_PIC_WALLY, battler);
src/battle_interface.c:14:#include "decompress.h"
src/battle_interface.c:493:static const struct CompressedSpriteSheet sStatusSummaryBarSpriteSheet =
src/battle_interface.c:1683:    LoadCompressedSpriteSheetUsingHeap(&sStatusSummaryBarSpriteSheet);
src/battle_transition.c:6:#include "decompress.h"
src/battle_transition.c:2586:                                                  0, gDecompressionBuffer);
src/battle_transition.c:2590:                                                0, gDecompressionBuffer);
src/mystery_event_menu.c:20:#include "decompress.h"
src/mystery_event_menu.c:165:            PrintMysteryMenuText(WIN_MSG, gText_PressAToLoadEvent, 1, 2, 1);
src/mystery_event_menu.c:260:            u16 status = RunMysteryEventScript(gDecompressionBuffer);
src/mystery_event_menu.c:261:            CpuFill32(0, gDecompressionBuffer, 0x7D4);
src/data/pokemon/pokedex_text.h:1268:    "A Qwilfish uses the pressure of water\n"
src/data/pokemon/pokedex_text.h:1485:    "that it ejects under compression to propel\n"
src/data/pokemon/pokedex_text.h:1805:    "express one's feelings of love.");
src/data/pokemon/pokedex_text.h:2096:    "To withstand the crushing pressure of\n"
src/data/pokemon/pokedex_text.h:3101:    "It can shoot highly-pressurised water\n"
src/data/pokemon/pokedex_text.h:3958:    "stars made of compressed water.");
src/data/pokemon/pokedex_text.h:4226:    "pressures deep underground, it defends\n"
src/data/pokemon/pokedex_text.h:4701:    "It expresses its feelings by smacking its\n"
src/data/pokemon/pokedex_entries.h:6320:        .categoryName = _("Compressed"),
src/data/pokemon/egg_moves.h:381:        MOVE_ACUPRESSURE,
src/data/pokemon/egg_moves.h:443:        MOVE_FIRST_IMPRESSION,
src/data/pokemon/egg_moves.h:1297:        MOVE_ACUPRESSURE,
src/data/pokemon/egg_moves.h:2823:        MOVE_ACUPRESSURE,
src/data/pokemon/egg_moves.h:3953:        MOVE_ACUPRESSURE),
src/data/pokemon/egg_moves.h:4149:        MOVE_ACUPRESSURE,
src/data/pokemon/level_up_learnsets.h:1598:    LEVEL_UP_MOVE(33, MOVE_ACUPRESSURE),
src/data/pokemon/level_up_learnsets.h:1622:    LEVEL_UP_MOVE(34, MOVE_ACUPRESSURE),
src/data/pokemon/level_up_learnsets.h:6745:    LEVEL_UP_MOVE(33, MOVE_ACUPRESSURE),
src/data/pokemon/level_up_learnsets.h:6773:    LEVEL_UP_MOVE(33, MOVE_ACUPRESSURE),
src/data/pokemon/level_up_learnsets.h:9095:    LEVEL_UP_MOVE(13, MOVE_ACUPRESSURE),
src/data/pokemon/level_up_learnsets.h:9120:    LEVEL_UP_MOVE(13, MOVE_ACUPRESSURE),
src/data/pokemon/level_up_learnsets.h:11243:    LEVEL_UP_MOVE(29, MOVE_ACUPRESSURE),
src/data/pokemon/level_up_learnsets.h:14319:    LEVEL_UP_MOVE(28, MOVE_FLYING_PRESS),
src/data/pokemon/level_up_learnsets.h:15680:    LEVEL_UP_MOVE( 0, MOVE_FIRST_IMPRESSION),
src/data/pokemon/level_up_learnsets.h:15681:    LEVEL_UP_MOVE( 1, MOVE_FIRST_IMPRESSION),
src/data/pokemon/level_up_learnsets.h:17471:    LEVEL_UP_MOVE( 1, MOVE_FIRST_IMPRESSION),
src/data/pokemon/level_up_learnsets.h:17591:    LEVEL_UP_MOVE(35, MOVE_FIRST_IMPRESSION),
src/data/pokemon/level_up_learnsets.h:17613:    LEVEL_UP_MOVE(55, MOVE_ACUPRESSURE),
src/data/pokemon/species_info.h:4127:        .abilities = {ABILITY_ROCK_HEAD, ABILITY_PRESSURE, ABILITY_UNNERVE},
src/data/pokemon/species_info.h:4173:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_SNOW_CLOAK},
src/data/pokemon/species_info.h:4197:            .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_STATIC},
src/data/pokemon/species_info.h:4199:            .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_LIGHTNING_ROD},
src/data/pokemon/species_info.h:4223:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_FLAME_BODY},
src/data/pokemon/species_info.h:4315:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_UNNERVE},
src/data/pokemon/species_info.h:6435:            .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_INNER_FOCUS},
src/data/pokemon/species_info.h:6437:            .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_VOLT_ABSORB},
src/data/pokemon/species_info.h:6463:            .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_INNER_FOCUS},
src/data/pokemon/species_info.h:6465:            .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_FLASH_FIRE},
src/data/pokemon/species_info.h:6491:            .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_INNER_FOCUS},
src/data/pokemon/species_info.h:6493:            .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_WATER_ABSORB},
src/data/pokemon/species_info.h:6583:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_MULTISCALE},
src/data/pokemon/species_info.h:6608:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_REGENERATOR},
src/data/pokemon/species_info.h:8266:        .abilities = {ABILITY_WATER_VEIL, ABILITY_OBLIVIOUS, ABILITY_PRESSURE},
src/data/pokemon/species_info.h:8288:        .abilities = {ABILITY_WATER_VEIL, ABILITY_OBLIVIOUS, ABILITY_PRESSURE},
src/data/pokemon/species_info.h:9082:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_FRISK},
src/data/pokemon/species_info.h:9156:        .abilities = {ABILITY_PRESSURE, ABILITY_SUPER_LUCK, ABILITY_JUSTIFIED},
src/data/pokemon/species_info.h:9780:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE},
src/data/pokemon/species_info.h:10452:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_UNNERVE},
src/data/pokemon/species_info.h:10977:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_INFILTRATOR},
src/data/pokemon/species_info.h:11409:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_PICKPOCKET},
src/data/pokemon/species_info.h:11779:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_FRISK},
src/data/pokemon/species_info.h:11919:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_TELEPATHY},
src/data/pokemon/species_info.h:11942:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_TELEPATHY},
src/data/pokemon/species_info.h:12011:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_TELEPATHY},
src/data/pokemon/species_info.h:15128:        .abilities = {ABILITY_DEFIANT, ABILITY_INNER_FOCUS, ABILITY_PRESSURE},
src/data/pokemon/species_info.h:15150:        .abilities = {ABILITY_DEFIANT, ABILITY_INNER_FOCUS, ABILITY_PRESSURE},
src/data/pokemon/species_info.h:15624:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE},
src/data/pokemon/species_info.h:19339:        .abilities = {ABILITY_PRESSURE, ABILITY_UNNERVE, ABILITY_MIRROR_ARMOR},
src/data/pokemon/species_info.h:20702:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE},
src/data/pokemon/species_info.h:20978:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_POISON_TOUCH},
src/data/pokemon/species_info.h:23524:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE},
src/data/pokemon/species_info.h:23547:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE},
src/data/pokemon/species_info.h:23569:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE},
src/data/pokemon/species_info.h:23654:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_TELEPATHY},
src/data/pokemon/species_info.h:23677:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE, ABILITY_TELEPATHY},
src/data/pokemon/species_info.h:24614:        .abilities = {ABILITY_PRESSURE, ABILITY_NONE},
src/data/tilesets/graphics.h:684:const u32 gTilesetTiles_SecretBaseBrownCaveCompressed[] = INCBIN_U32("data/tilesets/secondary/secret_base/brown_cave/unused_tiles.4bpp.lz");
src/data/tilesets/graphics.h:706:const u32 gTilesetTiles_SecretBaseTreeCompressed[] = INCBIN_U32("data/tilesets/secondary/secret_base/tree/unused_tiles.4bpp.lz");
src/data/tilesets/graphics.h:728:const u32 gTilesetTiles_SecretBaseShrubCompressed[] = INCBIN_U32("data/tilesets/secondary/secret_base/shrub/unused_tiles.4bpp.lz");
src/data/tilesets/graphics.h:750:const u32 gTilesetTiles_SecretBaseBlueCaveCompressed[] = INCBIN_U32("data/tilesets/secondary/secret_base/blue_cave/unused_tiles.4bpp.lz");
src/data/tilesets/graphics.h:772:const u32 gTilesetTiles_SecretBaseYellowCaveCompressed[] = INCBIN_U32("data/tilesets/secondary/secret_base/yellow_cave/unused_tiles.4bpp.lz");
src/data/tilesets/graphics.h:794:const u32 gTilesetTiles_SecretBaseRedCaveCompressed[] = INCBIN_U32("data/tilesets/secondary/secret_base/red_cave/unused_tiles.4bpp.lz");
src/data/tilesets/headers.h:3:    .isCompressed = TRUE,
src/data/tilesets/headers.h:14:    .isCompressed = TRUE,
src/data/tilesets/headers.h:25:    .isCompressed = TRUE,
src/data/tilesets/headers.h:36:    .isCompressed = TRUE,
src/data/tilesets/headers.h:47:    .isCompressed = TRUE,
src/data/tilesets/headers.h:58:    .isCompressed = TRUE,
src/data/tilesets/headers.h:69:    .isCompressed = TRUE,
src/data/tilesets/headers.h:80:    .isCompressed = TRUE,
src/data/tilesets/headers.h:91:    .isCompressed = TRUE,
src/data/tilesets/headers.h:102:    .isCompressed = TRUE,
src/data/tilesets/headers.h:113:    .isCompressed = TRUE,
src/data/tilesets/headers.h:124:    .isCompressed = TRUE,
src/data/tilesets/headers.h:135:    .isCompressed = TRUE,
src/data/tilesets/headers.h:146:    .isCompressed = TRUE,
src/data/tilesets/headers.h:157:    .isCompressed = TRUE,
src/data/tilesets/headers.h:168:    .isCompressed = TRUE,
src/data/tilesets/headers.h:179:    .isCompressed = TRUE,
src/data/tilesets/headers.h:190:    .isCompressed = TRUE,
src/data/tilesets/headers.h:201:    .isCompressed = TRUE,
src/data/tilesets/headers.h:212:    .isCompressed = TRUE,
src/data/tilesets/headers.h:223:    .isCompressed = TRUE,
src/data/tilesets/headers.h:234:    .isCompressed = TRUE,
src/data/tilesets/headers.h:245:    .isCompressed = TRUE,
src/data/tilesets/headers.h:256:    .isCompressed = TRUE,
src/data/tilesets/headers.h:267:    .isCompressed = TRUE,
src/data/tilesets/headers.h:278:    .isCompressed = FALSE,
src/data/tilesets/headers.h:289:    .isCompressed = TRUE,
src/data/tilesets/headers.h:300:    .isCompressed = TRUE,
src/data/tilesets/headers.h:311:    .isCompressed = TRUE,
src/data/tilesets/headers.h:322:    .isCompressed = TRUE,
src/data/tilesets/headers.h:333:    .isCompressed = TRUE,
src/data/tilesets/headers.h:344:    .isCompressed = TRUE,
src/data/tilesets/headers.h:355:    .isCompressed = FALSE,
src/data/tilesets/headers.h:366:    .isCompressed = FALSE,
src/data/tilesets/headers.h:377:    .isCompressed = FALSE,
src/data/tilesets/headers.h:388:    .isCompressed = FALSE,
src/data/tilesets/headers.h:399:    .isCompressed = FALSE,
src/data/tilesets/headers.h:410:    .isCompressed = FALSE,
src/data/tilesets/headers.h:421:    .isCompressed = TRUE,
src/data/tilesets/headers.h:432:    .isCompressed = TRUE,
src/data/tilesets/headers.h:443:    .isCompressed = TRUE,
src/data/tilesets/headers.h:454:    .isCompressed = TRUE,
src/data/tilesets/headers.h:465:    .isCompressed = TRUE,
src/data/tilesets/headers.h:476:    .isCompressed = TRUE,
src/data/tilesets/headers.h:487:    .isCompressed = TRUE,
src/data/tilesets/headers.h:498:    .isCompressed = TRUE,
src/data/tilesets/headers.h:509:    .isCompressed = TRUE,
src/data/tilesets/headers.h:520:    .isCompressed = TRUE,
src/data/tilesets/headers.h:531:    .isCompressed = TRUE,
src/data/tilesets/headers.h:542:    .isCompressed = TRUE,
src/data/tilesets/headers.h:553:    .isCompressed = TRUE,
src/data/tilesets/headers.h:564:    .isCompressed = TRUE,
src/data/tilesets/headers.h:575:    .isCompressed = TRUE,
src/data/tilesets/headers.h:586:    .isCompressed = TRUE,
src/data/tilesets/headers.h:597:    .isCompressed = TRUE,
src/data/tilesets/headers.h:608:    .isCompressed = TRUE,
src/data/tilesets/headers.h:619:    .isCompressed = TRUE,
src/data/tilesets/headers.h:630:    .isCompressed = FALSE,
src/data/tilesets/headers.h:644:    .isCompressed = TRUE,
src/data/tilesets/headers.h:655:    .isCompressed = TRUE,
src/data/tilesets/headers.h:666:    .isCompressed = TRUE,
src/data/tilesets/headers.h:677:    .isCompressed = TRUE,
src/data/tilesets/headers.h:688:    .isCompressed = TRUE,
src/data/tilesets/headers.h:699:    .isCompressed = TRUE,
src/data/tilesets/headers.h:710:    .isCompressed = TRUE,
src/data/tilesets/headers.h:721:    .isCompressed = TRUE,
src/data/tilesets/headers.h:732:    .isCompressed = TRUE,
src/data/tilesets/headers.h:743:    .isCompressed = TRUE,
src/data/tilesets/headers.h:754:    .isCompressed = TRUE,
src/data/tilesets/headers.h:765:    .isCompressed = TRUE,
src/data/tilesets/headers.h:776:    .isCompressed = TRUE,
src/data/tilesets/headers.h:787:    .isCompressed = TRUE,
src/data/tilesets/headers.h:798:    .isCompressed = TRUE,
src/data/tilesets/headers.h:809:    .isCompressed = TRUE,
src/data/tilesets/headers.h:820:    .isCompressed = TRUE,
src/data/party_menu.h:895:static const struct CompressedSpriteSheet sSpriteSheet_MenuPokeball =
src/data/party_menu.h:900:static const struct CompressedSpritePalette sSpritePalette_MenuPokeball =
src/data/party_menu.h:981:static const struct CompressedSpriteSheet sSpriteSheet_MenuPokeballSmall =
src/data/party_menu.h:1075:static const struct CompressedSpriteSheet sSpriteSheet_StatusIcons =
src/data/party_menu.h:1080:static const struct CompressedSpritePalette sSpritePalette_StatusIcons =
src/data/trade.h:49:static const u8 sJPText_PressBButtonToQuit[] = _("Bボタン　で　もどります");
src/data/trade.h:185:// pressed in a given direction.
src/data/trade.h:370:    [TEXT_JP_QUIT]      = sJPText_PressBButtonToQuit
src/data/union_room.h:8:ALIGNED(4) static const u8 sText_AwaitingLinkPressStart[] = _("{STR_VAR_1}! Awaiting link!\nPress START when everyone's ready.");
src/data/battle_moves.h:6645:    [MOVE_ACUPRESSURE] =
src/data/battle_moves.h:6652:        .effect = EFFECT_ACUPRESSURE,
src/data/battle_moves.h:9999:    [MOVE_FLYING_PRESS] =
src/data/battle_moves.h:11053:    [MOVE_FIRST_IMPRESSION] =
src/data/battle_moves.h:12445:    [MOVE_BODY_PRESS] =
src/data/battle_moves.h:12447:        .effect = EFFECT_BODY_PRESS,
src/data/easy_chat/easy_chat_group_status.h:85:const u8 gEasyChatWord_Pressure[] = _("PRESSURE");
src/data/easy_chat/easy_chat_group_status.h:616:    [EC_INDEX(EC_WORD_PRESSURE)] =
src/data/easy_chat/easy_chat_group_status.h:618:        .text = gEasyChatWord_Pressure,
src/data/easy_chat/easy_chat_words_by_letter.h:1257:    EC_WORD_PRESSURE,
src/data/easy_chat/easy_chat_words_by_letter.h:2086:    EC_WORD_PRESSURE,
src/data/trainer_graphics/back_pic_tables.h:13:// this table goes functionally unused, since none of these pics are compressed
src/data/trainer_graphics/back_pic_tables.h:18:const struct CompressedSpriteSheet gTrainerBackPicTable[] =
src/data/trainer_graphics/back_pic_tables.h:32:const struct CompressedSpritePalette gTrainerBackPicPaletteTable[] =
src/data/trainer_graphics/front_pic_tables.h:100:const struct CompressedSpriteSheet gTrainerFrontPicTable[] =
src/data/trainer_graphics/front_pic_tables.h:199:const struct CompressedSpritePalette gTrainerFrontPicPaletteTable[] =
src/data/contest_moves.h:2928:    [MOVE_ACUPRESSURE] =
src/data/contest_moves.h:4472:    [MOVE_FLYING_PRESS] =
src/data/contest_moves.h:4970:    [MOVE_FIRST_IMPRESSION] =
src/data/contest_moves.h:5514:    [MOVE_BODY_PRESS] =
src/data/decoration/description.h:105:    "A large, impressive\n"
src/data/pokemon_graphics/front_pic_table.h:1:const struct CompressedSpriteSheet gMonFrontPicTable[] =
src/data/pokemon_graphics/front_pic_table.h:1338:const struct CompressedSpriteSheet gMonFrontPicTableFemale[] =
src/data/pokemon_graphics/shiny_palette_table.h:1:const struct CompressedSpritePalette gMonShinyPaletteTable[] =
src/data/pokemon_graphics/shiny_palette_table.h:1337:const struct CompressedSpritePalette gMonShinyPaletteTableFemale[] =
src/data/pokemon_graphics/back_pic_table.h:1:const struct CompressedSpriteSheet gMonBackPicTable[] =
src/data/pokemon_graphics/back_pic_table.h:1339:const struct CompressedSpriteSheet gMonBackPicTableFemale[] =
src/data/pokemon_graphics/palette_table.h:1:const struct CompressedSpritePalette gMonPaletteTable[] =
src/data/pokemon_graphics/palette_table.h:1338:const struct CompressedSpritePalette gMonPaletteTableFemale[] =
src/data/battle_anim.h:1010:const struct CompressedSpriteSheet gBattleAnimPicTable[] =
src/data/battle_anim.h:1368:    {gBattleAnimSpriteGfx_Acupressure, 0x0200, ANIM_TAG_ACUPRESSURE},
src/data/battle_anim.h:1456:const struct CompressedSpritePalette gBattleAnimPaletteTable[] =
src/data/battle_anim.h:1819:    {gBattleAnimSpritePal_Acupressure, ANIM_TAG_ACUPRESSURE},
src/data/text/abilities.h:47:static const u8 sPressureDescription[] = _("Raises foe's PP usage.");
src/data/text/abilities.h:338:    [ABILITY_PRESSURE] = _("Pressure"),
src/data/text/abilities.h:641:    [ABILITY_PRESSURE] = _("Pressure"),
src/data/text/abilities.h:945:    [ABILITY_PRESSURE] = sPressureDescription,
src/data/text/move_names.h:372:    [MOVE_ACUPRESSURE] = _("Acupressure"),
src/data/text/move_names.h:565:    [MOVE_FLYING_PRESS] = _("Flying Press"),
src/data/text/move_names.h:628:    [MOVE_FIRST_IMPRESSION] = _("First Impression"),
src/data/text/move_names.h:709:    [MOVE_BODY_PRESS] = _("Body Press"),
src/data/text/move_names.h:1204:    [MOVE_ACUPRESSURE] = _("Acupressure"),
src/data/text/move_names.h:1397:    [MOVE_FLYING_PRESS] = _("Flying Press"),
src/data/text/move_names.h:1460:    [MOVE_FIRST_IMPRESSION] = _("FrstImpressn"),
src/data/text/move_names.h:1541:    [MOVE_BODY_PRESS] = _("Body Press"),
src/data/text/move_descriptions.h:1479:static const u8 sAcupressureDescription[] = _(
src/data/text/move_descriptions.h:1532:    "Stomach acid suppresses\n"
src/data/text/move_descriptions.h:2024:    "Suppresses the foe, making\n"
src/data/text/move_descriptions.h:2183:static const u8 sFlyingPressDescription[] = _(
src/data/text/move_descriptions.h:2423:static const u8 sFirstImpressionDescription[] = _(
src/data/text/move_descriptions.h:2752:static const u8 sBodyPressDescription[] = _(
src/data/text/move_descriptions.h:3221:    "Pressurized water cut with a\n"
src/data/text/move_descriptions.h:3614:    [MOVE_ACUPRESSURE - 1] = sAcupressureDescription,
src/data/text/move_descriptions.h:3807:    [MOVE_FLYING_PRESS - 1] = sFlyingPressDescription,
src/data/text/move_descriptions.h:3870:    [MOVE_FIRST_IMPRESSION - 1] = sFirstImpressionDescription,
src/data/text/move_descriptions.h:3953:    [MOVE_BODY_PRESS - 1] = sBodyPressDescription,
src/data/battle_frontier/battle_tent.h:1712:        .speechBefore = {EC_WORD_YOU_RE, EC_WORD_GOING, EC_WORD_TO, EC_WORD_PRESSURE, EC_WORD_ME, EC_WORD_QUES},
src/minigame_countdown.c:2:#include "decompress.h"
src/minigame_countdown.c:54:static const struct CompressedSpriteSheet sSpriteSheet_321Start_Static[] =
src/minigame_countdown.c:214:    LoadCompressedSpriteSheet(&sSpriteSheet_321Start_Static[tSpriteSheetId]);
src/minigame_countdown.c:606:    struct CompressedSpriteSheet spriteSheet = {s321Start_Gfx, 0xE00, 0};
src/minigame_countdown.c:612:    LoadCompressedSpriteSheet(&spriteSheet);
src/battle_ai_main.c:1176:        case EFFECT_ACUPRESSURE:
src/battle_ai_main.c:1632:            else if (move == MOVE_FAKE_OUT) // filter out first impression
src/battle_ai_main.c:3398:    case EFFECT_ACUPRESSURE:
src/battle_ai_main.c:4031:        if (move == MOVE_FAKE_OUT    // filter out first impression
src/battle_ai_main.c:4884:    case EFFECT_ACUPRESSURE:
src/pokemon.c:7792:const struct CompressedSpritePalette *GetMonSpritePalStruct(struct Pokemon *mon)
src/pokemon.c:7800:const struct CompressedSpritePalette *GetMonSpritePalStructFromOtIdPersonality(u16 species, u32 otId , u32 personality)
src/start_menu.c:1047:    case MENU_B_PRESSED:
src/start_menu.c:1093:    case MENU_B_PRESSED:
src/start_menu.c:1212:    case MENU_B_PRESSED:
src/item_menu.c:11:#include "decompress.h"
src/item_menu.c:809:        DecompressAndCopyTileDataToVram(2, gBagScreen_Gfx, 0, 0, 0);
src/item_menu.c:815:            LZDecompressWram(gBagScreen_GfxTileMap, gBagMenu->tilemapBuffer);
src/item_menu.c:821:            LoadCompressedPalette(gBagScreenFemale_Pal, BG_PLTT_ID(0), 2 * PLTT_SIZE_4BPP);
src/item_menu.c:823:            LoadCompressedPalette(gBagScreenMale_Pal, BG_PLTT_ID(0), 2 * PLTT_SIZE_4BPP);
src/item_menu.c:828:            LoadCompressedSpriteSheet(&gBagMaleSpriteSheet);
src/item_menu.c:830:            LoadCompressedSpriteSheet(&gBagFemaleSpriteSheet);
src/item_menu.c:834:        LoadCompressedSpritePalette(&gBagPaletteTable);
src/item_menu.c:1290:    LRKeys = GetLRKeysPressed();
src/item_menu.c:1291:    if (JOY_NEW(DPAD_LEFT) || LRKeys == MENU_L_PRESSED)
src/item_menu.c:1296:    if (JOY_NEW(DPAD_RIGHT) || LRKeys == MENU_R_PRESSED)
src/item_menu.c:1701:        case MENU_B_PRESSED:
src/item_menu.c:1734:        else if (JOY_NEW(DPAD_LEFT) || GetLRKeysPressed() == MENU_L_PRESSED)
src/item_menu.c:1742:        else if (JOY_NEW(DPAD_RIGHT) || GetLRKeysPressed() == MENU_R_PRESSED)
src/battle_anim_utility_funcs.c:335:    AnimLoadCompressedBgTilemapHandleContest(&animBgData, gBattleAnimMaskTilemap_Curse, FALSE);
src/battle_anim_utility_funcs.c:336:    AnimLoadCompressedBgGfx(animBgData.bgId, gBattleAnimMaskImage_Curse, animBgData.tilesOffset);
src/battle_anim_utility_funcs.c:474:        AnimLoadCompressedBgTilemapHandleContest(&animBgData, gBattleStatMask1_Tilemap, FALSE);
src/battle_anim_utility_funcs.c:476:        AnimLoadCompressedBgTilemapHandleContest(&animBgData, gBattleStatMask2_Tilemap, FALSE);
src/battle_anim_utility_funcs.c:478:    AnimLoadCompressedBgGfx(animBgData.bgId, gBattleStatMask_Gfx, animBgData.tilesOffset);
src/battle_anim_utility_funcs.c:482:        LoadCompressedPalette(gBattleStatMask2_Pal, BG_PLTT_ID(animBgData.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_utility_funcs.c:485:        LoadCompressedPalette(gBattleStatMask1_Pal, BG_PLTT_ID(animBgData.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_utility_funcs.c:488:        LoadCompressedPalette(gBattleStatMask3_Pal, BG_PLTT_ID(animBgData.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_utility_funcs.c:491:        LoadCompressedPalette(gBattleStatMask4_Pal, BG_PLTT_ID(animBgData.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_utility_funcs.c:494:        LoadCompressedPalette(gBattleStatMask6_Pal, BG_PLTT_ID(animBgData.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_utility_funcs.c:497:        LoadCompressedPalette(gBattleStatMask7_Pal, BG_PLTT_ID(animBgData.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_utility_funcs.c:500:        LoadCompressedPalette(gBattleStatMask8_Pal, BG_PLTT_ID(animBgData.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_utility_funcs.c:503:        LoadCompressedPalette(gBattleStatMask5_Pal, BG_PLTT_ID(animBgData.paletteId), PLTT_SIZE_4BPP);
src/battle_anim_utility_funcs.c:818:    AnimLoadCompressedBgTilemapHandleContest(&animBgData, tilemap, FALSE);
src/battle_anim_utility_funcs.c:819:    AnimLoadCompressedBgGfx(animBgData.bgId, gfx, animBgData.tilesOffset);
src/battle_anim_utility_funcs.c:820:    LoadCompressedPalette(palette, BG_PLTT_ID(animBgData.paletteId), PLTT_SIZE_4BPP);
src/field_region_map.c:19: *  It does not zoom, and pressing A or B closes the map
src/move_relearner.c:51: *   - If the player selected a move (pressed A), go to MENU_STATE_PRINT_TEACH_MOVE_PROMPT.
src/move_relearner.c:52: *   - If the player cancelled (pressed B), go to MENU_STATE_PRINT_GIVE_UP_PROMPT.
src/move_relearner.c:53: *   - If the player pressed left or right, swap the move display window to contest mode,
src/move_relearner.c:60: *   - If the player pressed left or right, swap the move display window to battle mode,
src/move_relearner.c:534:            else if (selection == MENU_B_PRESSED || selection == 1)
src/move_relearner.c:563:            else if (selection == MENU_B_PRESSED || selection == 1)
src/move_relearner.c:596:            else if (selection == MENU_B_PRESSED || selection == 1)
src/move_relearner.c:622:            else if (selection == MENU_B_PRESSED || selection == 1)
src/move_relearner.c:786:        if (!(JOY_NEW(DPAD_LEFT | DPAD_RIGHT)) && !GetLRKeysPressed())
src/scrcmd.c:653:        CpuCopy32(gPlttBufferUnfaded, gPaletteDecompressionBuffer, PLTT_DECOMP_BUFFER_SIZE);
src/scrcmd.c:658:        CpuCopy32(gPaletteDecompressionBuffer, gPlttBufferUnfaded, PLTT_DECOMP_BUFFER_SIZE);
src/scrcmd.c:1323:static bool8 WaitForAorBPress(void)
src/scrcmd.c:1332:bool8 ScrCmd_waitbuttonpress(struct ScriptContext *ctx)
src/scrcmd.c:1334:    SetupNativeScript(ctx, WaitForAorBPress);
src/scrcmd.c:1359:    bool8 ignoreBPress = ScriptReadByte(ctx);
src/scrcmd.c:1361:    if (ScriptMenu_Multichoice(left, top, multichoiceId, ignoreBPress) == TRUE)
src/scrcmd.c:1378:    bool8 ignoreBPress = ScriptReadByte(ctx);
src/scrcmd.c:1380:    if (ScriptMenu_MultichoiceWithDefault(left, top, multichoiceId, ignoreBPress, defaultChoice) == TRUE)
src/scrcmd.c:1408:    bool8 ignoreBPress = ScriptReadByte(ctx);
src/scrcmd.c:1410:    if (ScriptMenu_MultichoiceGrid(left, top, multichoiceId, ignoreBPress, numColumns) == TRUE)
src/scrcmd.c:1437:    bool8 ignoreBPress = ScriptReadByte(ctx);
src/scrcmd.c:1439:    /*if (Multichoice(left, top, multichoiceId, ignoreBPress) == TRUE)
src/link.c:10:#include "decompress.h"
src/link.c:88:u8 gSuppressLinkErrorMessage;
src/link.c:380:        gSuppressLinkErrorMessage = FALSE;
src/link.c:464:        SetSuppressLinkErrorMessage(TRUE);
src/link.c:579:                    buffer = (u16 *)gDecompressionBuffer;
src/link.c:1576:        if (!gSuppressLinkErrorMessage)
src/link.c:1650:    DecompressAndLoadBgGfxUsingHeap(1, sWirelessLinkDisplayGfx, FALSE, 0, 0);
src/link.c:1753:void SetSuppressLinkErrorMessage(bool8 flag)
src/link.c:1755:    gSuppressLinkErrorMessage = flag;
src/mystery_gift_menu.c:700:        if (input == MENU_B_PRESSED || input == 0 || input == 1)
src/mystery_gift_menu.c:716:        return MENU_B_PRESSED;
src/mystery_gift_menu.c:885:        MG_AddMessageTextPrinter(gText_SaveCompletedPressA);
src/mystery_gift_menu.c:1295:        case MENU_B_PRESSED:
src/mystery_gift_menu.c:1328:        case MENU_B_PRESSED:
src/mystery_gift_menu.c:1347:        case MENU_B_PRESSED:
src/mystery_gift_menu.c:1478:        case MENU_B_PRESSED:
src/mystery_gift_menu.c:1492:        case MENU_B_PRESSED:
src/mystery_gift_menu.c:1626:    DecompressAndLoadBgGfxUsingHeap(bgId, sTextboxBorder_Gfx, 0x100, 0, 0);
src/battle_controller_wally.c:1039:    DecompressTrainerBackPic(TRAINER_BACK_PIC_WALLY, gActiveBattler);
src/battle_controller_wally.c:1054:    DecompressTrainerBackPic(TRAINER_BACK_PIC_WALLY, gActiveBattler);
src/battle_controller_wally.c:1442:    LoadCompressedPalette(gTrainerBackPicPaletteTable[TRAINER_BACK_PIC_WALLY].data, OBJ_PLTT_ID(paletteNum), PLTT_SIZE_4BPP);
src/union_room_chat.c:4:#include "decompress.h"
src/union_room_chat.c:761:static const struct CompressedSpriteSheet sSpriteSheets[] = {
src/union_room_chat.c:1137:        case MENU_B_PRESSED:
src/union_room_chat.c:1184:        case MENU_B_PRESSED:
src/union_room_chat.c:1223:        case MENU_B_PRESSED:
src/union_room_chat.c:1525:        case MENU_B_PRESSED:
src/union_room_chat.c:1550:        case MENU_B_PRESSED:
src/union_room_chat.c:3070:    DecompressAndCopyTileDataToVram(1, gUnionRoomChat_Border_Gfx, 0, 0, 0);
src/union_room_chat.c:3080:    ptr = DecompressAndCopyTileDataToVram(2, gUnionRoomChat_Background_Gfx, 0, 0, 0);
src/union_room_chat.c:3165:        LoadCompressedSpriteSheet(&sSpriteSheets[i]);
src/wireless_communication_status_screen.c:207:    DecompressAndLoadBgGfxUsingHeap(1, sBgTiles_Gfx, 0, 0, 0);
src/battle_transition_frontier.c:3:#include "decompress.h"
src/battle_transition_frontier.c:73:static const struct CompressedSpriteSheet sSpriteSheet_LogoCircles =
src/battle_transition_frontier.c:230:    LoadCompressedSpriteSheet(&sSpriteSheet_LogoCircles);
src/battle_controller_link_opponent.c:1292:    DecompressTrainerFrontPic(trainerPicId, gActiveBattler);
src/battle_controller_link_opponent.c:1317:    DecompressTrainerFrontPic(trainerPicId, gActiveBattler);
src/m4a_tables.c:46:// This is a table of deltas between sample values in compressed PCM data.
src/battle_factory_screen.c:21:#include "decompress.h"
src/battle_factory_screen.c:283:static const struct CompressedSpriteSheet sSelect_BallGfx[] =
src/battle_factory_screen.c:644:static const struct CompressedSpriteSheet sSwap_BallGfx[] =
src/battle_factory_screen.c:1201:        LoadCompressedSpriteSheet(sSelect_BallGfx);
src/battle_factory_screen.c:1551:            // Pressed B, Continue choosing pokemon
src/battle_factory_screen.c:3327:        LoadCompressedSpriteSheet(sSwap_BallGfx);
src/easy_chat.c:6:#include "decompress.h"
src/easy_chat.c:545:        .instructionsText2 = gText_QuestionPressTheAButton,
src/easy_chat.c:918:static const struct CompressedSpriteSheet sCompressedSpriteSheets[] = {
src/easy_chat.c:1969:    case MENU_B_PRESSED:
src/easy_chat.c:1989:    case MENU_B_PRESSED:
src/easy_chat.c:2007:    case MENU_B_PRESSED:
src/easy_chat.c:2032:// press A or B, then return to previous state
src/easy_chat.c:2055:    case MENU_B_PRESSED:
src/easy_chat.c:3039:        DecompressAndLoadBgGfxUsingHeap(3, gEasyChatWindow_Gfx, 0, 0, 0);
src/easy_chat.c:3048:        DecompressAndLoadBgGfxUsingHeap(1, sTextInputFrame_Gfx, 0, 0, 0);
src/easy_chat.c:4629:    for (i = 0; i < ARRAY_COUNT(sCompressedSpriteSheets); i++)
src/easy_chat.c:4630:        LoadCompressedSpriteSheet(&sCompressedSpriteSheets[i]);
src/pokenav_main_menu.c:11:#include "decompress.h"
src/pokenav_main_menu.c:32:struct CompressedSpriteSheetNoSize
src/pokenav_main_menu.c:34:    const u32 *data;  // LZ77 compressed palette data
src/pokenav_main_menu.c:108:static const struct CompressedSpriteSheet sSpinningPokenavSpriteSheet[] =
src/pokenav_main_menu.c:126:static const struct CompressedSpriteSheet sMenuLeftHeaderSpriteSheet =
src/pokenav_main_menu.c:133:static const struct CompressedSpriteSheet sMenuLeftHeaderSpriteSheets[] =
src/pokenav_main_menu.c:167:static const struct CompressedSpriteSheetNoSize sPokenavSubMenuLeftHeaderSpriteSheets[] =
src/pokenav_main_menu.c:349:        DecompressAndCopyTileDataToVram(0, &gPokenavHeader_Gfx, 0, 0, 0);
src/pokenav_main_menu.c:587:        LoadCompressedSpriteSheet(&sSpinningPokenavSpriteSheet[i]);
src/pokenav_main_menu.c:636:    LoadCompressedSpriteSheet(&sMenuLeftHeaderSpriteSheet);
src/pokenav_main_menu.c:685:    size = GetDecompressedDataSize(sMenuLeftHeaderSpriteSheets[menuGfxId].data);
src/pokenav_main_menu.c:687:    LZ77UnCompWram(sMenuLeftHeaderSpriteSheets[menuGfxId].data, gDecompressionBuffer);
src/pokenav_main_menu.c:688:    RequestDma3Copy(gDecompressionBuffer, (void *)OBJ_VRAM0 + (GetSpriteTileStartByTag(2) * 32), size, 1);
src/pokenav_main_menu.c:705:    size = GetDecompressedDataSize(sPokenavSubMenuLeftHeaderSpriteSheets[menuGfxId].data);
src/pokenav_main_menu.c:707:    LZ77UnCompWram(sPokenavSubMenuLeftHeaderSpriteSheets[menuGfxId].data, &gDecompressionBuffer[0x1000]);
src/pokenav_main_menu.c:708:    RequestDma3Copy(&gDecompressionBuffer[0x1000], (void *)OBJ_VRAM0 + 0x800 + (GetSpriteTileStartByTag(2) * 32), size, 1);
src/title_screen.c:7:#include "decompress.h"
src/title_screen.c:51:static void SpriteCB_PressStartCopyrightBanner(struct Sprite *sprite);
src/title_screen.c:181:static const struct CompressedSpriteSheet sSpriteSheet_EmeraldVersion[] =
src/title_screen.c:281:    .callback = SpriteCB_PressStartCopyrightBanner,
src/title_screen.c:284:static const struct CompressedSpriteSheet sSpriteSheet_PressStart[] =
src/title_screen.c:287:        .data = gTitleScreenPressStartGfx,
src/title_screen.c:294:static const struct SpritePalette sSpritePalette_PressStart[] =
src/title_screen.c:297:        .data = gTitleScreenPressStartPal,
src/title_screen.c:342:static const struct CompressedSpriteSheet sPokemonLogoShineSpriteSheet[] =
src/title_screen.c:384:static void SpriteCB_PressStartCopyrightBanner(struct Sprite *sprite)
src/title_screen.c:401:static void CreatePressStartBanner(s16 x, s16 y)
src/title_screen.c:563:        LoadCompressedSpriteSheet(&sSpriteSheet_EmeraldVersion[0]);
src/title_screen.c:564:        LoadCompressedSpriteSheet(&sSpriteSheet_PressStart[0]);
src/title_screen.c:565:        LoadCompressedSpriteSheet(&sPokemonLogoShineSpriteSheet[0]);
src/title_screen.c:567:        LoadSpritePalette(&sSpritePalette_PressStart[0]);
src/title_screen.c:636:    // Skip to next phase when A, B, Start, or Select is pressed
src/title_screen.c:678:// Create "Press Start" and copyright banners, and slide Pokemon logo up
src/title_screen.c:683:    // Skip to next phase when A, B, Start, or Select is pressed
src/title_screen.c:706:        CreatePressStartBanner(START_BANNER_X, 108);
src/apprentice.c:88:static void ExecuteFuncAfterButtonPress(void (*func)(void));
src/apprentice.c:668:    case MENU_B_PRESSED:
src/apprentice.c:818:            ExecuteFuncAfterButtonPress(ScriptContext_Enable);
src/apprentice.c:1282:static void Task_SwitchToFollowupFuncAfterButtonPress(u8 taskId)
src/apprentice.c:1288:static void Task_ExecuteFuncAfterButtonPress(u8 taskId)
src/apprentice.c:1298:static void ExecuteFuncAfterButtonPress(void (*func)(void))
src/apprentice.c:1300:    u8 taskId = CreateTask(Task_ExecuteFuncAfterButtonPress, 1);
src/apprentice.c:1306:static void ExecuteFollowupFuncAfterButtonPress(TaskFunc task)
src/apprentice.c:1308:    u8 taskId = CreateTask(Task_SwitchToFollowupFuncAfterButtonPress, 1);
src/apprentice.c:1309:    SetTaskFuncWithFollowupFunc(taskId, Task_SwitchToFollowupFuncAfterButtonPress, task);
src/battle_anim_new.c:2111://first impression
src/battle_anim_new.c:2112:const struct SpriteTemplate gFirstImpressionPoundTemplate =
src/evolution_graphics.c:6:#include "decompress.h"
src/evolution_graphics.c:44:static const struct CompressedSpriteSheet sEvoSparkleSpriteSheets[] =
src/evolution_graphics.c:275:    LoadCompressedSpriteSheetUsingHeap(&sEvoSparkleSpriteSheets[0]);
src/battle_controller_safari.c:357:    DecompressTrainerBackPic(gSaveBlock2Ptr->playerGender, gActiveBattler);
src/battle_tv.c:409:    [EFFECT_ACUPRESSURE]                = 0, // TODO: Assign points
src/battle_tv.c:437:    [EFFECT_BODY_PRESS]                 = 0, // TODO: Assign points
src/pokemon_debug.c:10:#include "decompress.h"
src/pokemon_debug.c:44:extern const struct CompressedSpriteSheet gSpriteSheet_EnemyShadow;
src/pokemon_debug.c:687:static const struct CompressedSpritePalette *GetMonSpritePalStructCustom(u16 species, bool8 isFemale, bool8 isShiny)
src/pokemon_debug.c:709:    const struct CompressedSpritePalette *palette;
src/pokemon_debug.c:730:    LZDecompressWram(lzPaletteData, gDecompressionBuffer);
src/pokemon_debug.c:731:    LoadPalette(gDecompressionBuffer, paletteOffset, 0x20);
src/pokemon_debug.c:732:    LoadPalette(gDecompressionBuffer, 0x80 + battlerId * 16, 0x20);
src/pokemon_debug.c:835:    LoadCompressedSpriteSheet(&gSpriteSheet_EnemyShadow);
src/pokemon_debug.c:880:        LZDecompressVram(sBattleTerrainTable[battleTerrain].tileset, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:881:        LZDecompressVram(sBattleTerrainTable[battleTerrain].tilemap, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:882:        LoadCompressedPalette(sBattleTerrainTable[battleTerrain].palette, 0x20, 0x60);
src/pokemon_debug.c:885:        LZDecompressVram(gBattleTerrainTiles_Building, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:886:        LZDecompressVram(gBattleTerrainTilemap_Building, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:887:        LoadCompressedPalette(gBattleTerrainPalette_BuildingGym, 0x20, 0x60);
src/pokemon_debug.c:890:        LZDecompressVram(gBattleTerrainTiles_Stadium, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:891:        LZDecompressVram(gBattleTerrainTilemap_Stadium, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:892:        LoadCompressedPalette(gBattleTerrainPalette_StadiumMagma, 0x20, 0x60);
src/pokemon_debug.c:895:        LZDecompressVram(gBattleTerrainTiles_Stadium, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:896:        LZDecompressVram(gBattleTerrainTilemap_Stadium, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:897:        LoadCompressedPalette(gBattleTerrainPalette_StadiumAqua, 0x20, 0x60);
src/pokemon_debug.c:900:        LZDecompressVram(gBattleTerrainTiles_Stadium, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:901:        LZDecompressVram(gBattleTerrainTilemap_Stadium, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:902:        LoadCompressedPalette(gBattleTerrainPalette_StadiumSidney, 0x20, 0x60);
src/pokemon_debug.c:905:        LZDecompressVram(gBattleTerrainTiles_Stadium, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:906:        LZDecompressVram(gBattleTerrainTilemap_Stadium, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:907:        LoadCompressedPalette(gBattleTerrainPalette_StadiumPhoebe, 0x20, 0x60);
src/pokemon_debug.c:910:        LZDecompressVram(gBattleTerrainTiles_Stadium, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:911:        LZDecompressVram(gBattleTerrainTilemap_Stadium, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:912:        LoadCompressedPalette(gBattleTerrainPalette_StadiumGlacia, 0x20, 0x60);
src/pokemon_debug.c:915:        LZDecompressVram(gBattleTerrainTiles_Stadium, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:916:        LZDecompressVram(gBattleTerrainTilemap_Stadium, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:917:        LoadCompressedPalette(gBattleTerrainPalette_StadiumDrake, 0x20, 0x60);
src/pokemon_debug.c:920:        LZDecompressVram(gBattleTerrainTiles_Building, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:921:        LZDecompressVram(gBattleTerrainTilemap_Building, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:922:        LoadCompressedPalette(gBattleTerrainPalette_Frontier, 0x20, 0x60);
src/pokemon_debug.c:925:        LZDecompressVram(gBattleTerrainTiles_Building, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:926:        LZDecompressVram(gBattleTerrainTilemap_Building, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:927:        LoadCompressedPalette(gBattleTerrainPalette_BuildingLeader, 0x20, 0x60);
src/pokemon_debug.c:930:        LZDecompressVram(gBattleTerrainTiles_Stadium, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:931:        LZDecompressVram(gBattleTerrainTilemap_Stadium, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:932:        LoadCompressedPalette(gBattleTerrainPalette_StadiumWallace, 0x20, 0x60);
src/pokemon_debug.c:935:        LZDecompressVram(gBattleTerrainTiles_Cave, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:936:        LZDecompressVram(gBattleTerrainTilemap_Cave, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:937:        LoadCompressedPalette(gBattleTerrainPalette_Groudon, 0x20, 0x60);
src/pokemon_debug.c:940:        LZDecompressVram(gBattleTerrainTiles_Water, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:941:        LZDecompressVram(gBattleTerrainTilemap_Water, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:942:        LoadCompressedPalette(gBattleTerrainPalette_Kyogre, 0x20, 0x60);
src/pokemon_debug.c:945:        LZDecompressVram(gBattleTerrainTiles_Rayquaza, (void*)(BG_CHAR_ADDR(2)));
src/pokemon_debug.c:946:        LZDecompressVram(gBattleTerrainTilemap_Rayquaza, (void*)(BG_SCREEN_ADDR(26)));
src/pokemon_debug.c:947:        LoadCompressedPalette(gBattleTerrainPalette_Rayquaza, 0x20, 0x60);
src/pokemon_debug.c:1116:    const struct CompressedSpritePalette *palette;
src/pokemon_debug.c:1184:            LoadCompressedSpritePalette(palette);
src/pokemon_debug.c:1671:    const struct CompressedSpritePalette *palette;
src/pokemon_debug.c:1696:    LoadCompressedSpritePalette(palette);
src/shop.c:4:#include "decompress.h"
src/shop.c:127:static void BuyMenuDecompressBgGraphics(void);
src/shop.c:399:    case MENU_B_PRESSED:
src/shop.c:527:        BuyMenuDecompressBgGraphics();
src/shop.c:739:static void BuyMenuDecompressBgGraphics(void)
src/shop.c:741:    DecompressAndCopyTileDataToVram(1, gShopMenu_Gfx, 0x3A0, 0x3E3, 0);
src/shop.c:742:    LZDecompressWram(gShopMenu_Tilemap, sShopData->tilemapBuffers[0]);
src/shop.c:743:    LoadCompressedPalette(gShopMenu_Pal, BG_PLTT_ID(12), PLTT_SIZE_4BPP);
src/item_menu_icons.c:3:#include "decompress.h"
src/item_menu_icons.c:23:struct CompressedTilesPal
src/item_menu_icons.c:130:const struct CompressedSpriteSheet gBagMaleSpriteSheet =
src/item_menu_icons.c:135:const struct CompressedSpriteSheet gBagFemaleSpriteSheet =
src/item_menu_icons.c:140:const struct CompressedSpritePalette gBagPaletteTable =
src/item_menu_icons.c:274:    {&gDecompressionBuffer[0], 0x800},
src/item_menu_icons.c:327:static const struct CompressedTilesPal sBerryPicTable[] =
src/item_menu_icons.c:399:const struct CompressedSpriteSheet gBerryCheckCircleSpriteSheet =
src/item_menu_icons.c:404:const struct CompressedSpritePalette gBerryCheckCirclePaletteTable =
src/item_menu_icons.c:645:    struct CompressedSpritePalette pal;
src/item_menu_icons.c:654:    LoadCompressedSpritePalette(&pal);
src/item_menu_icons.c:655:    LZDecompressWram(sBerryPicTable[berryId].tiles, &gDecompressionBuffer[0x1000]);
src/item_menu_icons.c:656:    ArrangeBerryGfx(&gDecompressionBuffer[0x1000], &gDecompressionBuffer[0]);
src/berry_tag_screen.c:4:#include "decompress.h"
src/berry_tag_screen.c:27:#include "decompress.h"
src/berry_tag_screen.c:321:        DecompressAndCopyTileDataToVram(2, gBerryCheck_Gfx, 0, 0, 0);
src/berry_tag_screen.c:327:            LZDecompressWram(gBerryTag_Gfx, sBerryTag->tilemapBuffers[0]);
src/berry_tag_screen.c:332:        LZDecompressWram(gBerryTag_Pal, sBerryTag->tilemapBuffers[2]);
src/berry_tag_screen.c:349:        LoadCompressedPalette(gBerryCheck_Pal, BG_PLTT_ID(0), 6 * PLTT_SIZE_4BPP);
src/berry_tag_screen.c:353:        LoadCompressedSpriteSheet(&gBerryCheckCircleSpriteSheet);
src/berry_tag_screen.c:357:        LoadCompressedSpritePalette(&gBerryCheckCirclePaletteTable);
sym_ewram.txt:1:	.include "src/decompress.o"
include/decompress.h:1:#ifndef GUARD_DECOMPRESS_H
include/decompress.h:2:#define GUARD_DECOMPRESS_H
include/decompress.h:6:extern u8 gDecompressionBuffer[0x4000];
include/decompress.h:8:void LZDecompressWram(const u32 *src, void *dest);
include/decompress.h:9:void LZDecompressVram(const u32 *src, void *dest);
include/decompress.h:11:u16 LoadCompressedSpriteSheet(const struct CompressedSpriteSheet *src);
include/decompress.h:12:void LoadCompressedSpriteSheetOverrideBuffer(const struct CompressedSpriteSheet *src, void *buffer);
include/decompress.h:13:bool8 LoadCompressedSpriteSheetUsingHeap(const struct CompressedSpriteSheet *src);
include/decompress.h:15:void LoadCompressedSpritePalette(const struct CompressedSpritePalette *src);
include/decompress.h:16:void LoadCompressedSpritePaletteOverrideBuffer(const struct CompressedSpritePalette *src, void *buffer);
include/decompress.h:17:bool8 LoadCompressedSpritePaletteUsingHeap(const struct CompressedSpritePalette *src);
include/decompress.h:19:void DecompressPicFromTable(const struct CompressedSpriteSheet *src, void *buffer, s32 species);
include/decompress.h:20:void DecompressPicFromTableGender(void* buffer, s32 species, u32 personality);
include/decompress.h:26:u32 GetDecompressedDataSize(const u32 *ptr);
include/decompress.h:28:#endif // GUARD_DECOMPRESS_H
include/main.h:26:    /*0x02A*/ u16 newKeysRaw;            // newly pressed keys without L=A remapping
include/main.h:28:    /*0x02E*/ u16 newKeys;               // newly pressed keys with L=A remapping
include/main.h:29:    /*0x030*/ u16 newAndRepeatedKeys;    // newly pressed keys plus key repeat
include/main.h:31:    /*0x034*/ bool16 watchedKeysPressed; // whether one of the watched keys was pressed
include/AgbRfu_LinkManager.h:152:    u8 acceptSlot_flag;                             // Connection slot of child for which Link Manager accepted connection, expressed in bits. (This bit is not dropped for a broken link but is dropped with complete disconnection.)
include/intro_credits_graphics.h:24:extern const struct CompressedSpriteSheet gSpriteSheet_IntroBrendan[];
include/intro_credits_graphics.h:25:extern const struct CompressedSpriteSheet gSpriteSheet_IntroMay[];
include/intro_credits_graphics.h:26:extern const struct CompressedSpriteSheet gSpriteSheet_IntroBicycle[];
include/intro_credits_graphics.h:27:extern const struct CompressedSpriteSheet gSpriteSheet_IntroFlygon[];
include/intro_credits_graphics.h:29:extern const struct CompressedSpriteSheet gSpriteSheet_CreditsBrendan[];
include/intro_credits_graphics.h:30:extern const struct CompressedSpriteSheet gSpriteSheet_CreditsMay[];
include/intro_credits_graphics.h:31:extern const struct CompressedSpriteSheet gSpriteSheet_CreditsBicycle[];
include/intro_credits_graphics.h:32:extern const struct CompressedSpriteSheet gSpriteSheet_CreditsRivalBrendan[];
include/intro_credits_graphics.h:33:extern const struct CompressedSpriteSheet gSpriteSheet_CreditsRivalMay[];
include/data.h:112:extern const struct CompressedSpriteSheet gMonBackPicTable[];
include/data.h:113:extern const struct CompressedSpriteSheet gMonBackPicTableFemale[];
include/data.h:114:extern const struct CompressedSpritePalette gMonPaletteTable[];
include/data.h:115:extern const struct CompressedSpritePalette gMonPaletteTableFemale[];
include/data.h:116:extern const struct CompressedSpritePalette gMonShinyPaletteTable[];
include/data.h:117:extern const struct CompressedSpritePalette gMonShinyPaletteTableFemale[];
include/data.h:120:extern const struct CompressedSpriteSheet gTrainerFrontPicTable[];
include/data.h:121:extern const struct CompressedSpritePalette gTrainerFrontPicPaletteTable[];
include/data.h:124:extern const struct CompressedSpriteSheet gTrainerBackPicTable[]; // functionally unused
include/data.h:125:extern const struct CompressedSpritePalette gTrainerBackPicPaletteTable[];
include/data.h:130:extern const struct CompressedSpriteSheet gMonFrontPicTable[];
include/data.h:131:extern const struct CompressedSpriteSheet gMonFrontPicTableFemale[];
include/battle.h:165:    u8 ppNotAffectedByPressure:1;
include/battle.h:843:    void *firstDecompressed; // ptr to the decompressed sprite of the first pokemon
include/global.h:243:    u16 pressingSpeeds[4]; // For the record with each possible group size, 2-5 players
include/graphics.h:9130:extern const u32 gBlankGfxCompressed[];
include/graphics.h:9146:extern const u32 gTitleScreenPressStartGfx[];
include/graphics.h:9151:extern const u16 gTitleScreenPressStartPal[];
include/graphics.h:9331://extern const struct CompressedSpriteSheet gBattleAnimSpriteGfx_146[];
include/graphics.h:9466:extern const u32 gBattleAnimSpriteGfx_Acupressure[];
include/graphics.h:9768:extern const u32 gBattleAnimSpritePal_Acupressure[];
include/pokemon.h:529:const struct CompressedSpritePalette *GetMonSpritePalStruct(struct Pokemon *mon);
include/pokemon.h:530:const struct CompressedSpritePalette *GetMonSpritePalStructFromOtIdPersonality(u16 species, u32 otId , u32 personality);
include/mini_printf.h:19: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
include/battle_util.h:114:void PressurePPLose(u8 target, u8 attacker, u16 move);
include/battle_util.h:115:void PressurePPLoseOnUsingPerishSong(u8 attacker);
include/battle_util.h:116:void PressurePPLoseOnUsingImprison(u8 attacker);
include/menu_helpers.h:7:#define MENU_L_PRESSED 1
include/menu_helpers.h:8:#define MENU_R_PRESSED 2
include/menu_helpers.h:26:u8 GetLRKeysPressed(void);
include/menu_helpers.h:27:u8 GetLRKeysPressedAndHeld(void);
include/strings.h:402:extern const u8 gText_PressAToLoadEvent[];
include/strings.h:471:extern const u8 gText_PauseUntilPress[];
include/strings.h:2642:extern const u8 gText_QuestionPressTheAButton[];
include/strings.h:2796:extern const u8 gText_SaveCompletedPressA[];
include/strings.h:2906:extern const u8 gText_PressingSpeed[];
include/strings.h:2911:extern const u8 gText_PressesRankings[];
include/strings.h:2914:extern const u8 gText_PressingSpeedRankings[];
include/strings.h:2930:extern const u8 gText_PressingPowerRankings[];
include/script_menu.h:6:bool8 ScriptMenu_Multichoice(u8 left, u8 top, u8 multichoiceId, bool8 ignoreBPress);
include/script_menu.h:7:bool8 ScriptMenu_MultichoiceWithDefault(u8 left, u8 top, u8 multichoiceId, bool8 ignoreBPress, u8 defaultChoice);
include/script_menu.h:9:bool8 ScriptMenu_MultichoiceGrid(u8 left, u8 top, u8 multichoiceId, bool8 ignoreBPress, u8 columnCount);
include/librfu.h:342:    u8 bmSlot;         // Expresses transmission destination slot as bits
include/librfu.h:376:    u8 bmSlot;                     // Expresses the current communication slot in bits
include/librfu.h:385:    u8 bmSlotOrg;                  // Expresses the communication source slot at the beginning of the transmission in bits (valid only for transmitting device)
include/config/debug.h:5:#define DEBUG_OVERWORLD_MENU            TRUE                // Enables a overworld debug menu for changing flags, variables, giving pokemon and more, accessed by holding R and pressing START while in the overworld by default.
include/config/debug.h:7:#define DEBUG_OVERWORLD_TRIGGER_EVENT   pressedStartButton  // The event that opens the menu when holding the key(s) defined in DEBUG_OVERWORLD_HELD_KEYS.
include/config/debug.h:16:#define DEBUG_BATTLE_MENU               TRUE    // If set to TRUE, enables a debug menu to use in battles by pressing the Select button.
include/config/debug.h:19:#define DEBUG_POKEMON_MENU              TRUE    // Enables a debug menu for pokemon sprites and icons, accessed by pressing SELECT in the summary screen.
include/berry.h:32:    u8 difficulty; // The number of A presses required to crush it
include/pokeblock.h:56:extern const struct CompressedSpriteSheet gPokeblockCase_SpriteSheet;
include/pokeblock.h:57:extern const struct CompressedSpritePalette gPokeblockCase_SpritePal;
include/field_control_avatar.h:6:    bool8 pressedAButton:1;
include/field_control_avatar.h:8:    bool8 pressedStartButton:1;
include/field_control_avatar.h:9:    bool8 pressedSelectButton:1;
include/field_control_avatar.h:13:    bool8 pressedBButton:1;
include/link.h:295:void SetSuppressLinkErrorMessage(bool8 flag);
include/link.h:319:extern u8 gSuppressLinkErrorMessage;
include/bike.h:8:    u32 dirHistoryMatch; // the direction you need to press
include/bike.h:9:    u32 abStartSelectHistoryMatch; // the button you need to press
include/gba/isagbprint.h:18:#define DebugAssert(pFile, nLine, pExpression, nStopProgram)
include/gba/isagbprint.h:24:void MgbaAssert(const char *pFile, s32 nLine, const char *pExpression, bool32 nStopProgram);
include/gba/isagbprint.h:26:void NoCashGBAAssert(const char *pFile, s32 nLine, const char *pExpression, bool32 nStopProgram);
include/gba/isagbprint.h:28:void AGBAssert(const char *pFile, int nLine, const char *pExpression, int nStopProgram);
include/gba/isagbprint.h:34:#define DebugAssert(pFile, nLine, pExpression, nStopProgram) MgbaAssert(pFile, nLine, pExpression, nStopProgram)
include/gba/isagbprint.h:40:#define DebugAssert(pFile, nLine, pExpression, nStopProgram) NoCashGBAAssert(pFile, nLine, pExpression, nStopProgram)
include/gba/isagbprint.h:46:#define DebugAssert(pFile, nLine, pExpression, nStopProgram) AGBAssert(pFile, nLine, pExpression, nStopProgram)
include/item_icon.h:4:extern u8 *gItemIconDecompressionBuffer;
include/item_menu_icons.h:4:extern const struct CompressedSpriteSheet gBagMaleSpriteSheet;
include/item_menu_icons.h:5:extern const struct CompressedSpriteSheet gBagFemaleSpriteSheet;
include/item_menu_icons.h:6:extern const struct CompressedSpritePalette gBagPaletteTable;
include/item_menu_icons.h:7:extern const struct CompressedSpriteSheet gBerryCheckCircleSpriteSheet;
include/item_menu_icons.h:8:extern const struct CompressedSpritePalette gBerryCheckCirclePaletteTable;
include/constants/battle_string_ids.h:399:#define STRINGID_PKMNSABILITYSUPPRESSED               397
include/constants/battle_string_ids.h:553:#define STRINGID_PRESSUREENTERS                       551
include/constants/battle_string_ids.h:876:#define B_MSG_SWITCHIN_PRESSURE         7
include/constants/battle_move_effects.h:324:#define EFFECT_ACUPRESSURE                  318
include/constants/battle_move_effects.h:352:#define EFFECT_BODY_PRESS                   346
include/constants/abilities.h:50:#define ABILITY_PRESSURE 46
include/constants/script_menu.h:8:#define MULTI_B_PRESSED  127
include/constants/easy_chat.h:169:#define EC_WORD_PRESSURE      ((EC_GROUP_STATUS << EC_MASK_BITS) | 84)
include/constants/battle_script_commands.h:165:#define VARIOUS_ACUPRESSURE                         73
include/constants/metatile_labels.h:67:#define METATILE_MauvilleGym_PressedSwitch   0x206
include/constants/metatile_labels.h:449:#define METATILE_TrickHousePuzzle_Button_Pressed             0x259
include/constants/metatile_labels.h:488:#define METATILE_BikeShop_Button_Pressed          0x24F
include/constants/moves.h:375:#define MOVE_ACUPRESSURE 367
include/constants/moves.h:576:#define MOVE_FLYING_PRESS 560
include/constants/moves.h:644:#define MOVE_FIRST_IMPRESSION 623
include/constants/moves.h:731:#define MOVE_BODY_PRESS 704
include/constants/battle_anim.h:311:#define ANIM_TAG_ACUPRESSURE                (ANIM_SPRITES_START + 300)
include/battle_anim.h:139:void AnimLoadCompressedBgTilemapHandleContest(struct BattleAnimBgData *, const void *, bool32);
include/battle_anim.h:140:void AnimLoadCompressedBgGfx(u32, const u32 *, u32);
include/battle_anim.h:147:void AnimLoadCompressedBgTilemap(u32 bgId, const void *src);
include/battle_anim.h:243:void AnimTask_CompressTargetHorizontally(u8 taskId);
include/battle_anim.h:414:extern const struct CompressedSpriteSheet gBattleAnimPicTable[];
include/battle_anim.h:415:extern const struct CompressedSpritePalette gBattleAnimPaletteTable[];
include/palette.h:58:extern u8 gPaletteDecompressionBuffer[];
include/palette.h:62:void LoadCompressedPalette(const u32 *src, u16 offset, u16 size);
include/global.fieldmap.h:40:    /*0x00*/ bool8 isCompressed;
include/pokeball.h:44:extern const struct CompressedSpriteSheet gBallSpriteSheets[];
include/pokeball.h:45:extern const struct CompressedSpritePalette gBallSpritePalettes[];
include/battle_gfx_sfx_util.h:16:void DecompressTrainerFrontPic(u16 frontPicId, u8 battlerId);
include/battle_gfx_sfx_util.h:17:void DecompressTrainerBackPic(u16 backPicId, u8 battlerId);
include/menu.h:9:#define MENU_B_PRESSED -1
include/menu.h:74:void *DecompressAndCopyTileDataToVram(u8 bgId, const void *src, u32 size, u16 offset, u8 mode);
include/menu.h:78:void DecompressAndLoadBgGfxUsingHeap(u8 bgId, const void *src, u32 size, u16 offset, u8 mode);
include/menu.h:87:void *malloc_and_decompress(const void *src, u32 *sizeOut);
include/menu.h:88:u16 copy_decompressed_tile_data_to_vram(u8 bgId, const void *src, u16 size, u16 offset, u8 mode);
include/menu.h:89:void AddTextPrinterForMessage(bool8 allowSkippingDelayWithButtonPress);
include/menu.h:102:void AddTextPrinterForMessage_2(bool8 allowSkippingDelayWithButtonPress);
include/menu.h:115:u8 InitMenuInUpperLeftCorner(u8 windowId, u8 itemCount, u8 initialCursorPos, bool8 APressMuted);
include/menu.h:123:void AddTextPrinterWithCustomSpeedForMessage(bool8 allowSkippingDelayWithButtonPress, u8 speed);
pokeemerald.map:48:                              src/decompress.o (LZ77UnCompWram)
pokeemerald.map:50:                              src/decompress.o (LZ77UnCompVram)
pokeemerald.map:74: .data          0x0000000000000000        0x0 src/decompress.o
pokeemerald.map:76:                0x0000000000000000       0x20 src/decompress.o
pokeemerald.map:3936: src/decompress.o(ewram_data)
pokeemerald.map:3937: ewram_data     0x000000000201c000     0x4000 src/decompress.o
pokeemerald.map:3938:                0x000000000201c000                gDecompressionBuffer
pokeemerald.map:4273:                0x0000000002037060                gPaletteDecompressionBuffer
pokeemerald.map:4653:                0x000000000203bf3c                gItemIconDecompressionBuffer
pokeemerald.map:4944: .bss           0x0000000003001aa8        0x0 src/decompress.o
pokeemerald.map:5381:                0x00000000030030f8                gSuppressLinkErrorMessage = .
pokeemerald.map:6172:                0x0000000008004c40                DecompressGlyphTile
pokeemerald.map:6328:                0x000000000800b370                SetSuppressLinkErrorMessage
pokeemerald.map:6691: src/decompress.o(.text)
pokeemerald.map:6692: .text          0x00000000080345b8      0x524 src/decompress.o
pokeemerald.map:6693:                0x00000000080345b8                LZDecompressWram
pokeemerald.map:6694:                0x00000000080345c4                LZDecompressVram
pokeemerald.map:6695:                0x00000000080345d0                LoadCompressedSpriteSheet
pokeemerald.map:6696:                0x0000000008034604                LoadCompressedSpriteSheetOverrideBuffer
pokeemerald.map:6697:                0x000000000803462c                LoadCompressedSpritePalette
pokeemerald.map:6698:                0x0000000008034660                LoadCompressedSpritePaletteOverrideBuffer
pokeemerald.map:6699:                0x0000000008034690                DecompressPicFromTable
pokeemerald.map:6700:                0x00000000080346b8                DecompressPicFromTableGender
pokeemerald.map:6703:                0x00000000080347e4                Unused_LZDecompressWramIndirect
pokeemerald.map:6704:                0x0000000008034a48                GetDecompressedDataSize
pokeemerald.map:6705:                0x0000000008034a5c                LoadCompressedSpriteSheetUsingHeap
pokeemerald.map:6706:                0x0000000008034a98                LoadCompressedSpritePaletteUsingHeap
pokeemerald.map:6788:                0x0000000008040d90                PressurePPLose
pokeemerald.map:6789:                0x0000000008040e58                PressurePPLoseOnUsingImprison
pokeemerald.map:6790:                0x0000000008040f90                PressurePPLoseOnUsingPerishSong
pokeemerald.map:6992:                0x0000000008077ff0                DecompressTrainerFrontPic
pokeemerald.map:6993:                0x000000000807803c                DecompressTrainerBackPic
pokeemerald.map:8582:                0x00000000080b9f54                ScrCmd_waitbuttonpress
pokeemerald.map:8778:                0x00000000080c0d48                LoadCompressedPalette
pokeemerald.map:8909:                0x00000000080c65e0                AnimLoadCompressedBgGfx
pokeemerald.map:8910:                0x00000000080c6668                AnimLoadCompressedBgTilemap
pokeemerald.map:8911:                0x00000000080c6680                AnimLoadCompressedBgTilemapHandleContest
pokeemerald.map:9993:                0x00000000081241d4                AnimTask_CompressTargetHorizontally
pokeemerald.map:10344:                0x0000000008145fd4                GetLRKeysPressed
pokeemerald.map:10345:                0x0000000008146010                GetLRKeysPressedAndHeld
pokeemerald.map:10687:                0x000000000816a914                MauvilleGymPressSwitch
pokeemerald.map:11506:                0x00000000081cce84                DecompressAndCopyTileDataToVram
pokeemerald.map:11507:                0x00000000081ccefc                DecompressAndLoadBgGfxUsingHeap
pokeemerald.map:11508:                0x00000000081ccfb4                malloc_and_decompress
pokeemerald.map:11509:                0x00000000081ccfe4                copy_decompressed_tile_data_to_vram
pokeemerald.map:14539:                0x0000000008242914                SlateportCity_OceanicMuseum_2F_EventScript_PressureExperiment
pokeemerald.map:14608:                0x0000000008244aa7                MauvilleCity_Gym_EventScript_Switch1Pressed
pokeemerald.map:14609:                0x0000000008244ab5                MauvilleCity_Gym_EventScript_Switch2Pressed
pokeemerald.map:14610:                0x0000000008244ac3                MauvilleCity_Gym_EventScript_Switch3Pressed
pokeemerald.map:14611:                0x0000000008244ad1                MauvilleCity_Gym_EventScript_Switch4Pressed
pokeemerald.map:14623:                0x0000000008244c85                MauvilleCity_Gym_EventScript_PressFloorSwitch
pokeemerald.map:18902:                0x00000000082a2909                Route110_TrickHousePuzzle2_EventScript_PressButton1
pokeemerald.map:18903:                0x00000000082a291c                Route110_TrickHousePuzzle2_EventScript_PressButton2
pokeemerald.map:18904:                0x00000000082a292f                Route110_TrickHousePuzzle2_EventScript_PressButton3
pokeemerald.map:18905:                0x00000000082a2942                Route110_TrickHousePuzzle2_EventScript_PressButton4
pokeemerald.map:18911:                0x00000000082a2c4f                Route110_TrickHousePuzzle3_EventScript_PressedButton1Metatile
pokeemerald.map:18912:                0x00000000082a2c59                Route110_TrickHousePuzzle3_EventScript_PressedButton2Metatile
pokeemerald.map:18913:                0x00000000082a2c63                Route110_TrickHousePuzzle3_EventScript_PressedButton3Metatile
pokeemerald.map:18914:                0x00000000082a2c6d                Route110_TrickHousePuzzle3_EventScript_PressedButton4Metatile
pokeemerald.map:18921:                0x00000000082a31dd                Route110_TrickHousePuzzle3_EventScript_PressButton
pokeemerald.map:20214:                0x00000000082b5788                gText_MostImpressiveMon
pokeemerald.map:22200:                0x000000000830cc0b                Move_FLYING_PRESS
pokeemerald.map:22249:                0x0000000008310a7d                Move_FIRST_IMPRESSION
pokeemerald.map:22330:                0x000000000831675d                Move_BODY_PRESS
pokeemerald.map:24257:                0x000000000841faf8                gTilesetTiles_SecretBaseBrownCaveCompressed
pokeemerald.map:24259:                0x0000000008420278                gTilesetTiles_SecretBaseTreeCompressed
pokeemerald.map:24261:                0x000000000842099c                gTilesetTiles_SecretBaseShrubCompressed
pokeemerald.map:24263:                0x0000000008421104                gTilesetTiles_SecretBaseBlueCaveCompressed
pokeemerald.map:24265:                0x0000000008421720                gTilesetTiles_SecretBaseYellowCaveCompressed
pokeemerald.map:24267:                0x0000000008421e58                gTilesetTiles_SecretBaseRedCaveCompressed
pokeemerald.map:29252:                0x00000000086788d8                gAcupressureSpriteTemplate
pokeemerald.map:30185:                0x000000000867fadc                gFirstImpressionPoundTemplate
pokeemerald.map:30670:                0x0000000008683365                gEasyChatWord_Pressure
pokeemerald.map:33096:                0x00000000086d7c4d                gText_PauseUntilPress
pokeemerald.map:33693:                0x00000000086da178                gText_QuestionPressTheAButton
pokeemerald.map:33717:                0x00000000086da446                gText_SaveCompletePressA
pokeemerald.map:33932:                0x00000000086db2b4                gText_PressingSpeed
pokeemerald.map:33941:                0x00000000086db304                gText_PressesRankings
pokeemerald.map:33945:                0x00000000086db35c                gText_PressingPowerRankings
pokeemerald.map:33947:                0x00000000086db380                gText_PressingSpeedRankings
pokeemerald.map:34031:                0x00000000086dbad9                gJPText_SelectConnectAndPressA
pokeemerald.map:34149:                0x00000000086dc22c                gText_PressAToLoadEvent
pokeemerald.map:34324:                0x00000000086dd084                gText_SaveCompletedPressA
pokeemerald.map:38244:                0x00000000091d1768                gBlankGfxCompressed
pokeemerald.map:38478:                0x00000000091df358                gBattleAnimSpriteGfx_Acupressure
pokeemerald.map:38479:                0x00000000091df458                gBattleAnimSpritePal_Acupressure
pokeemerald.map:48230:                0x0000000009683814                gTitleScreenPressStartPal
pokeemerald.map:48231:                0x0000000009683834                gTitleScreenPressStartGfx
pokeemerald.map:48296:                0x0000000000000000       0x20 src/decompress.o
pokeemerald.map:48894:                0x0000000000000000      0x1ed src/decompress.o
pokeemerald.map:49510: .debug_info    0x0000000000000000    0x1241d src/decompress.o
pokeemerald.map:49824: .debug_abbrev  0x0000000000000000      0x275 src/decompress.o
pokeemerald.map:50138: .debug_line    0x0000000000000000      0x741 src/decompress.o
pokeemerald.map:50627:LOAD src/decompress.o
asmdiff.ps1:116:Invoke-Expression "$DiffTool .\baserom.dump .\pokeemerald.dump"
docs/legacy_WSL1_INSTALL.md:32:    The last command will ask for the selection of packages to install. Just press Enter to install all of them, followed by entering Y to proceed with the installation.
charmap.txt:431:PAUSE_UNTIL_PRESS = FC 09
INSTALL.md:262:    The command with gba-dev will ask for the selection of packages to install. Just press Enter to install all of them, followed by entering Y to proceed with the installation.
INSTALL.md:341:    The last command will ask for the selection of packages to install. Just press Enter to install all of them, followed by entering Y to proceed with the installation.
INSTALL.md:499:    The last command will ask for the selection of packages to install. Just press Enter to install all of them, followed by entering Y to proceed with the installation.
INSTALL.md:529:    The last command will ask for the selection of packages to install. Just press Enter to install all of them, followed by entering Y to proceed with the installation.
INSTALL.md:549:    This will ask for the selection of packages to install. Just press Enter to install all of them, followed by entering Y to proceed with the installation.
asm/macros/event.inc:876:	@ Blocks script execution until the player presses the A or B button.
asm/macros/event.inc:877:	.macro waitbuttonpress
asm/macros/event.inc:882:	@ Their selection is stored in VAR_RESULT as NO (0) or YES (1). Pressing B is equivalent to answering NO
asm/macros/event.inc:891:	@ If ignoreBPress is set to a non-zero value, then the user will not be allowed to back out of the multichoice with the B button.
asm/macros/event.inc:892:	.macro multichoice x:req, y:req, multichoiceId:req, ignoreBPress:req
asm/macros/event.inc:897:	.byte \ignoreBPress
asm/macros/event.inc:903:	@ If ignoreBPress is set to a non-zero value, then the user will not be allowed to back out of the multichoice with the B button.
asm/macros/event.inc:904:	.macro multichoicedefault x:req, y:req, multichoiceId:req, default:req, ignoreBPress:req
asm/macros/event.inc:910:	.byte \ignoreBPress
asm/macros/event.inc:916:	@ If ignoreBPress is set to a non-zero value, then the user will not be allowed to back out of the multichoice with the B button.
asm/macros/event.inc:917:	.macro multichoicegrid x:req, y:req, multichoiceId:req, per_row:req, ignoreBPress:req
asm/macros/event.inc:923:	.byte \ignoreBPress
asm/macros/event.inc:941:	.macro drawboxtext left:req, top:req, multichoiceId:req, ignoreBPress:req
asm/macros/event.inc:946:	.byte \ignoreBPress
asm/macros/event.inc:1683:	@ Equivalent to fadescreen but copies gPlttBufferUnfaded to gPaletteDecompressionBuffer on the fade out
asm/macros/event.inc:1934:	@ Prints a braille message, waits for an A or B press, then closes the message.
asm/macros/event.inc:1937:	waitbuttonpress
asm/macros/battle_script.inc:1668:	.macro tryaccupressure battler:req, failInstr:req
asm/macros/battle_script.inc:1669:	various \battler, VARIOUS_ACUPRESSURE
asm/macros/music_voice.inc:154:	.macro cry_uncomp sample @ not compressed
asm/macros/music_voice.inc:160:	.macro cry_reverse_uncomp sample @ not compressed
asm/macros/battle_frontier/apprentice.inc:42:	.macro apprentice_msg  waitbuttonpress:req, which:req
asm/macros/battle_frontier/apprentice.inc:44:	setvar VAR_0x8005, \waitbuttonpress
common_syms/link.txt:18:gSuppressLinkErrorMessage
data/script_cmd_table.inc:112:	.4byte ScrCmd_waitbuttonpress           @ 0x6d
data/battle_scripts_1.s:343:	.4byte BattleScript_EffectAcupressure             @ EFFECT_ACUPRESSURE
data/battle_scripts_1.s:371:	.4byte BattleScript_EffectHit                     @ EFFECT_BODY_PRESS
data/battle_scripts_1.s:1510:	printstring STRINGID_PKMNSABILITYSUPPRESSED
data/battle_scripts_1.s:1737:BattleScript_EffectAcupressure:
data/battle_scripts_1.s:1739:	jumpifbyteequal gBattlerTarget, gBattlerAttacker, BattleScript_EffectAcupressureTry
data/battle_scripts_1.s:1741:BattleScript_EffectAcupressureTry:
data/battle_scripts_1.s:1744:	tryaccupressure BS_TARGET, BattleScript_ButItFailed
data/battle_scripts_1.s:2877:	printstring STRINGID_PKMNSABILITYSUPPRESSED
data/scripts/gift_trainer.inc:9:	waitbuttonpress
data/scripts/gift_trainer.inc:18:	waitbuttonpress
data/scripts/roulette.inc:38:	.string "Pad, then press the A Button.$"
data/scripts/berry_blender.inc:33:	.string "your marker, just press the A Button.\p"
data/scripts/berry_blender.inc:97:	.string "reaches your marker, just press\l"
data/scripts/berry_blender.inc:147:	.string "your marker, press the A Button.\p"
data/scripts/berry_blender.inc:679:	case MULTI_B_PRESSED, BerryBlender_EventScript_CloseLink
data/scripts/debug.inc:4:	waitbuttonpress
data/scripts/debug.inc:48:	waitbuttonpress
data/scripts/gift_battle_card.inc:11:	waitbuttonpress
data/scripts/gift_battle_card.inc:22:	waitbuttonpress
data/scripts/tv.inc:54:	waitbuttonpress
data/scripts/tv.inc:75:	waitbuttonpress
data/scripts/tv.inc:82:	waitbuttonpress
data/scripts/gift_pichu.inc:15:	waitbuttonpress
data/scripts/gift_pichu.inc:26:	waitbuttonpress
data/scripts/profile_man.inc:16:	case MULTI_B_PRESSED, ProfileMan_EventScript_DeclineShowProfile
data/scripts/profile_man.inc:66:	case MULTI_B_PRESSED, ProfileMan_EventScript_DeclineNewProfile
data/scripts/gift_old_sea_map.inc:11:	waitbuttonpress
data/scripts/gift_old_sea_map.inc:19:	waitbuttonpress
data/scripts/gift_old_sea_map.inc:26:	waitbuttonpress
data/scripts/gift_old_sea_map.inc:33:	waitbuttonpress
data/scripts/trainer_hill.inc:66:	waitbuttonpress
data/scripts/gift_altering_cave.inc:11:	waitbuttonpress
data/scripts/day_care.inc:37:	waitbuttonpress
data/scripts/day_care.inc:67:	waitbuttonpress
data/scripts/gift_mystic_ticket.inc:12:	waitbuttonpress
data/scripts/gift_mystic_ticket.inc:20:	waitbuttonpress
data/scripts/gift_mystic_ticket.inc:27:	waitbuttonpress
data/scripts/gift_mystic_ticket.inc:34:	waitbuttonpress
data/scripts/record_mix.inc:18:	waitbuttonpress
data/scripts/prof_birch.inc:57:	waitbuttonpress
data/scripts/mauville_man.inc:265:	.string "other TRAINERS with more impressive\l"
data/scripts/mauville_man.inc:811:	waitbuttonpress
data/scripts/field_poison.inc:13:	waitbuttonpress
data/scripts/field_poison.inc:29:	waitbuttonpress
data/scripts/berry_tree.inc:17:	waitbuttonpress
data/scripts/berry_tree.inc:28:	waitbuttonpress
data/scripts/berry_tree.inc:56:	waitbuttonpress
data/scripts/berry_tree.inc:64:	waitbuttonpress
data/scripts/berry_tree.inc:72:	waitbuttonpress
data/scripts/berry_tree.inc:81:	waitbuttonpress
data/scripts/berry_tree.inc:119:	waitbuttonpress
data/scripts/berry_tree.inc:122:	waitbuttonpress
data/scripts/berry_tree.inc:129:	waitbuttonpress
data/scripts/berry_tree.inc:136:	waitbuttonpress
data/scripts/berry_tree.inc:171:	waitbuttonpress
data/scripts/berry_tree.inc:182:	waitbuttonpress
data/scripts/contest_hall.inc:66:	case MULTI_B_PRESSED, LilycoveCity_ContestLobby_EventScript_CancelEnterContest
data/scripts/contest_hall.inc:78:	case MULTI_B_PRESSED, LilycoveCity_ContestLobby_EventScript_AskEnterContest
data/scripts/contest_hall.inc:123:	case MULTI_B_PRESSED, LilycoveCity_ContestLobby_EventScript_CancelEnterContest
data/scripts/contest_hall.inc:154:	case MULTI_B_PRESSED, LilycoveCity_ContestLobby_EventScript_CancelEnterContest
data/scripts/cable_club.inc:266:	case MULTI_B_PRESSED, CableClub_EventScript_AbortLink
data/scripts/cable_club.inc:276:	case MULTI_B_PRESSED, CableClub_EventScript_AbortLink
data/scripts/cable_club.inc:294:	case MULTI_B_PRESSED, CableClub_EventScript_AbortLink
data/scripts/cable_club.inc:660:	waitbuttonpress
data/scripts/cable_club.inc:779:	waitbuttonpress
data/scripts/cable_club.inc:821:	waitbuttonpress
data/scripts/cable_club.inc:830:	waitbuttonpress
data/scripts/cable_club.inc:875:	case MULTI_B_PRESSED, CableClub_EventScript_AbortLink
data/scripts/cable_club.inc:980:	case MULTI_B_PRESSED, CableClub_EventScript_AbortLink
data/scripts/cable_club.inc:991:	case MULTI_B_PRESSED, CableClub_EventScript_AbortLink
data/scripts/cable_club.inc:1001:	case MULTI_B_PRESSED, CableClub_EventScript_AbortLink
data/scripts/cable_club.inc:1011:	case MULTI_B_PRESSED, CableClub_EventScript_AbortLink
data/scripts/cable_club.inc:1033:	case MULTI_B_PRESSED, CableClub_EventScript_AbortLink
data/scripts/cable_club.inc:1104:	case MULTI_B_PRESSED, CableClub_EventScript_AbortLink
data/scripts/cable_club.inc:1131:	case MULTI_B_PRESSED, CableClub_EventScript_AbortLink
data/scripts/cable_club.inc:1158:	case MULTI_B_PRESSED, CableClub_EventScript_AbortLink
data/scripts/cable_club.inc:1274:	case MULTI_B_PRESSED, MossdeepCity_GameCorner_1F_EventScript_MinigameInfoExit
data/scripts/cable_club.inc:1307:	case MULTI_B_PRESSED, MossdeepCity_GameCorner_1F_EventScript_AbortMinigame
data/scripts/cable_club.inc:1350:	case MULTI_B_PRESSED, MossdeepCity_GameCorner_1F_EventScript_AbortMinigame
data/scripts/safari_zone.inc:29:	waitbuttonpress
data/scripts/safari_zone.inc:38:	waitbuttonpress
data/scripts/safari_zone.inc:61:	waitbuttonpress
data/scripts/safari_zone.inc:68:	waitbuttonpress
data/scripts/pc.inc:24:	case MULTI_B_PRESSED, EventScript_TurnOffPC
data/scripts/trainer_battle.inc:39:	waitbuttonpress
data/scripts/trainer_battle.inc:61:	waitbuttonpress
data/scripts/trainer_battle.inc:79:	waitbuttonpress
data/scripts/trainer_battle.inc:91:	waitbuttonpress
data/scripts/trainer_battle.inc:107:	waitbuttonpress
data/scripts/trainer_battle.inc:129:	waitbuttonpress
data/scripts/gift_aurora_ticket.inc:11:	waitbuttonpress
data/scripts/gift_aurora_ticket.inc:19:	waitbuttonpress
data/scripts/gift_aurora_ticket.inc:26:	waitbuttonpress
data/scripts/gift_aurora_ticket.inc:33:	waitbuttonpress
data/scripts/std_msgbox.inc:6:	waitbuttonpress
data/scripts/std_msgbox.inc:14:	waitbuttonpress
data/scripts/std_msgbox.inc:21:	waitbuttonpress
data/scripts/shared_secret_base.inc:33:	waitbuttonpress
data/scripts/shared_secret_base.inc:57:	case MULTI_B_PRESSED, SecretBase_EventScript_PCTurnOff
data/scripts/shared_secret_base.inc:66:	case MULTI_B_PRESSED, SecretBase_EventScript_PCTurnOff
data/scripts/shared_secret_base.inc:92:	waitbuttonpress
data/scripts/shared_secret_base.inc:106:	case MULTI_B_PRESSED, SecretBase_EventScript_PCTurnOff
data/scripts/gift_stamp_card.inc:13:	waitbuttonpress
data/battle_anim_scripts.s:391:	.4byte Move_ACUPRESSURE
data/battle_anim_scripts.s:586:	.4byte Move_FLYING_PRESS
data/battle_anim_scripts.s:650:	.4byte Move_FIRST_IMPRESSION
data/battle_anim_scripts.s:732:	.4byte Move_BODY_PRESS
data/battle_anim_scripts.s:1236:Move_ACUPRESSURE:
data/battle_anim_scripts.s:1237:	loadspritegfx ANIM_TAG_ACUPRESSURE
data/battle_anim_scripts.s:1239:	createsprite gAcupressureSpriteTemplate, ANIM_ATTACKER, 40, 0, -40, 40
data/battle_anim_scripts.s:4393:	loadspritegfx ANIM_TAG_ACUPRESSURE
data/battle_anim_scripts.s:4398:	createvisualtask AnimTask_CompressTargetHorizontally, 2
data/battle_anim_scripts.s:8067:Move_FLYING_PRESS::
data/battle_anim_scripts.s:10403:Move_FIRST_IMPRESSION::
data/battle_anim_scripts.s:10418:	launchtemplate gFirstImpressionPoundTemplate 0x4 0x4 0xfff6 0x0 0x1 0x0
data/battle_anim_scripts.s:13655:Move_BODY_PRESS::
data/specials.inc:154:	def_special MauvilleGymPressSwitch
data/maps/BattleFrontier_OutsideEast/scripts.inc:321:	.string "I may not look that impressive now,\n"
data/maps/LilycoveCity_ContestLobby/scripts.inc:554:	waitbuttonpress
data/maps/LilycoveCity_ContestLobby/scripts.inc:562:	waitbuttonpress
data/maps/LilycoveCity_ContestLobby/scripts.inc:636:	case MULTI_B_PRESSED, LilycoveCity_ContestLobby_EventScript_CancelLinkContest
data/maps/LilycoveCity_ContestLobby/scripts.inc:652:	case MULTI_B_PRESSED, LilycoveCity_ContestLobby_EventScript_CancelLinkContest
data/maps/LilycoveCity_ContestLobby/scripts.inc:672:	case MULTI_B_PRESSED, LilycoveCity_ContestLobby_EventScript_CancelLinkContest
data/maps/LilycoveCity_ContestLobby/scripts.inc:686:	case MULTI_B_PRESSED, LilycoveCity_ContestLobby_EventScript_AskEnterLinkContest
data/maps/LilycoveCity_ContestLobby/scripts.inc:859:	case MULTI_B_PRESSED, LilycoveCity_ContestLobby_EventScript_CancelLinkContest
data/maps/RustboroCity_PokemonSchool/scripts.inc:21:	case MULTI_B_PRESSED, RustboroCity_PokemonSchool_EventScript_ExitTopicSelect
data/maps/RustboroCity_PokemonSchool/scripts.inc:328:	.string "That's pretty impressive, I'd say.\p"
data/maps/RustboroCity_PokemonSchool/scripts.inc:345:	.string "That's pretty impressive, I'd say, for\n"
data/maps/RustboroCity_House3/scripts.inc:26:	.string "It's my expression of, uh…\n"
data/maps/Route116/scripts.inc:461:	.string "evolving, press the B Button while it\l"
data/maps/BattleFrontier_BattlePyramidFloor/scripts.inc:111:	waitbuttonpress
data/maps/BattleFrontier_BattlePyramidFloor/scripts.inc:597:	.string "That's pretty impressive!\p"
data/maps/BattleFrontier_BattlePyramidFloor/scripts.inc:602:	.string "That's pretty impressive!\p"
data/maps/BattleFrontier_BattlePyramidFloor/scripts.inc:607:	.string "That's pretty impressive!\p"
data/maps/BattleFrontier_BattlePyramidFloor/scripts.inc:612:	.string "That's pretty impressive!\p"
data/maps/BattleFrontier_BattlePyramidFloor/scripts.inc:617:	.string "That's pretty impressive!\p"
data/maps/BattleFrontier_BattlePyramidFloor/scripts.inc:622:	.string "That's pretty impressive!\p"
data/maps/BattleFrontier_BattlePyramidFloor/scripts.inc:627:	.string "That's pretty impressive!\p"
data/maps/BattleFrontier_BattlePyramidFloor/scripts.inc:632:	.string "That's pretty impressive!\p"
data/maps/BattleFrontier_BattleTowerMultiPartnerRoom/scripts.inc:171:	waitbuttonpress
data/maps/BattleFrontier_BattleTowerMultiPartnerRoom/scripts.inc:174:	waitbuttonpress
data/maps/BattleFrontier_BattleTowerMultiPartnerRoom/scripts.inc:180:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerMultiPartnerRoom_EventScript_RejectPartner
data/maps/BattleFrontier_BattleTowerMultiPartnerRoom/scripts.inc:183:	waitbuttonpress
data/maps/BattleFrontier_BattleTowerMultiPartnerRoom/scripts.inc:197:	waitbuttonpress
data/maps/BattleFrontier_BattleTowerMultiPartnerRoom/scripts.inc:1425:	.string "Don't you think we'd make an impressive\n"
data/maps/BattleFrontier_ReceptionGate/scripts.inc:158:	case MULTI_B_PRESSED, BattleFrontier_ReceptionGate_EventScript_ExitFacilityGuide
data/maps/BattleFrontier_ReceptionGate/scripts.inc:229:	case MULTI_B_PRESSED, BattleFrontier_ReceptionGate_EventScript_ExitRulesGuide
data/maps/BattleFrontier_ReceptionGate/scripts.inc:278:	case MULTI_B_PRESSED, BattleFrontier_ReceptionGate_EventScript_ExitFrontierPassGuide
data/maps/SlateportCity/scripts.inc:781:	case MULTI_B_PRESSED, SlateportCity_EventScript_CancelPowderItemSelect
data/maps/BattleFrontier_Lounge2/scripts.inc:41:	waitbuttonpress
data/maps/RustboroCity/scripts.inc:95:	case MULTI_B_PRESSED, RustboroCity_EventScript_PleaseSelectPokenav
data/maps/LavaridgeTown_PokemonCenter_1F/scripts.inc:17:	waitbuttonpress
data/maps/SlateportCity_SternsShipyard_1F/scripts.inc:136:	.string "the sea change its expression.\p"
data/maps/LilycoveCity_ContestHall/scripts.inc:537:	.string "BE IMPRESSED BY SMART POKéMON!$"
data/maps/Route113/scripts.inc:160:	.string "Simply press SELECT to use\n"
data/maps/RustboroCity_CuttersHouse/scripts.inc:25:	.string "That determined expression…\n"
data/maps/BattleFrontier_BattlePalaceBattleRoom/scripts.inc:111:	case MULTI_B_PRESSED, BattleFrontier_BattlePalaceBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattlePalaceBattleRoom/scripts.inc:119:	case MULTI_B_PRESSED, BattleFrontier_BattlePalaceBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattlePalaceBattleRoom/scripts.inc:128:	case MULTI_B_PRESSED, BattleFrontier_BattlePalaceBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattlePalaceBattleRoom/scripts.inc:139:	case MULTI_B_PRESSED, BattleFrontier_BattlePalaceBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattlePalaceBattleRoom/scripts.inc:148:	case MULTI_B_PRESSED, BattleFrontier_BattlePalaceBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattlePalaceBattleRoom/scripts.inc:185:	case MULTI_B_PRESSED, BattleFrontier_BattlePalaceBattleRoom_EventScript_AskReadyForMaven
data/maps/BattleFrontier_BattlePalaceBattleRoom/scripts.inc:193:	case MULTI_B_PRESSED, BattleFrontier_BattlePalaceBattleRoom_EventScript_AskReadyForMaven
data/maps/BattleFrontier_BattleArenaBattleRoom/scripts.inc:153:	case MULTI_B_PRESSED, BattleFrontier_BattleArenaBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleArenaBattleRoom/scripts.inc:161:	case MULTI_B_PRESSED, BattleFrontier_BattleArenaBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleArenaBattleRoom/scripts.inc:170:	case MULTI_B_PRESSED, BattleFrontier_BattleArenaBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleArenaBattleRoom/scripts.inc:181:	case MULTI_B_PRESSED, BattleFrontier_BattleArenaBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleArenaBattleRoom/scripts.inc:190:	case MULTI_B_PRESSED, BattleFrontier_BattleArenaBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleArenaBattleRoom/scripts.inc:260:	case MULTI_B_PRESSED, BattleFrontier_BattleArenaBattleRoom_EventScript_AskReadyForTycoon
data/maps/BattleFrontier_BattleArenaBattleRoom/scripts.inc:268:	case MULTI_B_PRESSED, BattleFrontier_BattleArenaBattleRoom_EventScript_AskReadyForTycoon
data/maps/Route104_MrBrineysHouse/scripts.inc:49:	case MULTI_B_PRESSED, Route104_MrBrineysHouse_EventScript_DeclineSailing
data/maps/OldaleTown_PokemonCenter_1F/scripts.inc:17:	waitbuttonpress
data/maps/SlateportCity_BattleTentLobby/scripts.inc:107:	case MULTI_B_PRESSED, SlateportCity_BattleTentLobby_EventScript_CancelChallenge
data/maps/SlateportCity_BattleTentLobby/scripts.inc:117:	case MULTI_B_PRESSED, SlateportCity_BattleTentLobby_EventScript_LoadPartyCancelChallenge
data/maps/SlateportCity_BattleTentLobby/scripts.inc:245:	case MULTI_B_PRESSED, SlateportCity_BattleTentLobby_EventScript_ExitRules
data/maps/MauvilleCity_Gym/scripts.inc:9:	case 1, MauvilleCity_Gym_EventScript_Switch1Pressed
data/maps/MauvilleCity_Gym/scripts.inc:10:	case 2, MauvilleCity_Gym_EventScript_Switch2Pressed
data/maps/MauvilleCity_Gym/scripts.inc:11:	case 3, MauvilleCity_Gym_EventScript_Switch3Pressed
data/maps/MauvilleCity_Gym/scripts.inc:12:	case 4, MauvilleCity_Gym_EventScript_Switch4Pressed
data/maps/MauvilleCity_Gym/scripts.inc:48:MauvilleCity_Gym_EventScript_Switch1Pressed::
data/maps/MauvilleCity_Gym/scripts.inc:50:	special MauvilleGymPressSwitch
data/maps/MauvilleCity_Gym/scripts.inc:54:MauvilleCity_Gym_EventScript_Switch2Pressed::
data/maps/MauvilleCity_Gym/scripts.inc:56:	special MauvilleGymPressSwitch
data/maps/MauvilleCity_Gym/scripts.inc:60:MauvilleCity_Gym_EventScript_Switch3Pressed::
data/maps/MauvilleCity_Gym/scripts.inc:62:	special MauvilleGymPressSwitch
data/maps/MauvilleCity_Gym/scripts.inc:66:MauvilleCity_Gym_EventScript_Switch4Pressed::
data/maps/MauvilleCity_Gym/scripts.inc:68:	special MauvilleGymPressSwitch
data/maps/MauvilleCity_Gym/scripts.inc:145:	goto MauvilleCity_Gym_EventScript_PressFloorSwitch
data/maps/MauvilleCity_Gym/scripts.inc:154:	goto MauvilleCity_Gym_EventScript_PressFloorSwitch
data/maps/MauvilleCity_Gym/scripts.inc:163:	goto MauvilleCity_Gym_EventScript_PressFloorSwitch
data/maps/MauvilleCity_Gym/scripts.inc:172:	goto MauvilleCity_Gym_EventScript_PressFloorSwitch
data/maps/MauvilleCity_Gym/scripts.inc:175:MauvilleCity_Gym_EventScript_PressFloorSwitch::
data/maps/MauvilleCity_Gym/scripts.inc:177:	special MauvilleGymPressSwitch
data/maps/BattleFrontier_BattleTowerMultiBattleRoom/scripts.inc:155:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents
data/maps/BattleFrontier_BattleTowerMultiBattleRoom/scripts.inc:163:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents
data/maps/BattleFrontier_BattleTowerMultiBattleRoom/scripts.inc:172:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents
data/maps/BattleFrontier_BattleTowerMultiBattleRoom/scripts.inc:183:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents
data/maps/BattleFrontier_BattleTowerMultiBattleRoom/scripts.inc:192:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents
data/maps/BattleFrontier_BattleTowerMultiBattleRoom/scripts.inc:322:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskRetireChallengeLink
data/maps/BattleFrontier_BattleTowerMultiBattleRoom/scripts.inc:330:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskRetireChallengeLink
data/maps/BattleFrontier_BattleTowerMultiBattleRoom/scripts.inc:350:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents
data/maps/LavaridgeTown_HerbShop/scripts.inc:63:	.string "Herbal medicine works impressively well.\n"
data/maps/SootopolisCity_MysteryEventsHouse_B1F/scripts.inc:48:	waitbuttonpress
data/maps/SootopolisCity_MysteryEventsHouse_B1F/scripts.inc:55:	waitbuttonpress
data/maps/SlateportCity_Harbor/scripts.inc:184:	case MULTI_B_PRESSED, SlateportCity_Harbor_EventScript_CancelDestinationSelect
data/maps/SlateportCity_Harbor/scripts.inc:193:	case MULTI_B_PRESSED, SlateportCity_Harbor_EventScript_CancelDestinationSelect
data/maps/SlateportCity_Harbor/scripts.inc:347:	case MULTI_B_PRESSED, SlateportCity_Harbor_EventScript_DeclineTrade
data/maps/LilycoveCity_DepartmentStoreElevator/scripts.inc:57:	case MULTI_B_PRESSED, LilycoveCity_DepartmentStoreElevator_EventScript_ExitFloorSelect
data/maps/FallarborTown_PokemonCenter_1F/scripts.inc:18:	waitbuttonpress
data/maps/DewfordTown_PokemonCenter_1F/scripts.inc:17:	waitbuttonpress
data/maps/BattleFrontier_BattlePyramidLobby/scripts.inc:121:	case MULTI_B_PRESSED, BattleFrontier_BattlePyramidLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattlePyramidLobby/scripts.inc:129:	case MULTI_B_PRESSED, BattleFrontier_BattlePyramidLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattlePyramidLobby/scripts.inc:145:	case MULTI_B_PRESSED, BattleFrontier_BattlePyramidLobby_EventScript_LoadPartyAndCancelChallenge
data/maps/BattleFrontier_BattlePyramidLobby/scripts.inc:221:	case MULTI_B_PRESSED, BattleFrontier_BattlePyramidLobby_EventScript_NoHint
data/maps/BattleFrontier_BattlePyramidLobby/scripts.inc:363:	waitbuttonpress
data/maps/BattleFrontier_BattlePyramidLobby/scripts.inc:445:	case MULTI_B_PRESSED, BattleFrontier_BattlePyramidLobby_EventScript_ExitPickItems
data/maps/BattleFrontier_BattlePyramidLobby/scripts.inc:500:	case MULTI_B_PRESSED, BattleFrontier_BattlePyramidLobby_EventScript_ExitRules
data/maps/BattleFrontier_BattlePyramidLobby/scripts.inc:738:	.string "I sense the tremendous pressure of\n"
data/maps/VerdanturfTown_BattleTentBattleRoom/scripts.inc:97:	case MULTI_B_PRESSED, VerdanturfTown_BattleTentBattleRoom_EventScript_AskContinueChallenge
data/maps/VerdanturfTown_BattleTentBattleRoom/scripts.inc:106:	case MULTI_B_PRESSED, VerdanturfTown_BattleTentBattleRoom_EventScript_AskContinueChallenge
data/maps/BattleFrontier_BattleFactoryLobby/scripts.inc:88:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryLobby_EventScript_EndRecordBattle
data/maps/BattleFrontier_BattleFactoryLobby/scripts.inc:138:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleFactoryLobby/scripts.inc:146:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleFactoryLobby/scripts.inc:152:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryLobby_EventScript_LoadPartyAndCancelChallenge
data/maps/BattleFrontier_BattleFactoryLobby/scripts.inc:245:	waitbuttonpress
data/maps/BattleFrontier_BattleFactoryLobby/scripts.inc:253:	waitbuttonpress
data/maps/BattleFrontier_BattleFactoryLobby/scripts.inc:293:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryLobby_EventScript_ExitRules
data/maps/TrainerHill_Entrance/scripts.inc:107:	waitbuttonpress
data/maps/TrainerHill_Entrance/scripts.inc:147:	case MULTI_B_PRESSED, TrainerHill_Entrance_EventScript_CancelEntry
data/maps/TrainerHill_Entrance/scripts.inc:159:	case MULTI_B_PRESSED, TrainerHill_Entrance_EventScript_CancelEntry
data/maps/BattleFrontier_Lounge3/scripts.inc:22:	waitbuttonpress
data/maps/BattleFrontier_Lounge3/scripts.inc:41:	case MULTI_B_PRESSED, BattleFrontier_Lounge3_EventScript_CancelBet
data/maps/BattleFrontier_Lounge3/scripts.inc:81:	waitbuttonpress
data/maps/BattleFrontier_Lounge3/scripts.inc:154:	waitbuttonpress
data/maps/SootopolisCity_PokemonCenter_1F/scripts.inc:16:	waitbuttonpress
data/maps/MauvilleCity_PokemonCenter_1F/scripts.inc:22:	waitbuttonpress
data/maps/BattleFrontier_Lounge1/scripts.inc:81:	msgbox BattleFrontier_Lounge1_Text_ImpressiveAbility, MSGBOX_DEFAULT
data/maps/BattleFrontier_Lounge1/scripts.inc:126:	msgbox BattleFrontier_Lounge1_Text_StatImpressive, MSGBOX_DEFAULT
data/maps/BattleFrontier_Lounge1/scripts.inc:176:BattleFrontier_Lounge1_Text_ImpressiveAbility:
data/maps/BattleFrontier_Lounge1/scripts.inc:179:	.string "quite impressive in ability!$"
data/maps/BattleFrontier_Lounge1/scripts.inc:214:BattleFrontier_Lounge1_Text_StatImpressive:
data/maps/BattleFrontier_Lounge1/scripts.inc:215:	.string "That stat is quite impressive.\n"
data/maps/IslandCave/scripts.inc:78:	waitbuttonpress
data/maps/LittlerootTown_BrendansHouse_1F/scripts.inc:387:	.string "“Press the B Button to run while\n"
data/maps/LittlerootTown_BrendansHouse_1F/scripts.inc:397:	.string "That's the impression I get.\n"
data/maps/PetalburgCity_PokemonCenter_1F/scripts.inc:17:	waitbuttonpress
data/maps/BattleFrontier_BattleFactoryPreBattleRoom/scripts.inc:100:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryPreBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleFactoryPreBattleRoom/scripts.inc:108:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryPreBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleFactoryPreBattleRoom/scripts.inc:117:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryPreBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleFactoryPreBattleRoom/scripts.inc:128:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryPreBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleFactoryPreBattleRoom/scripts.inc:137:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryPreBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleFactoryPreBattleRoom/scripts.inc:151:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryPreBattleRoom_EventScript_EnterBattleRoom
data/maps/BattleFrontier_BattleFactoryPreBattleRoom/scripts.inc:367:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryPreBattleRoom_EventScript_AskReadyForHead
data/maps/BattleFrontier_BattleFactoryPreBattleRoom/scripts.inc:375:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryPreBattleRoom_EventScript_AskReadyForHead
data/maps/BattleFrontier_BattleFactoryPreBattleRoom/scripts.inc:383:	case MULTI_B_PRESSED, BattleFrontier_BattleFactoryPreBattleRoom_EventScript_EnterBattleRoom
data/maps/LilycoveCity_PokemonCenter_1F/scripts.inc:32:	waitbuttonpress
data/maps/Route110_TrickHousePuzzle3/scripts.inc:26:	call_if_eq VAR_TEMP_8, 1, Route110_TrickHousePuzzle3_EventScript_PressedButton1Metatile
data/maps/Route110_TrickHousePuzzle3/scripts.inc:27:	call_if_eq VAR_TEMP_8, 2, Route110_TrickHousePuzzle3_EventScript_PressedButton2Metatile
data/maps/Route110_TrickHousePuzzle3/scripts.inc:28:	call_if_eq VAR_TEMP_8, 3, Route110_TrickHousePuzzle3_EventScript_PressedButton3Metatile
data/maps/Route110_TrickHousePuzzle3/scripts.inc:29:	call_if_eq VAR_TEMP_8, 4, Route110_TrickHousePuzzle3_EventScript_PressedButton4Metatile
data/maps/Route110_TrickHousePuzzle3/scripts.inc:32:Route110_TrickHousePuzzle3_EventScript_PressedButton1Metatile::
data/maps/Route110_TrickHousePuzzle3/scripts.inc:33:	setmetatile 4, 14, METATILE_TrickHousePuzzle_Button_Pressed, FALSE
data/maps/Route110_TrickHousePuzzle3/scripts.inc:36:Route110_TrickHousePuzzle3_EventScript_PressedButton2Metatile::
data/maps/Route110_TrickHousePuzzle3/scripts.inc:37:	setmetatile 3, 11, METATILE_TrickHousePuzzle_Button_Pressed, FALSE
data/maps/Route110_TrickHousePuzzle3/scripts.inc:40:Route110_TrickHousePuzzle3_EventScript_PressedButton3Metatile::
data/maps/Route110_TrickHousePuzzle3/scripts.inc:41:	setmetatile 12, 5, METATILE_TrickHousePuzzle_Button_Pressed, FALSE
data/maps/Route110_TrickHousePuzzle3/scripts.inc:44:Route110_TrickHousePuzzle3_EventScript_PressedButton4Metatile::
data/maps/Route110_TrickHousePuzzle3/scripts.inc:45:	setmetatile 8, 2, METATILE_TrickHousePuzzle_Button_Pressed, FALSE
data/maps/Route110_TrickHousePuzzle3/scripts.inc:205:	goto Route110_TrickHousePuzzle3_EventScript_PressButton
data/maps/Route110_TrickHousePuzzle3/scripts.inc:211:	goto Route110_TrickHousePuzzle3_EventScript_PressButton
data/maps/Route110_TrickHousePuzzle3/scripts.inc:217:	goto Route110_TrickHousePuzzle3_EventScript_PressButton
data/maps/Route110_TrickHousePuzzle3/scripts.inc:223:	goto Route110_TrickHousePuzzle3_EventScript_PressButton
data/maps/Route110_TrickHousePuzzle3/scripts.inc:226:Route110_TrickHousePuzzle3_EventScript_PressButton::
data/maps/Route113_GlassWorkshop/scripts.inc:70:	case MULTI_B_PRESSED, Route113_GlassWorkshop_EventScript_CancelGlassItemSelect
data/maps/EverGrandeCity_PokemonCenter_1F/scripts.inc:23:	waitbuttonpress
data/maps/Route109/scripts.inc:296:	case MULTI_B_PRESSED, Route109_EventScript_ChoseNotToSail
data/maps/RusturfTunnel/scripts.inc:331:	waitbuttonpress
data/maps/SeafloorCavern_Room3/scripts.inc:18:	.string "What an impressive child!\p"
data/maps/BattleFrontier_BattlePikeLobby/scripts.inc:108:	case MULTI_B_PRESSED, BattleFrontier_BattlePikeLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattlePikeLobby/scripts.inc:116:	case MULTI_B_PRESSED, BattleFrontier_BattlePikeLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattlePikeLobby/scripts.inc:132:	case MULTI_B_PRESSED, BattleFrontier_BattlePikeLobby_EventScript_LoadPartyAndCancelChallenge
data/maps/BattleFrontier_BattlePikeLobby/scripts.inc:195:	waitbuttonpress
data/maps/BattleFrontier_BattlePikeLobby/scripts.inc:241:	case MULTI_B_PRESSED, BattleFrontier_BattlePikeLobby_EventScript_ExitRules
data/maps/RustboroCity_DevonCorp_2F/scripts.inc:244:	case MULTI_B_PRESSED, RustboroCity_DevonCorp_2F_EventScript_CancelFossilSelect
data/maps/FallarborTown_BattleTentBattleRoom/scripts.inc:116:	case MULTI_B_PRESSED, FallarborTown_BattleTentBattleRoom_EventScript_AskContinueChallenge
data/maps/FallarborTown_BattleTentBattleRoom/scripts.inc:125:	case MULTI_B_PRESSED, FallarborTown_BattleTentBattleRoom_EventScript_AskContinueChallenge
data/maps/SlateportCity_PokemonCenter_1F/scripts.inc:17:	waitbuttonpress
data/maps/PetalburgCity_Gym/scripts.inc:1303:	.string "express how upset I am…\p"
data/maps/BattleFrontier_BattleDomeLobby/scripts.inc:97:	case MULTI_B_PRESSED, BattleFrontier_BattleDomeLobby_EventScript_EndChallenge
data/maps/BattleFrontier_BattleDomeLobby/scripts.inc:149:	case MULTI_B_PRESSED, BattleFrontier_BattleDomeLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleDomeLobby/scripts.inc:157:	case MULTI_B_PRESSED, BattleFrontier_BattleDomeLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleDomeLobby/scripts.inc:173:	case MULTI_B_PRESSED, BattleFrontier_BattleDomeLobby_EventScript_LoadPartyCancelChallenge
data/maps/BattleFrontier_BattleDomeLobby/scripts.inc:326:	waitbuttonpress
data/maps/BattleFrontier_BattleDomeLobby/scripts.inc:334:	waitbuttonpress
data/maps/BattleFrontier_BattleDomeLobby/scripts.inc:413:	case MULTI_B_PRESSED, BattleFrontier_BattleDomeLobby_EventScript_ExitRules
data/maps/VerdanturfTown_BattleTentLobby/scripts.inc:121:	case MULTI_B_PRESSED, VerdanturfTown_BattleTentLobby_EventScript_CancelChallenge
data/maps/VerdanturfTown_BattleTentLobby/scripts.inc:141:	case MULTI_B_PRESSED, VerdanturfTown_BattleTentLobby_EventScript_LoadPartyCancelChallenge
data/maps/VerdanturfTown_BattleTentLobby/scripts.inc:293:	case MULTI_B_PRESSED, VerdanturfTown_BattleTentLobby_EventScript_ExitRules
data/maps/BattleFrontier_ExchangeServiceCorner/scripts.inc:95:	case MULTI_B_PRESSED, BattleFrontier_ExchangeServiceCorner_EventScript_ClerkGoodbye
data/maps/BattleFrontier_ExchangeServiceCorner/scripts.inc:199:	case MULTI_B_PRESSED, BattleFrontier_ExchangeServiceCorner_EventScript_ClerkGoodbye
data/maps/BattleFrontier_ExchangeServiceCorner/scripts.inc:264:	case MULTI_B_PRESSED, BattleFrontier_ExchangeServiceCorner_EventScript_ClerkGoodbye
data/maps/BattleFrontier_ExchangeServiceCorner/scripts.inc:340:	case MULTI_B_PRESSED, BattleFrontier_ExchangeServiceCorner_EventScript_ClerkGoodbye
data/maps/MauvilleCity/scripts.inc:572:	.string "and beat him impressively.\p"
data/maps/BattleFrontier_BattleTowerBattleRoom/scripts.inc:87:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleTowerBattleRoom/scripts.inc:95:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleTowerBattleRoom/scripts.inc:104:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleTowerBattleRoom/scripts.inc:115:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleTowerBattleRoom/scripts.inc:124:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerBattleRoom_EventScript_AskReadyForOpponent
data/maps/BattleFrontier_BattleTowerBattleRoom/scripts.inc:227:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerBattleRoom_EventScript_AskReadyForMaiden
data/maps/BattleFrontier_BattleTowerBattleRoom/scripts.inc:235:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerBattleRoom_EventScript_AskReadyForMaiden
data/maps/Route120/scripts.inc:94:	msgbox Route120_Text_BerriesExpressionOfLoveIsntIt, MSGBOX_YESNO
data/maps/Route120/scripts.inc:154:	msgbox Route120_Text_MakeYourOwnImpressions, MSGBOX_DEFAULT
data/maps/BattleFrontier_BattleArenaLobby/scripts.inc:89:	case MULTI_B_PRESSED, BattleFrontier_BattleArenaLobby_EventScript_EndSaveAfterChallenge
data/maps/BattleFrontier_BattleArenaLobby/scripts.inc:122:	case MULTI_B_PRESSED, BattleFrontier_BattleArenaLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleArenaLobby/scripts.inc:130:	case MULTI_B_PRESSED, BattleFrontier_BattleArenaLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleArenaLobby/scripts.inc:146:	case MULTI_B_PRESSED, BattleFrontier_BattleArenaLobby_EventScript_LoadPartyAndCancelChallenge
data/maps/BattleFrontier_BattleArenaLobby/scripts.inc:291:	waitbuttonpress
data/maps/BattleFrontier_BattleArenaLobby/scripts.inc:328:	case MULTI_B_PRESSED, BattleFrontier_BattleArenaLobby_EventScript_ExitRules
data/maps/SlateportCity_BattleTentCorridor/scripts.inc:78:	case MULTI_B_PRESSED, SlateportCity_BattleTentCorridor_EventScript_AskReadyForOpponent
data/maps/SlateportCity_BattleTentCorridor/scripts.inc:87:	case MULTI_B_PRESSED, SlateportCity_BattleTentCorridor_EventScript_AskReadyForOpponent
data/maps/SlateportCity_BattleTentCorridor/scripts.inc:95:	case MULTI_B_PRESSED, SlateportCity_BattleTentCorridor_EventScript_EnterBattleRoom
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:137:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_EndSaveBattle
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:188:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:197:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:213:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_LoadPartyCancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:251:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:260:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:276:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_LoadPartyCancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:315:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:324:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:340:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_LoadPartyCancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:378:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:387:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:403:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_LoadPartyCancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:441:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_FeelingsWontTell
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:503:	waitbuttonpress
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:511:	waitbuttonpress
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:519:	waitbuttonpress
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:527:	waitbuttonpress
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:842:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattleTowerLobby/scripts.inc:892:	case MULTI_B_PRESSED, BattleFrontier_BattleTowerLobby_EventScript_ExitRules
data/maps/PacifidlogTown_PokemonCenter_1F/scripts.inc:16:	waitbuttonpress
data/maps/SlateportCity_OceanicMuseum_2F/scripts.inc:225:SlateportCity_OceanicMuseum_2F_EventScript_PressureExperiment::
data/maps/SlateportCity_OceanicMuseum_2F/scripts.inc:226:	msgbox SlateportCity_OceanicMuseum_2F_Text_PressureExperiment, MSGBOX_SIGN
data/maps/SlateportCity_OceanicMuseum_2F/scripts.inc:393:SlateportCity_OceanicMuseum_2F_Text_PressureExperiment:
data/maps/SlateportCity_OceanicMuseum_2F/scripts.inc:397:	.string "exerts pressure.\p"
data/maps/SlateportCity_OceanicMuseum_2F/scripts.inc:398:	.string "“In shallow water, the pressure is not\n"
data/maps/SlateportCity_OceanicMuseum_2F/scripts.inc:401:	.string "the pressure can reach even tens of\l"
data/maps/SlateportCity_OceanicMuseum_2F/map.json:262:      "script": "SlateportCity_OceanicMuseum_2F_EventScript_PressureExperiment"
data/maps/SlateportCity_OceanicMuseum_2F/map.json:270:      "script": "SlateportCity_OceanicMuseum_2F_EventScript_PressureExperiment"
data/maps/SlateportCity_OceanicMuseum_2F/events.inc:35:	bg_sign_event 12, 1, 0, BG_EVENT_PLAYER_FACING_ANY, SlateportCity_OceanicMuseum_2F_EventScript_PressureExperiment
data/maps/SlateportCity_OceanicMuseum_2F/events.inc:36:	bg_sign_event 13, 1, 0, BG_EVENT_PLAYER_FACING_ANY, SlateportCity_OceanicMuseum_2F_EventScript_PressureExperiment
data/maps/BattleFrontier_OutsideWest/scripts.inc:36:	case MULTI_B_PRESSED, BattleFrontier_OutsideWest_EventScript_CancelFerrySelect
data/maps/BattleFrontier_OutsideWest/scripts.inc:118:	waitbuttonpress
data/maps/BattleFrontier_OutsideWest/scripts.inc:180:	waitbuttonpress
data/maps/LilycoveCity_CoveLilyMotel_2F/scripts.inc:83:	.string "I'm so impressed!\p"
data/maps/LilycoveCity_PokemonTrainerFanClub/scripts.inc:450:	msgbox LilycoveCity_PokemonTrainerFanClub_Text_YouImpressive, MSGBOX_DEFAULT
data/maps/LilycoveCity_PokemonTrainerFanClub/scripts.inc:527:	case MULTI_B_PRESSED, LilycoveCity_PokemonTrainerFanClub_EventScript_CancelRateTrainer
data/maps/LilycoveCity_PokemonTrainerFanClub/scripts.inc:795:LilycoveCity_PokemonTrainerFanClub_Text_YouImpressive:
data/maps/LilycoveCity_PokemonTrainerFanClub/scripts.inc:797:	.string "Impressive!$"
data/maps/LilycoveCity_Harbor/scripts.inc:55:	case MULTI_B_PRESSED, LilycoveCity_Harbor_EventScript_ExitSailSelect
data/maps/LilycoveCity_Harbor/scripts.inc:301:	case MULTI_B_PRESSED, LilycoveCity_Harbor_EventScript_ExitFirstTimeTicketSailSelect
data/maps/BattleFrontier_BattlePalaceLobby/scripts.inc:90:	case MULTI_B_PRESSED, BattleFrontier_BattlePalaceLobby_EventScript_EndSaveAfterChallenge
data/maps/BattleFrontier_BattlePalaceLobby/scripts.inc:140:	case MULTI_B_PRESSED, BattleFrontier_BattlePalaceLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattlePalaceLobby/scripts.inc:148:	case MULTI_B_PRESSED, BattleFrontier_BattlePalaceLobby_EventScript_CancelChallenge
data/maps/BattleFrontier_BattlePalaceLobby/scripts.inc:164:	case MULTI_B_PRESSED, BattleFrontier_BattlePalaceLobby_EventScript_LoadPartyAndCancelChallenge
data/maps/BattleFrontier_BattlePalaceLobby/scripts.inc:299:	waitbuttonpress
data/maps/BattleFrontier_BattlePalaceLobby/scripts.inc:307:	waitbuttonpress
data/maps/BattleFrontier_BattlePalaceLobby/scripts.inc:345:	case MULTI_B_PRESSED, BattleFrontier_BattlePalaceLobby_EventScript_ExitRules
data/maps/BattleFrontier_Lounge5/scripts.inc:18:	waitbuttonpress
data/maps/NewMauville_Inside/scripts.inc:92:	setmetatile 6, 11, METATILE_BikeShop_Button_Pressed, FALSE
data/maps/NewMauville_Inside/scripts.inc:93:	setmetatile 13, 10, METATILE_BikeShop_Button_Pressed, FALSE
data/maps/NewMauville_Inside/scripts.inc:94:	setmetatile 16, 22, METATILE_BikeShop_Button_Pressed, FALSE
data/maps/NewMauville_Inside/scripts.inc:95:	setmetatile 4, 26, METATILE_BikeShop_Button_Pressed, FALSE
data/maps/NewMauville_Inside/scripts.inc:96:	setmetatile 30, 38, METATILE_BikeShop_Button_Pressed, FALSE
data/maps/NewMauville_Inside/scripts.inc:132:	setmetatile 2, 11, METATILE_BikeShop_Button_Pressed, FALSE
data/maps/NewMauville_Inside/scripts.inc:133:	setmetatile 17, 10, METATILE_BikeShop_Button_Pressed, FALSE
data/maps/NewMauville_Inside/scripts.inc:134:	setmetatile 25, 18, METATILE_BikeShop_Button_Pressed, FALSE
data/maps/NewMauville_Inside/scripts.inc:135:	setmetatile 18, 36, METATILE_BikeShop_Button_Pressed, FALSE
data/maps/NewMauville_Inside/scripts.inc:152:	setmetatile 33, 6, METATILE_BikeShop_Button_Pressed, FALSE
data/maps/Route110_TrickHousePuzzle2/scripts.inc:7:	call_if_eq VAR_TEMP_1, 1, Route110_TrickHousePuzzle2_EventScript_PressButton1
data/maps/Route110_TrickHousePuzzle2/scripts.inc:8:	call_if_eq VAR_TEMP_2, 1, Route110_TrickHousePuzzle2_EventScript_PressButton2
data/maps/Route110_TrickHousePuzzle2/scripts.inc:9:	call_if_eq VAR_TEMP_3, 1, Route110_TrickHousePuzzle2_EventScript_PressButton3
data/maps/Route110_TrickHousePuzzle2/scripts.inc:10:	call_if_eq VAR_TEMP_4, 1, Route110_TrickHousePuzzle2_EventScript_PressButton4
data/maps/Route110_TrickHousePuzzle2/scripts.inc:35:	call Route110_TrickHousePuzzle2_EventScript_PressButton1
data/maps/Route110_TrickHousePuzzle2/scripts.inc:44:	call Route110_TrickHousePuzzle2_EventScript_PressButton2
data/maps/Route110_TrickHousePuzzle2/scripts.inc:53:	call Route110_TrickHousePuzzle2_EventScript_PressButton3
data/maps/Route110_TrickHousePuzzle2/scripts.inc:62:	call Route110_TrickHousePuzzle2_EventScript_PressButton4
data/maps/Route110_TrickHousePuzzle2/scripts.inc:67:Route110_TrickHousePuzzle2_EventScript_PressButton1::
data/maps/Route110_TrickHousePuzzle2/scripts.inc:68:	setmetatile 11, 12, METATILE_TrickHousePuzzle_Button_Pressed, FALSE
data/maps/Route110_TrickHousePuzzle2/scripts.inc:72:Route110_TrickHousePuzzle2_EventScript_PressButton2::
data/maps/Route110_TrickHousePuzzle2/scripts.inc:73:	setmetatile 0, 4, METATILE_TrickHousePuzzle_Button_Pressed, FALSE
data/maps/Route110_TrickHousePuzzle2/scripts.inc:77:Route110_TrickHousePuzzle2_EventScript_PressButton3::
data/maps/Route110_TrickHousePuzzle2/scripts.inc:78:	setmetatile 14, 5, METATILE_TrickHousePuzzle_Button_Pressed, FALSE
data/maps/Route110_TrickHousePuzzle2/scripts.inc:82:Route110_TrickHousePuzzle2_EventScript_PressButton4::
data/maps/Route110_TrickHousePuzzle2/scripts.inc:83:	setmetatile 7, 11, METATILE_TrickHousePuzzle_Button_Pressed, FALSE
data/maps/LittlerootTown/scripts.inc:945:	.string "“Press the B Button while wearing these\n"
data/maps/Route110/scripts.inc:951:	.string "by pressing SELECT.$"
data/maps/LittlerootTown_ProfessorBirchsLab/scripts.inc:892:	.string "That's more than just impressive.\p"
data/maps/BattleFrontier_BattleDomePreBattleRoom/scripts.inc:42:	case MULTI_B_PRESSED, BattleFrontier_BattleDomePreBattleRoom_EventScript_AskReadyForNextRound
data/maps/BattleFrontier_BattleDomePreBattleRoom/scripts.inc:52:	case MULTI_B_PRESSED, BattleFrontier_BattleDomePreBattleRoom_EventScript_AskReadyForNextRound
data/maps/BattleFrontier_BattleDomePreBattleRoom/scripts.inc:61:	case MULTI_B_PRESSED, BattleFrontier_BattleDomePreBattleRoom_EventScript_AskReadyForNextRound
data/maps/BattleFrontier_BattleDomePreBattleRoom/scripts.inc:72:	case MULTI_B_PRESSED, BattleFrontier_BattleDomePreBattleRoom_EventScript_AskReadyForNextRound
data/maps/BattleFrontier_BattleDomePreBattleRoom/scripts.inc:81:	case MULTI_B_PRESSED, BattleFrontier_BattleDomePreBattleRoom_EventScript_AskReadyForNextRound
data/maps/BattleFrontier_BattleDomePreBattleRoom/scripts.inc:139:	waitbuttonpress
data/maps/VerdanturfTown_PokemonCenter_1F/scripts.inc:17:	waitbuttonpress
data/maps/BattleFrontier_RankingHall/scripts.inc:66:	waitbuttonpress
data/maps/BattleFrontier_RankingHall/scripts.inc:68:	waitbuttonpress
data/maps/FortreeCity_PokemonCenter_1F/scripts.inc:16:	waitbuttonpress
data/maps/MauvilleCity_BikeShop/scripts.inc:114:	case MULTI_B_PRESSED, MauvilleCity_BikeShop_EventScript_ExitMachHandbook
data/maps/MauvilleCity_BikeShop/scripts.inc:152:	case MULTI_B_PRESSED, MauvilleCity_BikeShop_EventScript_ExitAcroHandbook
data/maps/MauvilleCity_BikeShop/scripts.inc:269:	.string "the + Control Pad is pressed.\p"
data/maps/MauvilleCity_BikeShop/scripts.inc:298:	.string "Press the B Button while riding,\n"
data/maps/MauvilleCity_BikeShop/scripts.inc:306:	.string "Keeping the B Button pressed,\n"
data/maps/MauvilleCity_BikeShop/scripts.inc:313:	.string "Press the B Button and the + Control\n"
data/maps/MauvilleCity_BikeShop/scripts.inc:315:	.string "Press the + Control Pad to the side\n"
data/maps/MauvilleCity_BikeShop/scripts.inc:317:	.string "Press it backwards to make the BIKE\n"
data/maps/SlateportCity_PokemonFanClub/scripts.inc:75:	msgbox SlateportCity_PokemonFanClub_Text_MonMostImpressiveGiveItThis, MSGBOX_DEFAULT
data/maps/SlateportCity_PokemonFanClub/scripts.inc:85:	msgbox SlateportCity_PokemonFanClub_Text_MonMostImpressiveGiveItThis, MSGBOX_DEFAULT
data/maps/SlateportCity_PokemonFanClub/scripts.inc:95:	msgbox SlateportCity_PokemonFanClub_Text_MonMostImpressiveGiveItThis, MSGBOX_DEFAULT
data/maps/SlateportCity_PokemonFanClub/scripts.inc:105:	msgbox SlateportCity_PokemonFanClub_Text_MonMostImpressiveGiveItThis, MSGBOX_DEFAULT
data/maps/SlateportCity_PokemonFanClub/scripts.inc:115:	msgbox SlateportCity_PokemonFanClub_Text_MonMostImpressiveGiveItThis, MSGBOX_DEFAULT
data/maps/SlateportCity_PokemonFanClub/scripts.inc:284:	.string "The happy expressions of POKéMON\n"
data/maps/SlateportCity_PokemonFanClub/scripts.inc:318:SlateportCity_PokemonFanClub_Text_MonMostImpressiveGiveItThis:
data/maps/SlateportCity_PokemonFanClub/scripts.inc:320:	.string "a most impressive manner!\l"
data/maps/FallarborTown_CozmosHouse/scripts.inc:113:	.string "He's so depressed… I feel sorry for him.$"
data/maps/RustboroCity_PokemonCenter_1F/scripts.inc:17:	waitbuttonpress
data/maps/MossdeepCity_PokemonCenter_1F/scripts.inc:16:	waitbuttonpress
data/maps/Route106/scripts.inc:47:	.string "Press the A Button if you get a bite.$"
data/maps/BattleFrontier_BattlePikeThreePathRoom/scripts.inc:118:	case MULTI_B_PRESSED, BattleFrontier_BattlePikeThreePathRoom_EventScript_AskSaveChallenge
data/maps/BattleFrontier_BattlePikeThreePathRoom/scripts.inc:139:	case MULTI_B_PRESSED, BattleFrontier_BattlePikeThreePathRoom_EventScript_AskRetireChallenge
data/maps/BattleFrontier_BattlePikeThreePathRoom/scripts.inc:182:	case MULTI_B_PRESSED, BattleFrontier_BattlePikeThreePathRoom_EventScript_DeclineHint
data/maps/BattleFrontier_ScottsHouse/scripts.inc:296:	.string "That's more than impressive!\n"
data/maps/BattleFrontier_PokemonCenter_1F/scripts.inc:16:	waitbuttonpress
data/maps/DewfordTown/scripts.inc:32:	case MULTI_B_PRESSED, DewfordTown_EventScript_CancelSailSelect
data/maps/FallarborTown_BattleTentLobby/scripts.inc:120:	case MULTI_B_PRESSED, FallarborTown_BattleTentLobby_EventScript_CancelChallenge
data/maps/FallarborTown_BattleTentLobby/scripts.inc:140:	case MULTI_B_PRESSED, FallarborTown_BattleTentLobby_EventScript_LoadPartyCancelChallenge
data/maps/FallarborTown_BattleTentLobby/scripts.inc:273:	case MULTI_B_PRESSED, FallarborTown_BattleTentLobby_EventScript_ExitRules
data/maps/BattleFrontier_Lounge7/scripts.inc:41:	case MULTI_B_PRESSED, BattleFrontier_Lounge7_EventScript_ExitTutorMoveSelect
data/maps/BattleFrontier_Lounge7/scripts.inc:65:	case MULTI_B_PRESSED, BattleFrontier_Lounge7_EventScript_ExitTutorMoveSelect
data/maps/BattleFrontier_Lounge7/scripts.inc:165:	case MULTI_B_PRESSED, BattleFrontier_Lounge7_EventScript_ExitTutorMoveSelect
data/maps/BattleFrontier_Lounge7/scripts.inc:189:	case MULTI_B_PRESSED, BattleFrontier_Lounge7_EventScript_ExitTutorMoveSelect
data/maps/EverGrandeCity_PokemonLeague_1F/scripts.inc:25:	waitbuttonpress
data/text/tv.inc:117:	.string "your impressions on battling?$"
data/text/tv.inc:149:	.string "impressions about this battle with\l"
data/text/tv.inc:188:	.string "We asked the TRAINER for impressions\n"
data/text/tv.inc:197:	.string "We asked the TRAINER for impressions\n"
data/text/tv.inc:208:	.string "We asked the TRAINER for impressions\n"
data/text/tv.inc:249:	.string "It really expresses {STR_VAR_2}'s joy,\n"
data/text/tv.inc:444:	.string "can express love for the {STR_VAR_2}!\l"
data/text/tv.inc:550:	.string "section of the tale is very expressive.$"
data/text/tv.inc:901:	.string "You should have seen the expression\n"
data/text/tv.inc:910:	.string "You should have seen the expression\n"
data/text/tv.inc:1153:	.string "that day reached an impressive {STR_VAR_3}!$"
data/text/tv.inc:1692:	.string "FANS: The TRAINER's impressive\n"
data/text/tv.inc:2130:	.string "that unimpressive?$"
data/text/tv.inc:2864:	.string "Here's our impressions after having\n"
data/text/trainers.inc:556:	.string "I'll show you an impressive battle!$"
data/text/trainers.inc:1650:	.string "I must say I'm impressed!$"
data/text/trainers.inc:1665:	.string "I must say I'm impressed!$"
data/text/trainers.inc:2058:	.string "You impress me! Give me a rematch\n"
data/text/trainers.inc:2549:	.string "Oh, that's quite impressive!$"
data/text/pokedex_rating.inc:62:	.string "This is an impressive POKéDEX!$"
data/text/blend_master.inc:35:	.string "your marker, just press the A Button.\p"
data/text/blend_master.inc:37:	.string "When you see how precisely I press\n"
data/text/contest_strings.inc:324:	.string "stand out at all…{PAUSE_UNTIL_PRESS}$"
data/text/contest_strings.inc:328:	.string "out very much…{PAUSE_UNTIL_PRESS}$"
data/text/contest_strings.inc:332:	.string "little attention.{PAUSE_UNTIL_PRESS}$"
data/text/contest_strings.inc:336:	.string "lot of attention.{PAUSE_UNTIL_PRESS}$"
data/text/contest_strings.inc:340:	.string "total attention.{PAUSE_UNTIL_PRESS}$"
data/text/contest_strings.inc:344:	.string "its appeal.{PAUSE_UNTIL_PRESS}$"
data/text/match_call.inc:1344:	.string "was weak to make an impression!\p"
data/text/match_call.inc:1457:	.string "That's very impressive!\n"
data/text/match_call.inc:1583:	.string "That's very impressive!\n"
data/text/match_call.inc:1832:	.string "That's quite impressive!\n"
data/text/match_call.inc:1958:	.string "That's quite impressive!\n"
data/text/cable_club.inc:271:	.string "Press right, up, or left on the\n"
data/text/berries.inc:51:Route120_Text_BerriesExpressionOfLoveIsntIt:
data/text/berries.inc:55:	.string "It's an expression of love, isn't it?$"
data/text/berries.inc:62:Route120_Text_MakeYourOwnImpressions:
data/text/berries.inc:64:	.string "own impressions, I guess…\p"
data/text/contest_link.inc:14:	.string "The winner is {STR_VAR_1}'s {STR_VAR_2}!{PAUSE_UNTIL_PRESS}$"
data/text/contest_link.inc:17:	.string "Primary judging: No. {STR_VAR_1}{PAUSE_UNTIL_PRESS}$"
data/text/contest_link.inc:20:	.string "Secondary judging: No. {STR_VAR_1}{PAUSE_UNTIL_PRESS}$"
data/text/contest_link.inc:23:	.string "Set event: No. {STR_VAR_1}{PAUSE_UNTIL_PRESS}$"
data/text/contest_link.inc:27:	.string "{STR_VAR_1}{PAUSE_UNTIL_PRESS}$"
data/text/contest_link.inc:29:gText_MostImpressiveMon::
data/text/contest_link.inc:30:	.string "The most impressive POKéMON:\n"
data/text/contest_link.inc:31:	.string "{STR_VAR_1}'s {STR_VAR_2}{PAUSE_UNTIL_PRESS}$"
data/text/contest_link.inc:34:	.string "Set event: No. {STR_VAR_1}{PAUSE_UNTIL_PRESS}$"
data/text/contest_link.inc:38:	.string "because the TRAINER lost.{PAUSE_UNTIL_PRESS}$"
Binary file pokeemerald.elf matches
gflib/sprite.h:13:    const void *data;  // Raw uncompressed pixel data
gflib/sprite.h:18:struct CompressedSpriteSheet
gflib/sprite.h:20:    const u32 *data;  // LZ77 compressed pixel data
gflib/sprite.h:21:    u16 size;        // Uncompressed size of pixel data
gflib/sprite.h:37:    const u16 *data;  // Raw uncompressed palette data
gflib/sprite.h:41:struct CompressedSpritePalette
gflib/sprite.h:43:    const u32 *data;  // LZ77 compressed palette data
gflib/characters.h:175:#define CHAR_PROMPT_SCROLL     0xFA // waits for button press and scrolls dialog
gflib/characters.h:176:#define CHAR_PROMPT_CLEAR      0xFB // waits for button press and clears dialog
gflib/characters.h:217:#define EXT_CTRL_CODE_PAUSE_UNTIL_PRESS      0x09
gflib/text.c:26:static void DecompressGlyph_Small(u16, bool32);
gflib/text.c:27:static void DecompressGlyph_Normal(u16, bool32);
gflib/text.c:28:static void DecompressGlyph_Short(u16, bool32);
gflib/text.c:29:static void DecompressGlyph_Narrow(u16, bool32);
gflib/text.c:30:static void DecompressGlyph_SmallNarrow(u16, bool32);
gflib/text.c:31:static void DecompressGlyph_Bold(u16);
gflib/text.c:526:void DecompressGlyphTile(const void *src_, void *dest_)
gflib/text.c:1019:            case EXT_CTRL_CODE_PAUSE_UNTIL_PRESS:
gflib/text.c:1127:            DecompressGlyph_Small(currChar, textPrinter->japanese);
gflib/text.c:1130:            DecompressGlyph_Normal(currChar, textPrinter->japanese);
gflib/text.c:1136:            DecompressGlyph_Short(currChar, textPrinter->japanese);
gflib/text.c:1139:            DecompressGlyph_Narrow(currChar, textPrinter->japanese);
gflib/text.c:1142:            DecompressGlyph_SmallNarrow(currChar, textPrinter->japanese);
gflib/text.c:1283:            case EXT_CTRL_CODE_PAUSE_UNTIL_PRESS:
gflib/text.c:1448:            case EXT_CTRL_CODE_PAUSE_UNTIL_PRESS:
gflib/text.c:1568:            case EXT_CTRL_CODE_PAUSE_UNTIL_PRESS:
gflib/text.c:1592:                DecompressGlyph_Bold(temp);
gflib/text.c:1596:                DecompressGlyph_Normal(temp, TRUE);
gflib/text.c:1685:static void DecompressGlyph_Small(u16 glyphId, bool32 isJapanese)
gflib/text.c:1692:        DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1693:        DecompressGlyphTile(glyphs + 0x80, gCurGlyph.gfxBufferBottom);
gflib/text.c:1704:            DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1705:            DecompressGlyphTile(glyphs + 0x10, gCurGlyph.gfxBufferBottom);
gflib/text.c:1709:            DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1710:            DecompressGlyphTile(glyphs + 0x8, gCurGlyph.gfxBufferTop + 8);
gflib/text.c:1711:            DecompressGlyphTile(glyphs + 0x10, gCurGlyph.gfxBufferBottom);
gflib/text.c:1712:            DecompressGlyphTile(glyphs + 0x18, gCurGlyph.gfxBufferBottom + 8);
gflib/text.c:1727:static void DecompressGlyph_Narrow(u16 glyphId, bool32 isJapanese)
gflib/text.c:1734:        DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1735:        DecompressGlyphTile(glyphs + 0x80, gCurGlyph.gfxBufferBottom);
gflib/text.c:1746:            DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1747:            DecompressGlyphTile(glyphs + 0x10, gCurGlyph.gfxBufferBottom);
gflib/text.c:1751:            DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1752:            DecompressGlyphTile(glyphs + 0x8, gCurGlyph.gfxBufferTop + 8);
gflib/text.c:1753:            DecompressGlyphTile(glyphs + 0x10, gCurGlyph.gfxBufferBottom);
gflib/text.c:1754:            DecompressGlyphTile(glyphs + 0x18, gCurGlyph.gfxBufferBottom + 8);
gflib/text.c:1769:static void DecompressGlyph_SmallNarrow(u16 glyphId, bool32 isJapanese)
gflib/text.c:1776:        DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1777:        DecompressGlyphTile(glyphs + 0x80, gCurGlyph.gfxBufferBottom);
gflib/text.c:1788:            DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1789:            DecompressGlyphTile(glyphs + 0x10, gCurGlyph.gfxBufferBottom);
gflib/text.c:1793:            DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1794:            DecompressGlyphTile(glyphs + 0x8, gCurGlyph.gfxBufferTop + 8);
gflib/text.c:1795:            DecompressGlyphTile(glyphs + 0x10, gCurGlyph.gfxBufferBottom);
gflib/text.c:1796:            DecompressGlyphTile(glyphs + 0x18, gCurGlyph.gfxBufferBottom + 8);
gflib/text.c:1811:static void DecompressGlyph_Short(u16 glyphId, bool32 isJapanese)
gflib/text.c:1818:        DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1819:        DecompressGlyphTile(glyphs + 0x8, gCurGlyph.gfxBufferTop + 8);
gflib/text.c:1820:        DecompressGlyphTile(glyphs + 0x80, gCurGlyph.gfxBufferBottom);    // gCurGlyph + 0x20
gflib/text.c:1821:        DecompressGlyphTile(glyphs + 0x88, gCurGlyph.gfxBufferBottom + 8);    // gCurGlyph + 0x60
gflib/text.c:1832:            DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1833:            DecompressGlyphTile(glyphs + 0x10, gCurGlyph.gfxBufferBottom);
gflib/text.c:1837:            DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1838:            DecompressGlyphTile(glyphs + 0x8, gCurGlyph.gfxBufferTop + 8);
gflib/text.c:1839:            DecompressGlyphTile(glyphs + 0x10, gCurGlyph.gfxBufferBottom);
gflib/text.c:1840:            DecompressGlyphTile(glyphs + 0x18, gCurGlyph.gfxBufferBottom + 8);
gflib/text.c:1855:static void DecompressGlyph_Normal(u16 glyphId, bool32 isJapanese)
gflib/text.c:1862:        DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1863:        DecompressGlyphTile(glyphs + 0x80, gCurGlyph.gfxBufferBottom);
gflib/text.c:1874:            DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1875:            DecompressGlyphTile(glyphs + 0x10, gCurGlyph.gfxBufferBottom);
gflib/text.c:1879:            DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1880:            DecompressGlyphTile(glyphs + 0x8, gCurGlyph.gfxBufferTop + 8);
gflib/text.c:1881:            DecompressGlyphTile(glyphs + 0x10, gCurGlyph.gfxBufferBottom);
gflib/text.c:1882:            DecompressGlyphTile(glyphs + 0x18, gCurGlyph.gfxBufferBottom + 8);
gflib/text.c:1897:static void DecompressGlyph_Bold(u16 glyphId)
gflib/text.c:1902:    DecompressGlyphTile(glyphs, gCurGlyph.gfxBufferTop);
gflib/text.c:1903:    DecompressGlyphTile(glyphs + 0x80, gCurGlyph.gfxBufferBottom);
gflib/string_util.c:358:            case EXT_CTRL_CODE_PAUSE_UNTIL_PRESS:
gflib/string_util.c:670:        [EXT_CTRL_CODE_PAUSE_UNTIL_PRESS]      = 1,
gflib/text.h:148:void DecompressGlyphTile(const void *src_, void *dest_);
